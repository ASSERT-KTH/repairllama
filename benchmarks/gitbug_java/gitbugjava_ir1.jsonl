{"bug_id": "aws-aws-secretsmanager-jdbc-d25e52d637cf", "buggy_code": "    @Override\n    public String constructUrlFromEndpointPortDatabase(String endpoint, String port, String dbname) {\n        String url = \"jdbc:postgresql://\" + endpoint;\n        if (!StringUtils.isNullOrEmpty(port)) {\n            url += \":\" + port;\n        }\n        if (!StringUtils.isNullOrEmpty(dbname)) {\n            url += \"/\" + dbname;\n        }\n        return url;\n    }\n", "fixed_code": "    @Override\n    public String constructUrlFromEndpointPortDatabase(String endpoint, String port, String dbname) {\n        String url = \"jdbc:postgresql://\" + endpoint;\n        if (!StringUtils.isNullOrEmpty(port)) {\n            url += \":\" + port;\n        }\n        url += \"/\";\n        if (!StringUtils.isNullOrEmpty(dbname)) {\n            url += dbname;\n        }\n        return url;\n    }\n"}
{"bug_id": "jitterted-ensembler-14a39138787f", "buggy_code": "    public void acceptedBy(MemberId memberId) {\n        requireNotCompleted();\n        requireNotCanceled();\n        requireHasSpace();\n        membersWhoAccepted.add(memberId);\n        membersWhoDeclined.remove(memberId);\n    }\n", "fixed_code": "    public void acceptedBy(MemberId memberId) {\n        requireNotCompleted();\n        requireNotCanceled();\n        requireHasSpace();\n        membersWhoAccepted.add(memberId);\n        membersWhoDeclined.remove(memberId);\n        membersAsSpectators.remove(memberId);\n    }\n"}
{"bug_id": "dmak-jaxb-xew-plugin-f48935133d6a", "buggy_code": "\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\tMap<String, JDefinedClass> classes;\n\t\tif (grandParent.isClass()) {\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (classes.containsKey(clazz.name())) {\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n\t\t}\n\t\tclasses.put(clazz.name(), clazz);\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n", "fixed_code": "\tprivate void moveClassLevelUp(Outline outline, JDefinedClass clazz) {\n\t\tJDefinedClass parent = (JDefinedClass) clazz.parentContainer();\n\t\tJClassContainer grandParent = parent.parentContainer();\n\t\tMap<String, JDefinedClass> classes;\n\t\tif (grandParent.isClass()) {\n\t\t\tJDefinedClass grandParentClass = (JDefinedClass) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to class \" + grandParentClass.fullName());\n\t\t\tclasses = getPrivateField(grandParentClass, \"classes\");\n\t\t}\n\t\telse {\n\t\t\tJPackage grandParentPackage = (JPackage) grandParent;\n\t\t\twriteSummary(\"\\tMoving inner class \" + clazz.fullName() + \" to package \" + grandParentPackage.name());\n\t\t\tclasses = getPrivateField(grandParentPackage, \"classes\");\n\t\t\tsetPrivateField(clazz.mods(), \"mods\", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));\n\t\t\tfor (ClassOutline classOutline : outline.getClasses()) {\n\t\t\t\tif (classOutline.implClass == clazz) {\n\t\t\t\t\tXSComponent sc = classOutline.target.getSchemaComponent();\n\t\t\t\t\tassert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());\n\t\t\t\t\tsetPrivateField(sc, \"anonymous\", Boolean.FALSE);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (classes.containsKey(clazz.name()) || classes.containsKey(clazz.name().toUpperCase())) {\n\t\t\tString newName = parent.name() + clazz.name();\n\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n\t\t\tsetPrivateField(clazz, \"name\", newName);\n\t\t}\n\t\tboolean allClassNamesInUpperCase = classes.keySet().stream().allMatch(key -> key.equals(key.toUpperCase()));\n\t\tclasses.put(allClassNamesInUpperCase ? clazz.name().toUpperCase() : clazz.name(), clazz);\n\t\tsetPrivateField(clazz, \"outer\", grandParent);\n\t}\n"}
{"bug_id": "jhy-jsoup-5f20fcc2f728", "buggy_code": "    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n", "fixed_code": "    public Safelist addTags(String... tags) {\n        Validate.notNull(tags);\n        for (String tagName : tags) {\n            Validate.notEmpty(tagName);\n            Validate.isFalse(tagName.equalsIgnoreCase(\"noscript\"),\n                \"noscript is unsupported in Safelists, due to incompatibilities between parsers with and without script-mode enabled\");\n            tagNames.add(TagName.valueOf(tagName));\n        }\n        return this;\n    }\n"}
{"bug_id": "crowdin-crowdin-api-client-java-f0f22b2b56d7", "buggy_code": "    public JacksonJsonTransformer() {\n        ObjectMapper cleanObjectMapper = new ObjectMapper()\n            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        SimpleModule enumModule = new SimpleModule()\n            .addDeserializer(Enum.class, new EnumDeserializer());\n        SimpleModule module = new SimpleModule()\n            .addSerializer(Enum.class, new EnumSerializer())\n            .addDeserializer(Enum.class, new EnumDeserializer())\n            .addDeserializer(CrowdinApiException.class, new CrowdinApiExceptionDeserializer(cleanObjectMapper))\n            .addDeserializer(Project.class, new ProjectDeserializer(cleanObjectMapper.copy()\n                .registerModule(enumModule)))\n            .addDeserializer(FileInfo.class, new FileInfoDeserializer(cleanObjectMapper.copy()\n                .registerModule(enumModule)\n                .registerModule(new SimpleModule()\n                    .addDeserializer(ImportOptions.class, new FileImportOptionsDeserializer(cleanObjectMapper))\n                    .addDeserializer(ExportOptions.class, new FileExportOptionsDeserializer(cleanObjectMapper)))))\n            .addDeserializer(LanguageTranslations.class, new LanguageTranslationsDeserializer(cleanObjectMapper));\n        this.objectMapper = cleanObjectMapper.copy()\n                .setSerializationInclusion(JsonInclude.Include.NON_NULL)\n                .setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss+hh:mm\"))\n                .registerModule(module)\n                .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\n        this.errorObjectMapper = cleanObjectMapper;\n    }\n", "fixed_code": "    public JacksonJsonTransformer() {\n        ObjectMapper cleanObjectMapper = new ObjectMapper()\n            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        SimpleModule enumModule = new SimpleModule()\n            .addDeserializer(Enum.class, new EnumDeserializer());\n        SimpleModule module = new SimpleModule()\n            .addSerializer(Enum.class, new EnumSerializer())\n            .addDeserializer(Enum.class, new EnumDeserializer())\n            .addDeserializer(CrowdinApiException.class, new CrowdinApiExceptionDeserializer(cleanObjectMapper))\n            .addDeserializer(Project.class, new ProjectDeserializer(cleanObjectMapper.copy()\n                .registerModule(enumModule)))\n            .addDeserializer(FileInfo.class, new FileInfoDeserializer(cleanObjectMapper.copy()\n                .registerModule(enumModule)\n                .registerModule(new SimpleModule()\n                    .addDeserializer(ImportOptions.class, new FileImportOptionsDeserializer(cleanObjectMapper))\n                    .addDeserializer(ExportOptions.class, new FileExportOptionsDeserializer(cleanObjectMapper)))))\n            .addDeserializer(LanguageTranslations.class, new LanguageTranslationsDeserializer(cleanObjectMapper));\n        this.objectMapper = cleanObjectMapper.copy()\n                .setSerializationInclusion(JsonInclude.Include.NON_NULL)\n                .setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\"))\n                .registerModule(module)\n                .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)\n                .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\n        this.errorObjectMapper = cleanObjectMapper;\n    }\n"}
{"bug_id": "stellar-java-stellar-sdk-1461c2fc5b89", "buggy_code": "  public boolean isSorobanTransaction() {\n    if (mOperations.length != 1) {\n      return false;\n    }\n    Operation op = mOperations[0];\n    return op instanceof InvokeHostFunctionOperation\n        || op instanceof BumpSequenceOperation\n        || op instanceof RestoreFootprintOperation;\n  }\n", "fixed_code": "  public boolean isSorobanTransaction() {\n    if (mOperations.length != 1) {\n      return false;\n    }\n    Operation op = mOperations[0];\n    return op instanceof InvokeHostFunctionOperation\n        || op instanceof BumpFootprintExpirationOperation\n        || op instanceof RestoreFootprintOperation;\n  }\n"}
{"bug_id": "traccar-traccar-65f54c200cf0", "buggy_code": "    private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n        int globalMask = 0x0f;\n        if (codec == CODEC_GH3000) {\n            long time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; \n            globalMask = buf.readUnsignedByte();\n            if (BitUtil.check(globalMask, 0)) {\n                position.setTime(new Date(time * 1000));\n                int locationMask = buf.readUnsignedByte();\n                if (BitUtil.check(locationMask, 0)) {\n                    position.setLatitude(buf.readFloat());\n                    position.setLongitude(buf.readFloat());\n                }\n                if (BitUtil.check(locationMask, 1)) {\n                    position.setAltitude(buf.readUnsignedShort());\n                }\n                if (BitUtil.check(locationMask, 2)) {\n                    position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n                }\n                if (BitUtil.check(locationMask, 3)) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                }\n                if (BitUtil.check(locationMask, 4)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                }\n                if (BitUtil.check(locationMask, 5)) {\n                    CellTower cellTower = CellTower.fromLacCid(\n                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n                    if (BitUtil.check(locationMask, 6)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        cellTower.setOperator(buf.readUnsignedInt());\n                    }\n                    position.setNetwork(new Network(cellTower));\n                } else {\n                    if (BitUtil.check(locationMask, 6)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n                    }\n                }\n            } else {\n                getLastLocation(position, new Date(time * 1000));\n            }\n        } else {\n            position.setTime(new Date(buf.readLong()));\n            position.set(\"priority\", buf.readUnsignedByte());\n            position.setLongitude(buf.readInt() / 10000000.0);\n            position.setLatitude(buf.readInt() / 10000000.0);\n            position.setAltitude(buf.readShort());\n            position.setCourse(buf.readUnsignedShort());\n            int satellites = buf.readUnsignedByte();\n            position.set(Position.KEY_SATELLITES, satellites);\n            position.setValid(satellites != 0);\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n            if (codec == CODEC_16) {\n                buf.readUnsignedByte(); \n            }\n            readExtByte(buf, codec, CODEC_8_EXT); \n        }\n        if (BitUtil.check(globalMask, 1)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);\n            }\n        }\n        if (BitUtil.check(globalMask, 2)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);\n            }\n        }\n        if (BitUtil.check(globalMask, 3)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);\n            }\n        }\n        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);\n            }\n        }\n        if (extended) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n            }\n        }\n        if (codec == CODEC_8_EXT) {\n            int cnt = buf.readUnsignedShort();\n            for (int j = 0; j < cnt; j++) {\n                int id = buf.readUnsignedShort();\n                int length = buf.readUnsignedShort();\n                if (id == 256) {\n                    position.set(Position.KEY_VIN,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n                } else if (id == 281) {\n                    position.set(Position.KEY_DTCS,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n                } else if (id == 385) {\n                    ByteBuf data = buf.readSlice(length);\n                    data.readUnsignedByte(); \n                    int index = 1;\n                    while (data.isReadable()) {\n                        int flags = data.readUnsignedByte();\n                        if (BitUtil.from(flags, 4) > 0) {\n                            position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                            position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                            position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                        } else {\n                            position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                            position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                        }\n                        position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                        if (BitUtil.check(flags, 1)) {\n                            position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n                        }\n                        if (BitUtil.check(flags, 2)) {\n                            position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                        }\n                        index += 1;\n                    }\n                } else {\n                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            }\n        }\n        decodeNetwork(position, model);\n    }\n", "fixed_code": "    private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {\n        int globalMask = 0x0f;\n        if (codec == CODEC_GH3000) {\n            long time = buf.readUnsignedInt() & 0x3fffffff;\n            time += 1167609600; \n            globalMask = buf.readUnsignedByte();\n            if (BitUtil.check(globalMask, 0)) {\n                position.setTime(new Date(time * 1000));\n                int locationMask = buf.readUnsignedByte();\n                if (BitUtil.check(locationMask, 0)) {\n                    position.setLatitude(buf.readFloat());\n                    position.setLongitude(buf.readFloat());\n                }\n                if (BitUtil.check(locationMask, 1)) {\n                    position.setAltitude(buf.readUnsignedShort());\n                }\n                if (BitUtil.check(locationMask, 2)) {\n                    position.setCourse(buf.readUnsignedByte() * 360.0 / 256);\n                }\n                if (BitUtil.check(locationMask, 3)) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                }\n                if (BitUtil.check(locationMask, 4)) {\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                }\n                if (BitUtil.check(locationMask, 5)) {\n                    CellTower cellTower = CellTower.fromLacCid(\n                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());\n                    if (BitUtil.check(locationMask, 6)) {\n                        cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        cellTower.setOperator(buf.readUnsignedInt());\n                    }\n                    position.setNetwork(new Network(cellTower));\n                } else {\n                    if (BitUtil.check(locationMask, 6)) {\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    }\n                    if (BitUtil.check(locationMask, 7)) {\n                        position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());\n                    }\n                }\n            } else {\n                getLastLocation(position, new Date(time * 1000));\n            }\n        } else {\n            position.setTime(new Date(buf.readLong()));\n            position.set(\"priority\", buf.readUnsignedByte());\n            position.setLongitude(buf.readInt() / 10000000.0);\n            position.setLatitude(buf.readInt() / 10000000.0);\n            position.setAltitude(buf.readShort());\n            position.setCourse(buf.readUnsignedShort());\n            int satellites = buf.readUnsignedByte();\n            position.set(Position.KEY_SATELLITES, satellites);\n            position.setValid(satellites != 0);\n            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n            position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));\n            if (codec == CODEC_16) {\n                buf.readUnsignedByte(); \n            }\n            readExtByte(buf, codec, CODEC_8_EXT); \n        }\n        if (BitUtil.check(globalMask, 1)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);\n            }\n        }\n        if (BitUtil.check(globalMask, 2)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);\n            }\n        }\n        if (BitUtil.check(globalMask, 3)) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);\n            }\n        }\n        if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);\n            }\n        }\n        if (extended) {\n            int cnt = readExtByte(buf, codec, CODEC_8_EXT);\n            for (int j = 0; j < cnt; j++) {\n                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);\n                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));\n            }\n        }\n        if (codec == CODEC_8_EXT) {\n            int cnt = buf.readUnsignedShort();\n            for (int j = 0; j < cnt; j++) {\n                int id = buf.readUnsignedShort();\n                int length = buf.readUnsignedShort();\n                if (id == 256) {\n                    position.set(Position.KEY_VIN,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));\n                } else if (id == 281) {\n                    position.set(Position.KEY_DTCS,\n                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));\n                } else if (id == 385) {\n                    ByteBuf data = buf.readSlice(length);\n                    data.readUnsignedByte(); \n                    int index = 1;\n                    while (data.isReadable()) {\n                        int flags = data.readUnsignedByte();\n                        if (BitUtil.from(flags, 4) > 0) {\n                            position.set(\"beacon\" + index + \"Uuid\", ByteBufUtil.hexDump(data.readSlice(16)));\n                            position.set(\"beacon\" + index + \"Major\", data.readUnsignedShort());\n                            position.set(\"beacon\" + index + \"Minor\", data.readUnsignedShort());\n                        } else {\n                            position.set(\"beacon\" + index + \"Namespace\", ByteBufUtil.hexDump(data.readSlice(10)));\n                            position.set(\"beacon\" + index + \"Instance\", ByteBufUtil.hexDump(data.readSlice(6)));\n                        }\n                        position.set(\"beacon\" + index + \"Rssi\", (int) data.readByte());\n                        if (BitUtil.check(flags, 1)) {\n                            position.set(\"beacon\" + index + \"Battery\", data.readUnsignedShort() * 0.01);\n                        }\n                        if (BitUtil.check(flags, 2)) {\n                            position.set(\"beacon\" + index + \"Temp\", data.readUnsignedShort());\n                        }\n                        index += 1;\n                    }\n                } else if (id == 10829 || id == 10831) {\n                    ByteBuf data = buf.readSlice(length);\n                    data.readUnsignedByte(); \n                    for (int i = 1; data.isReadable(); i++) {\n                        ByteBuf beacon = data.readSlice(data.readUnsignedByte());\n                        while (beacon.isReadable()) {\n                            int parameterId = beacon.readUnsignedByte();\n                            int parameterLength = beacon.readUnsignedByte();\n                            switch (parameterId) {\n                                case 0:\n                                    position.set(\"tag\" + i + \"Rssi\", (int) beacon.readByte());\n                                    break;\n                                case 1:\n                                    String beaconId = ByteBufUtil.hexDump(beacon.readSlice(parameterLength));\n                                    position.set(\"tag\" + i + \"Id\", beaconId);\n                                    break;\n                                case 13:\n                                    position.set(\"tag\" + i + \"LowBattery\", beacon.readUnsignedByte());\n                                    break;\n                                case 14:\n                                    position.set(\"tag\" + i + \"Battery\", beacon.readUnsignedShort());\n                                    break;\n                                default:\n                                    beacon.skipBytes(parameterLength);\n                                    break;\n                            }\n                        }\n                    }\n                } else {\n                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            }\n        }\n        decodeNetwork(position, model);\n    }\n"}
{"bug_id": "mthmulders-mcs-eff905bef8d8", "buggy_code": "    private void printRow(final Help.TextTable table, final SearchResponse.Response.Doc doc) {\n        var lastUpdated = DATE_TIME_FORMATTER.format(\n                Instant.ofEpochMilli(doc.timestamp()).atZone(ZoneId.systemDefault())\n        );\n        table.addRowValues(doc.id(), lastUpdated);\n    }\n", "fixed_code": "    private void printRow(final Help.TextTable table, final SearchResponse.Response.Doc doc) {\n        var lastUpdated = DATE_TIME_FORMATTER.format(\n                Instant.ofEpochMilli(doc.timestamp()).atZone(ZoneId.systemDefault())\n        );\n        table.addRowValues(doc.id() + \":\" + doc.latestVersion(), lastUpdated);\n    }\n"}
{"bug_id": "traccar-traccar-fdbd269b9b99", "buggy_code": "    private Object decodePosition(\n            Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n        List<Position> positions = new LinkedList<>();\n        Position position = null;\n        DateBuilder dateBuilder = null;\n        for (String pair : sentence.split(\",\")) {\n            String[] data = pair.split(\"[=:]\");\n            int key;\n            try {\n                key = Integer.parseInt(data[0], 16);\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            String value = data[1];\n            if (key == 0x0) {\n                if (position != null) {\n                    position.setTime(dateBuilder.getDate());\n                    positions.add(position);\n                }\n                position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                dateBuilder = new DateBuilder(new Date());\n            } else if (position != null) {\n                switch (key) {\n                    case 0x11:\n                        value = (\"000000\" + value).substring(value.length());\n                        dateBuilder.setDateReverse(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4)));\n                        break;\n                    case 0x10:\n                        value = (\"00000000\" + value).substring(value.length());\n                        dateBuilder.setTime(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4, 6)),\n                                Integer.parseInt(value.substring(6)) * 10);\n                        break;\n                    case 0xA:\n                        position.setValid(true);\n                        position.setLatitude(Double.parseDouble(value));\n                        break;\n                    case 0xB:\n                        position.setValid(true);\n                        position.setLongitude(Double.parseDouble(value));\n                        break;\n                    case 0xC:\n                        position.setAltitude(Double.parseDouble(value));\n                        break;\n                    case 0xD:\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        break;\n                    case 0xE:\n                        position.setCourse(Integer.parseInt(value));\n                        break;\n                    case 0xF:\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        break;\n                    case 0x12:\n                        position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                        break;\n                    case 0x20:\n                        position.set(Position.KEY_ACCELERATION, value);\n                        break;\n                    case 0x24:\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                        break;\n                    case 0x81:\n                        position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                        break;\n                    case 0x82:\n                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);\n                        break;\n                    case 0x104:\n                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                        break;\n                    case 0x105:\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                        break;\n                    case 0x10c:\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        break;\n                    case 0x10d:\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        break;\n                    case 0x111:\n                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + key, value);\n                        break;\n                }\n            }\n        }\n        if (position != null) {\n            if (!position.getValid()) {\n                getLastLocation(position, null);\n            }\n            position.setTime(dateBuilder.getDate());\n            positions.add(position);\n        }\n        return positions.isEmpty() ? null : positions;\n    }\n", "fixed_code": "    private Object decodePosition(\n            Channel channel, SocketAddress remoteAddress, String sentence, String id) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n        List<Position> positions = new LinkedList<>();\n        Position position = null;\n        DateBuilder dateBuilder = null;\n        for (String pair : sentence.split(\",\")) {\n            String[] data = pair.split(\"[=:]\");\n            int key;\n            try {\n                key = Integer.parseInt(data[0], 16);\n            } catch (NumberFormatException e) {\n                continue;\n            }\n            String value = data[1];\n            if (key == 0x0) {\n                if (position != null) {\n                    position.setTime(dateBuilder.getDate());\n                    positions.add(position);\n                }\n                position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                dateBuilder = new DateBuilder(new Date());\n            } else if (position != null) {\n                switch (key) {\n                    case 0x11:\n                        value = (\"000000\" + value).substring(value.length());\n                        dateBuilder.setDateReverse(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4)));\n                        break;\n                    case 0x10:\n                        value = (\"00000000\" + value).substring(value.length());\n                        dateBuilder.setTime(\n                                Integer.parseInt(value.substring(0, 2)),\n                                Integer.parseInt(value.substring(2, 4)),\n                                Integer.parseInt(value.substring(4, 6)),\n                                Integer.parseInt(value.substring(6)) * 10);\n                        break;\n                    case 0xA:\n                        position.setValid(true);\n                        position.setLatitude(Double.parseDouble(value));\n                        break;\n                    case 0xB:\n                        position.setValid(true);\n                        position.setLongitude(Double.parseDouble(value));\n                        break;\n                    case 0xC:\n                        position.setAltitude(Double.parseDouble(value));\n                        break;\n                    case 0xD:\n                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));\n                        break;\n                    case 0xE:\n                        position.setCourse(Integer.parseInt(value));\n                        break;\n                    case 0xF:\n                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                        break;\n                    case 0x12:\n                        position.set(Position.KEY_HDOP, Integer.parseInt(value));\n                        break;\n                    case 0x20:\n                        position.set(Position.KEY_ACCELERATION, value);\n                        break;\n                    case 0x24:\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);\n                        break;\n                    case 0x81:\n                        position.set(Position.KEY_RSSI, Integer.parseInt(value));\n                        break;\n                    case 0x82:\n                        position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value) * 0.1);\n                        break;\n                    case 0x104:\n                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));\n                        break;\n                    case 0x105:\n                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));\n                        break;\n                    case 0x10c:\n                        position.set(Position.KEY_RPM, Integer.parseInt(value));\n                        break;\n                    case 0x10d:\n                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                        break;\n                    case 0x111:\n                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));\n                        break;\n                    default:\n                        position.set(Position.PREFIX_IO + key, value);\n                        break;\n                }\n            }\n        }\n        if (position != null) {\n            if (!position.getValid()) {\n                getLastLocation(position, null);\n            }\n            position.setTime(dateBuilder.getDate());\n            positions.add(position);\n        }\n        return positions.isEmpty() ? null : positions;\n    }\n"}
{"bug_id": "traccar-traccar-8b4d3ee0b964", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        String sentence = (String) msg;\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null || !sentence.matches(\"![35A-D],.*\")) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        String type = sentence.substring(1, 2);\n        position.set(Position.KEY_TYPE, type);\n        if (type.equals(\"3\")) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n            return position;\n        } else if (type.equals(\"5\")) {\n            String[] values = sentence.split(\",\");\n            getLastLocation(position, null);\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n            return position;\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"C\")) {\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            return position;\n        } else if (type.equals(\"A\")) {\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        String sentence = (String) msg;\n        if (sentence.startsWith(\"!1,\")) {\n            int index = sentence.indexOf(',', 3);\n            if (index < 0) {\n                index = sentence.length();\n            }\n            getDeviceSession(channel, remoteAddress, sentence.substring(3, index));\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null || !sentence.matches(\"![345A-D],.*\")) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        String type = sentence.substring(1, 2);\n        position.set(Position.KEY_TYPE, type);\n        if (type.equals(\"3\")) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_RESULT, sentence.substring(3));\n            return position;\n        } else if (type.equals(\"4\")) {\n            String[] values = sentence.split(\",\");\n            getLastLocation(position, null);\n            for (int i = 1; i <= 3; i++) {\n                if (!values[i + 1].isEmpty()) {\n                    position.set(\"phone\" + i, values[i + 1]);\n                }\n            }\n            return position;\n        } else if (type.equals(\"5\")) {\n            String[] values = sentence.split(\",\");\n            getLastLocation(position, null);\n            position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));\n            if (values.length >= 4) {\n                position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));\n            }\n            return position;\n        } else if (type.equals(\"B\") || type.equals(\"D\")) {\n            Parser parser = new Parser(PATTERN_BD, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));\n            position.set(Position.KEY_HDOP, parser.nextDouble(0));\n            return position;\n        } else if (type.equals(\"C\")) {\n            Parser parser = new Parser(PATTERN_C, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            decodeState(position, parser);\n            return position;\n        } else if (type.equals(\"A\")) {\n            Parser parser = new Parser(PATTERN_A, sentence);\n            if (!parser.matches()) {\n                return null;\n            }\n            decodeFix(position, parser);\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-e73f36db83b9", "buggy_code": "    private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n        Parser parser = new Parser(PATTERN_ERI, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        long mask = parser.nextHexLong();\n        LinkedList<Position> positions = new LinkedList<>();\n        Integer power = parser.nextInt();\n        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n        while (itemParser.find()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            decodeLocation(position, itemParser);\n            positions.add(position);\n        }\n        Position position = positions.getLast();\n        skipLocation(parser);\n        if (power != null) {\n            position.set(Position.KEY_POWER, power * 0.001);\n        }\n        if (parser.hasNextAny(12)) {\n            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n            position.set(Position.KEY_HOURS, parseHours(parser.next()));\n            position.set(Position.PREFIX_ADC + 1, parser.next());\n            position.set(Position.PREFIX_ADC + 2, parser.next());\n            position.set(Position.PREFIX_ADC + 3, parser.next());\n            if (parser.hasNext(2)) {\n                position.set(Position.KEY_INPUT, parser.nextHexInt());\n                position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n            }\n            if (parser.hasNext(4)) {\n                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n                decodeStatus(position, parser);\n            }\n            int index = 0;\n            String[] data = parser.next().split(\",\");\n            index += 1; \n            if (BitUtil.check(mask, 0)) {\n                index += 1; \n            }\n            if (BitUtil.check(mask, 1)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; \n                    index += 1; \n                    if (!data[index++].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);\n                    }\n                }\n            }\n            if (BitUtil.check(mask, 2)) {\n                index += 1; \n            }\n            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; \n                    if (BitUtil.check(mask, 3)) {\n                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));\n                    }\n                    if (BitUtil.check(mask, 4)) {\n                        index += 1; \n                    }\n                }\n            }\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        }\n        decodeDeviceTime(position, parser);\n        if (ignoreFixTime) {\n            positions.clear();\n            positions.add(position);\n        }\n        return positions;\n    }\n", "fixed_code": "    private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {\n        Parser parser = new Parser(PATTERN_ERI, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        long mask = parser.nextHexLong();\n        LinkedList<Position> positions = new LinkedList<>();\n        Integer power = parser.nextInt();\n        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());\n        while (itemParser.find()) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            decodeLocation(position, itemParser);\n            positions.add(position);\n        }\n        Position position = positions.getLast();\n        skipLocation(parser);\n        if (power != null) {\n            position.set(Position.KEY_POWER, power * 0.001);\n        }\n        if (parser.hasNextAny(12)) {\n            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n            position.set(Position.KEY_HOURS, parseHours(parser.next()));\n            position.set(Position.PREFIX_ADC + 1, parser.next());\n            position.set(Position.PREFIX_ADC + 2, parser.next());\n            position.set(Position.PREFIX_ADC + 3, parser.next());\n            if (parser.hasNext(2)) {\n                position.set(Position.KEY_INPUT, parser.nextHexInt());\n                position.set(Position.KEY_OUTPUT, parser.nextHexInt());\n            }\n            if (parser.hasNext(4)) {\n                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n                decodeStatus(position, parser);\n            }\n            int index = 0;\n            String[] data = parser.next().split(\",\");\n            index += 1; \n            if (BitUtil.check(mask, 0)) {\n                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(data[index++], 16));\n            }\n            if (BitUtil.check(mask, 1)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; \n                    index += 1; \n                    if (!data[index++].isEmpty()) {\n                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);\n                    }\n                }\n            }\n            if (BitUtil.check(mask, 2)) {\n                index += 1; \n            }\n            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {\n                int deviceCount = Integer.parseInt(data[index++]);\n                for (int i = 1; i <= deviceCount; i++) {\n                    index += 1; \n                    if (BitUtil.check(mask, 3)) {\n                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));\n                    }\n                    if (BitUtil.check(mask, 4)) {\n                        index += 1; \n                    }\n                }\n            }\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        }\n        decodeDeviceTime(position, parser);\n        if (ignoreFixTime) {\n            positions.clear();\n            positions.add(position);\n        }\n        return positions;\n    }\n"}
{"bug_id": "AuthMe-ConfigMe-aa91a6b315ec", "buggy_code": "    public void setComment(@NotNull String path, @NotNull String... commentLines) {\n        comments.put(path, Collections.unmodifiableList(Arrays.asList(commentLines)));\n    }\n", "fixed_code": "    public void setComment(@NotNull String path, @NotNull String... commentLines) {\n        List<String> replaced = comments.put(path, Collections.unmodifiableList(Arrays.asList(commentLines)));\n        if (replaced != null) {\n            throw new IllegalStateException(\"Comment lines already exists for the path '\" + path + \"'\");\n        }\n    }\n"}
{"bug_id": "traccar-traccar-8de9a36abef8", "buggy_code": "    private void decodeFragment(Position position, String fragment) {\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                if (!values[index++].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n                }\n                position.setCourse(Integer.parseInt(values[index++]));\n                if (index < values.length) {\n                    position.setAltitude(Integer.parseInt(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));\n                }\n                break;\n            case \"GSM\":\n                index += 1; \n                index += 1; \n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                }\n                if (index < values.length) {\n                    String[] hours = values[index].split(\"-\");\n                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                }\n                break;\n            case \"ADC\":\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                if (index < values.length) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                }\n                break;\n            case \"DTT\":\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                if (!values[index++].isEmpty()) {\n                    int io = Integer.parseInt(values[index - 1], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                position.set(\"eventStatus\", values[index++]);\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                position.set(\"eventData\", values[index++]);\n                break;\n            case \"OBD\":\n                position.set(\"obd\", values[index++]);\n                break;\n            case \"TAG\":\n                position.set(\"tagData\", values[index++]);\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index += 1; \n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n", "fixed_code": "    private void decodeFragment(Position position, String fragment) {\n        int dataIndex = fragment.indexOf(':');\n        int index = 0;\n        String[] values;\n        if (fragment.length() == dataIndex + 1) {\n            values = new String[0];\n        } else {\n            values = fragment.substring(dataIndex + 1).split(\";\");\n        }\n        switch (fragment.substring(0, dataIndex)) {\n            case \"GPS\":\n                position.setValid(values[index++].equals(\"A\"));\n                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'S') {\n                    position.setLatitude(-position.getLatitude());\n                }\n                position.setLongitude(Double.parseDouble(values[index].substring(1)));\n                if (values[index++].charAt(0) == 'W') {\n                    position.setLongitude(-position.getLongitude());\n                }\n                if (!values[index++].isEmpty()) {\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n                }\n                position.setCourse(Integer.parseInt(values[index++]));\n                if (index < values.length && !values[index++].isEmpty()) {\n                    position.setAltitude(Integer.parseInt(values[index - 1]));\n                }\n                if (index < values.length && !values[index++].isEmpty()) {\n                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index - 1]));\n                }\n                if (index < values.length && !values[index++].isEmpty()) {\n                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index - 1]));\n                }\n                break;\n            case \"GSM\":\n                index += 1; \n                index += 1; \n                position.setNetwork(new Network(CellTower.from(\n                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),\n                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),\n                        Integer.parseInt(values[index++]))));\n                break;\n            case \"COT\":\n                if (index < values.length) {\n                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));\n                }\n                if (index < values.length) {\n                    String[] hours = values[index].split(\"-\");\n                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600\n                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)\n                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);\n                }\n                break;\n            case \"ADC\":\n                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));\n                if (index < values.length) {\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));\n                }\n                if (index < values.length) {\n                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));\n                }\n                break;\n            case \"DTT\":\n                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));\n                if (!values[index++].isEmpty()) {\n                    int io = Integer.parseInt(values[index - 1], 16);\n                    position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));\n                    position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));\n                    position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));\n                    position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));\n                    position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));\n                    position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));\n                    position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));\n                }\n                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);\n                position.set(\"eventStatus\", values[index++]);\n                if (index < values.length) {\n                    position.set(\"packetType\", values[index++]);\n                }\n                break;\n            case \"ETD\":\n                position.set(\"eventData\", values[index++]);\n                break;\n            case \"OBD\":\n                position.set(\"obd\", values[index++]);\n                break;\n            case \"TAG\":\n                position.set(\"tagData\", values[index++]);\n                break;\n            case \"IWD\":\n                while (index < values.length) {\n                    int sensorIndex = Integer.parseInt(values[index++]);\n                    int dataType = Integer.parseInt(values[index++]);\n                    if (dataType == 0) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);\n                    } else if (dataType == 1) {\n                        index += 1; \n                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-392f00082faf", "buggy_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n", "fixed_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n"}
{"bug_id": "cloudsimplus-cloudsimplus-61c8b942d1ec", "buggy_code": "    public HostAbstract(final List<Pe> peList, final boolean activate) {\n        this(defaultBwCapacity, defaultStorageCapacity, new HarddriveStorage(defaultRamCapacity), peList, activate);\n    }\n", "fixed_code": "    public HostAbstract(final List<Pe> peList, final boolean activate) {\n        this(defaultRamCapacity, defaultBwCapacity, new HarddriveStorage(defaultStorageCapacity), peList, activate);\n    }\n"}
{"bug_id": "traccar-traccar-3771dd156efb", "buggy_code": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n        Network network = new Network();\n        int cellCount = Integer.parseInt(values[index++]);\n        if (cellCount > 0) {\n            index += 1; \n            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;\n            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = Integer.parseInt(values[index++]);\n                int cid = Integer.parseInt(values[index++]);\n                String rssi = values[index++];\n                if (!rssi.isEmpty()) {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                } else {\n                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                }\n            }\n        }\n        if (index < values.length && !values[index].isEmpty()) {\n            int wifiCount = Integer.parseInt(values[index++]);\n            for (int i = 0; i < wifiCount; i++) {\n                index += 1; \n                String macAddress = values[index++];\n                String rssi = values[index++];\n                if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                }\n            }\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodePosition(DeviceSession deviceSession, String data) {\n        Parser parser = new Parser(PATTERN_POSITION, data);\n        if (!parser.matches()) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));\n        position.setCourse(parser.nextDouble(0));\n        position.setAltitude(parser.nextDouble(0));\n        position.set(Position.KEY_SATELLITES, parser.nextInt(0));\n        position.set(Position.KEY_RSSI, parser.nextInt(0));\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));\n        position.set(Position.KEY_STEPS, parser.nextInt(0));\n        int status = parser.nextHexInt(0);\n        position.set(Position.KEY_ALARM, decodeAlarm(status));\n        if (BitUtil.check(status, 4)) {\n            position.set(Position.KEY_MOTION, true);\n        }\n        String[] values = parser.next().split(\",\");\n        int index = 0;\n        if (values.length < 4 || !values[index + 3].startsWith(\"F\")) {\n            Network network = new Network();\n            int cellCount = Integer.parseInt(values[index++]);\n            if (cellCount > 0) {\n                index += 1; \n                int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;\n                int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;\n                for (int i = 0; i < cellCount; i++) {\n                    int lac = Integer.parseInt(values[index++]);\n                    int cid = Integer.parseInt(values[index++]);\n                    String rssi = values[index++];\n                    if (!rssi.isEmpty()) {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));\n                    } else {\n                        network.addCellTower(CellTower.from(mcc, mnc, lac, cid));\n                    }\n                }\n            }\n            if (index < values.length && !values[index].isEmpty()) {\n                int wifiCount = Integer.parseInt(values[index++]);\n                for (int i = 0; i < wifiCount; i++) {\n                    index += 1; \n                    String macAddress = values[index++];\n                    String rssi = values[index++];\n                    if (!macAddress.isEmpty() && !macAddress.equals(\"0\") && !rssi.isEmpty()) {\n                        network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));\n                    }\n                }\n            }\n            if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n                position.setNetwork(network);\n            }\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-dfc546a26f5b", "buggy_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n", "fixed_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        buf.readUnsignedByte(); \n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); \n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n"}
{"bug_id": "traccar-traccar-3331593759a2", "buggy_code": "    private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n        int type = buf.readUnsignedByte();\n        if (type == 0xF0) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            if (buf.readUnsignedByte() > 0) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n            buf.readUnsignedByte(); \n            int count;\n            int subtype = buf.readUnsignedByte();\n            switch (subtype) {\n                case 0x01:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x0102:\n                            case 0x0528:\n                            case 0x0546:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0103:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x052A:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x0105:\n                            case 0x052C:\n                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x014A:\n                            case 0x0537:\n                            case 0x0538:\n                            case 0x0539:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                                break;\n                            default:\n                                switch (length) {\n                                    case 1:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                                        break;\n                                    case 2:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());\n                                        break;\n                                    case 4:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());\n                                        break;\n                                    default:\n                                        buf.skipBytes(length);\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x03:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x1A:\n                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                break;\n                            case 0x1B:\n                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                break;\n                            case 0x1C:\n                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                break;\n                            case 0x1D:\n                            case 0x1E:\n                            case 0x1F:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                                break;\n                            case 0x23:\n                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        buf.skipBytes(length);\n                    }\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x0B:\n                    if (buf.readUnsignedByte() > 0) {\n                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n                    }\n                    getLastLocation(position, time);\n                    break;\n                default:\n                    return null;\n            }\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n        int type = buf.readUnsignedByte();\n        if (type == 0xF0) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            if (buf.readUnsignedByte() > 0) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n            buf.readUnsignedByte(); \n            int count;\n            int subtype = buf.readUnsignedByte();\n            switch (subtype) {\n                case 0x01:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x0102:\n                            case 0x0528:\n                            case 0x0546:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0103:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x052A:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x0105:\n                            case 0x052C:\n                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x014A:\n                            case 0x0537:\n                            case 0x0538:\n                            case 0x0539:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                                break;\n                            default:\n                                switch (length) {\n                                    case 1:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                                        break;\n                                    case 2:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());\n                                        break;\n                                    case 4:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());\n                                        break;\n                                    default:\n                                        buf.skipBytes(length);\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x03:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedByte();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x1A:\n                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                break;\n                            case 0x1B:\n                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                break;\n                            case 0x1C:\n                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                break;\n                            case 0x1D:\n                            case 0x1E:\n                            case 0x1F:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                                break;\n                            case 0x23:\n                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        buf.skipBytes(length);\n                    }\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x0B:\n                    if (buf.readUnsignedByte() > 0) {\n                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n                    }\n                    getLastLocation(position, time);\n                    break;\n                default:\n                    return null;\n            }\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "semver4j-semver4j-10102b374298", "buggy_code": "    @Override\n    public String toString() {\n        return rangesList.stream()\n            .map(RangesList::formatRanges)\n            .collect(joining(OR_JOINER));\n    }\n", "fixed_code": "    @Override\n    public String toString() {\n        return rangesList.stream()\n            .map(RangesList::formatRanges)\n            .collect(joining(OR_JOINER))\n            .replaceAll(\"^\\\\(([^()]+)\\\\)$\", \"$1\");\n    }\n"}
{"bug_id": "nikoo28-java-solutions-8d81307ea165", "buggy_code": "  public int[] calculateSpans(int[] prices) {\n    int[] spans = new int[prices.length];\n    spans[0] = 1; \n    Stack<Integer> indexStack = new Stack<>();\n    indexStack.push(0);\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] <= prices[i])\n        indexStack.pop();\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n      indexStack.push(i);\n    }\n    return spans;\n  }\n", "fixed_code": "  public int[] calculateSpans(int[] prices) {\n    int[] spans = new int[prices.length];\n    spans[0] = 1; \n    Stack<Integer> indexStack = new Stack<>();\n    indexStack.push(0);\n    for (int i = 1; i < prices.length; i++) {\n      while (!indexStack.isEmpty()\n          && prices[indexStack.peek()] < prices[i])\n        indexStack.pop();\n      if (indexStack.isEmpty())\n        spans[i] = i + 1;\n      else\n        spans[i] = i - indexStack.peek();\n      indexStack.push(i);\n    }\n    return spans;\n  }\n"}
{"bug_id": "traccar-traccar-5a1a8d9192ee", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedInt(); \n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedInt(); \n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); \n                    break;\n                default:\n                    break;\n            }\n        }\n        return position;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedInt(); \n        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedShort(); \n        buf.readUnsignedInt(); \n        buf.readUnsignedByte(); \n        buf.readUnsignedShort(); \n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        List<Integer> parameters = getParameters(deviceSession.getDeviceId());\n        for (int parameter : parameters) {\n            switch (parameter) {\n                case 0x01:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                    break;\n                case 0x02:\n                    position.setLatitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x03:\n                    position.setLongitude(buf.readIntLE() / 1000000.0);\n                    break;\n                case 0x04:\n                    position.setTime(new Date((buf.readUnsignedIntLE() + 946684800) * 1000));\n                    break;\n                case 0x05:\n                    position.setValid(buf.readUnsignedByte() > 0);\n                    break;\n                case 0x06:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x07:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x08:\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    break;\n                case 0x09:\n                    position.setCourse(buf.readUnsignedShortLE());\n                    break;\n                case 0x0A:\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                    break;\n                case 0x0B:\n                    position.setAltitude(buf.readShortLE());\n                    break;\n                case 0x0C:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                    break;\n                case 0x0D:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);\n                    break;\n                case 0x14:\n                    position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                    break;\n                case 0x15:\n                    position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                    break;\n                case 0x19:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1A:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                    break;\n                case 0x1B:\n                    buf.readUnsignedByte(); \n                    break;\n                default:\n                    break;\n            }\n        }\n        return position;\n    }\n"}
{"bug_id": "jitterted-ensembler-0963194c9ebc", "buggy_code": "    public static ParticipantAction from(MemberStatus memberStatus, boolean disabled) {\n        return switch (memberStatus) {\n            case UNKNOWN, DECLINED -> new ParticipantAction(\n                    \"/member/accept\",\n                    \"Participate in Rotation &#x2328;\",\n                    disabled);\n            case PARTICIPANT -> new ParticipantAction(\n                    \"/member/decline\",\n                    \"Leave Rotation &#x1f44b;\",\n                    false); \n            case SPECTATOR -> new ParticipantAction(\n                    \"/member/accept\",\n                    \"Switch to Participant &#x1f44b;\",\n                    disabled);\n        };\n    }\n", "fixed_code": "    public static ParticipantAction from(MemberStatus memberStatus, boolean disabled) {\n        return switch (memberStatus) {\n            case UNKNOWN, DECLINED -> new ParticipantAction(\n                    \"/member/accept\",\n                    \"Participate in Rotation &#x2328;\",\n                    disabled);\n            case PARTICIPANT -> new ParticipantAction(\n                    \"/member/decline\",\n                    \"Leave Rotation &#x1f44b;\",\n                    false); \n            case SPECTATOR -> new ParticipantAction(\n                    \"/member/accept\",\n                    \"Switch to Participant &#x2328;\",\n                    disabled);\n        };\n    }\n"}
{"bug_id": "jitterted-ensembler-0e512e5b3677", "buggy_code": "    public static EnsembleSummaryView toView(Ensemble ensemble, MemberId memberId, MemberService memberService) {\n        List<MemberView> participantViews = transform(memberService, ensemble.acceptedMembers());\n        return new EnsembleSummaryView(ensemble.getId().id(),\n                                       ensemble.name(),\n                                       DateTimeFormatting.formatAsDateTimeForCommonIso8601(ensemble.startDateTime()),\n                                       ensemble.acceptedCount(),\n                                       participantViews,\n                                       participantViews,\n                                       memberStatusToViewString(ensemble, memberId),\n                                       ensemble.meetingLink().toString(),\n                                       new GoogleCalendarLinkCreator().createFor(ensemble),\n                                       ensemble.recordingLink().toString()\n        );\n    }\n", "fixed_code": "    public static EnsembleSummaryView toView(Ensemble ensemble, MemberId memberId, MemberService memberService) {\n        List<MemberView> participantViews = transform(memberService, ensemble.acceptedMembers());\n        List<MemberView> spectatorViews = transform(memberService, ensemble.spectators());\n        return new EnsembleSummaryView(ensemble.getId().id(),\n                                       ensemble.name(),\n                                       DateTimeFormatting.formatAsDateTimeForCommonIso8601(ensemble.startDateTime()),\n                                       ensemble.acceptedCount(),\n                                       participantViews,\n                                       spectatorViews,\n                                       memberStatusToViewString(ensemble, memberId),\n                                       ensemble.meetingLink().toString(),\n                                       new GoogleCalendarLinkCreator().createFor(ensemble),\n                                       ensemble.recordingLink().toString()\n        );\n    }\n"}
{"bug_id": "jitterted-ensembler-60ec3bf0273b", "buggy_code": "    public void joinAsSpectator(MemberId memberId) {\n        membersAsSpectators.add(memberId);\n        membersWhoAccepted.remove(memberId);\n    }\n", "fixed_code": "    public void joinAsSpectator(MemberId memberId) {\n        membersAsSpectators.add(memberId);\n        membersWhoAccepted.remove(memberId);\n        membersWhoDeclined.remove(memberId);\n    }\n"}
{"bug_id": "traccar-traccar-ee3cbd4aba2e", "buggy_code": "    private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n        position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n        int battery = buf.readUnsignedByte();\n        if (battery <= 100) {\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n        } else if (battery == 0xAA) {\n            position.set(Position.KEY_CHARGE, true);\n        }\n        position.setNetwork(new Network(CellTower.fromCidLac(\n                getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n        int product = buf.readUnsignedByte();\n        int status = buf.readUnsignedShort();\n        int alarm = buf.readUnsignedShort();\n        if (product == 1 || product == 2) {\n            if (BitUtil.check(alarm, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n        } else if (product == 3) {\n            position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n            if (BitUtil.check(alarm, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n            if (BitUtil.check(alarm, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            }\n            if (BitUtil.check(alarm, 3)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n            }\n        }\n        position.set(Position.KEY_STATUS, status);\n        while (buf.readableBytes() > 2) {\n            int id = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setAltitude(buf.readShort());\n                    break;\n                case 0x0C:\n                    position.set(\"gyro\", ByteBufUtil.hexDump(buf.readSlice(6)));\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n        position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n        int battery = buf.readUnsignedByte();\n        if (battery <= 100) {\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n        } else if (battery == 0xAA) {\n            position.set(Position.KEY_CHARGE, true);\n        }\n        position.setNetwork(new Network(CellTower.fromCidLac(\n                getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n        int product = buf.readUnsignedByte();\n        int status = buf.readUnsignedShort();\n        int alarm = buf.readUnsignedShort();\n        if (product == 1 || product == 2) {\n            if (BitUtil.check(alarm, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n        } else if (product == 3) {\n            position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n            if (BitUtil.check(alarm, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n            if (BitUtil.check(alarm, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            }\n            if (BitUtil.check(alarm, 3)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n            }\n        }\n        position.set(Position.KEY_STATUS, status);\n        while (buf.readableBytes() > 2) {\n            int id = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setAltitude(buf.readShort());\n                    break;\n                case 0x0C:\n                    int x = buf.readUnsignedShort();\n                    if (x > 0x8000) {\n                        x -= 0x10000;\n                    }\n                    int y = buf.readUnsignedShort();\n                    if (y > 0x8000) {\n                        y -= 0x10000;\n                    }\n                    int z = buf.readUnsignedShort();\n                    if (z > 0x8000) {\n                        z -= 0x10000;\n                    }\n                    position.set(\"tilt\", String.format(\"[%d,%d,%d]\", x, y, z));\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        return position;\n    }\n"}
{"bug_id": "fishercoder1534-Leetcode-2110c6b023b7", "buggy_code": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            if (root == null || p == root || q == root) {\n                return root;\n            }\n            if ((root.val - p.val) * (root.val - q.val) > 0) {\n                if (root.val - p.val > 0) {\n                    return lowestCommonAncestor(root.left, p, q);\n                }\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            return root;\n        }\n", "fixed_code": "        public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n            if (root == null || p == root || q == root) {\n                return root;\n            }\n            if (root.val > p.val && root.val > q.val) {\n                return lowestCommonAncestor(root.left, p, q);\n            } else if (root.val < p.val && root.val < q.val) {\n                return lowestCommonAncestor(root.right, p, q);\n            }\n            return root;\n        }\n"}
{"bug_id": "jhy-jsoup-8e2b86839b27", "buggy_code": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();\n    }\n", "fixed_code": "    private boolean isFormatAsBlock(Document.OutputSettings out) {\n        return tag.isBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();\n    }\n"}
{"bug_id": "traccar-traccar-cadcd2676adb", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.skipBytes(2); \n        int type = buf.readUnsignedByte();\n        buf.readUnsignedShort(); \n        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT\n                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {\n            ByteBuf response = Unpooled.buffer();\n            response.writeByte(0x29);\n            response.writeByte(0x29); \n            response.writeByte(MSG_CONFIRMATION);\n            response.writeShort(5); \n            response.writeByte(buf.getByte(buf.writerIndex() - 2));\n            response.writeByte(type);\n            response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); \n            response.writeByte(Checksum.xor(response.nioBuffer()));\n            response.writeByte(0x0D); \n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n        }\n        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD\n                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(buf, 2))\n                    .setMonth(BcdUtil.readInteger(buf, 2))\n                    .setDay(BcdUtil.readInteger(buf, 2))\n                    .setHour(BcdUtil.readInteger(buf, 2))\n                    .setMinute(BcdUtil.readInteger(buf, 2))\n                    .setSecond(BcdUtil.readInteger(buf, 2));\n            position.setTime(dateBuilder.getDate());\n            position.setLatitude(BcdUtil.readCoordinate(buf));\n            position.setLongitude(BcdUtil.readCoordinate(buf));\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));\n            position.setCourse(BcdUtil.readInteger(buf, 4));\n            position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n            if (type != MSG_ALARM) {\n                int odometer = buf.readUnsignedMedium();\n                if (BitUtil.to(odometer, 16) > 0) {\n                    position.set(Position.KEY_ODOMETER, odometer);\n                } else if (odometer > 0) {\n                    position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n                }\n                position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n                buf.readUnsignedShort();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n                if (type == MSG_PERIPHERAL) {\n                    buf.readUnsignedShort(); \n                    int dataType = buf.readUnsignedByte();\n                    buf.readUnsignedByte(); \n                    switch (dataType) {\n                        case 0x01:\n                            position.set(Position.KEY_FUEL_LEVEL,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x02:\n                            position.set(Position.PREFIX_TEMP + 1,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x18:\n                            for (int i = 1; i <= 4; i++) {\n                                double value = buf.readUnsignedShort();\n                                if (value > 0x0000 && value < 0xFFFF) {\n                                    position.set(\"fuel\" + i, value / 0xFFFE);\n                                }\n                            }\n                            break;\n                        case 0x23:\n                            Network network = new Network();\n                            int count = buf.readUnsignedByte();\n                            for (int i = 0; i < count; i++) {\n                                network.addCellTower(CellTower.from(\n                                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                        buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                            }\n                            if (count > 0) {\n                                position.setNetwork(network);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }  else {\n                buf.readUnsignedByte(); \n                buf.readUnsignedByte(); \n                byte[] alarmStatus = new byte[8];\n                buf.readBytes(alarmStatus);\n                decodeAlarmStatus(position, alarmStatus);\n            }\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.skipBytes(2); \n        int type = buf.readUnsignedByte();\n        buf.readUnsignedShort(); \n        if (type == MSG_LOGIN || type == MSG_ADMIN_NUMBER || type == MSG_SEND_TEXT\n                || type == MSG_SMS_ALARM_SWITCH || type == MSG_POSITION_REUPLOAD) {\n            ByteBuf response = Unpooled.buffer();\n            response.writeByte(0x29);\n            response.writeByte(0x29); \n            response.writeByte(MSG_CONFIRMATION);\n            response.writeShort(5); \n            response.writeByte(buf.getByte(buf.writerIndex() - 2));\n            response.writeByte(type);\n            response.writeByte(buf.writerIndex() > 9 ? buf.getByte(9) : 0); \n            response.writeByte(Checksum.xor(response.nioBuffer()));\n            response.writeByte(0x0D); \n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n        }\n        if (type == MSG_ON_DEMAND || type == MSG_POSITION_UPLOAD || type == MSG_POSITION_REUPLOAD\n                || type == MSG_ALARM || type == MSG_REPLY || type == MSG_PERIPHERAL) {\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, readIdentifiers(buf));\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(buf, 2))\n                    .setMonth(BcdUtil.readInteger(buf, 2))\n                    .setDay(BcdUtil.readInteger(buf, 2))\n                    .setHour(BcdUtil.readInteger(buf, 2))\n                    .setMinute(BcdUtil.readInteger(buf, 2))\n                    .setSecond(BcdUtil.readInteger(buf, 2));\n            position.setTime(dateBuilder.getDate());\n            position.setLatitude(BcdUtil.readCoordinate(buf));\n            position.setLongitude(BcdUtil.readCoordinate(buf));\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4)));\n            position.setCourse(BcdUtil.readInteger(buf, 4));\n            position.setValid((buf.readUnsignedByte() & 0x80) != 0);\n            if (type != MSG_ALARM) {\n                int odometer = buf.readUnsignedMedium();\n                if (BitUtil.to(odometer, 16) > 0) {\n                    position.set(Position.KEY_ODOMETER, odometer);\n                } else if (odometer > 0) {\n                    position.set(Position.KEY_FUEL_LEVEL, BitUtil.from(odometer, 16));\n                }\n                position.set(Position.KEY_STATUS, buf.readUnsignedInt());\n                buf.readUnsignedShort();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                buf.readUnsignedByte();\n                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n                if (type == MSG_PERIPHERAL) {\n                    buf.readUnsignedShort(); \n                    int dataType = buf.readUnsignedByte();\n                    buf.readUnsignedByte(); \n                    switch (dataType) {\n                        case 0x01:\n                            position.set(Position.KEY_FUEL_LEVEL,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x02:\n                            position.set(Position.PREFIX_TEMP + 1,\n                                    buf.readUnsignedByte() * 100 + buf.readUnsignedByte());\n                            break;\n                        case 0x18:\n                            for (int i = 1; i <= 4; i++) {\n                                double value = buf.readUnsignedShort();\n                                if (value > 0x0000 && value < 0xFFFF) {\n                                    position.set(\"fuel\" + i, value / 0xFFFE);\n                                }\n                            }\n                            break;\n                        case 0x20:\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                            break;\n                        case 0x23:\n                            Network network = new Network();\n                            int count = buf.readUnsignedByte();\n                            for (int i = 0; i < count; i++) {\n                                network.addCellTower(CellTower.from(\n                                        buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                        buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                            }\n                            if (count > 0) {\n                                position.setNetwork(network);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }  else {\n                buf.readUnsignedByte(); \n                buf.readUnsignedByte(); \n                byte[] alarmStatus = new byte[8];\n                buf.readBytes(alarmStatus);\n                decodeAlarmStatus(position, alarmStatus);\n            }\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-1a1126d2d392", "buggy_code": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n        String type = values[index++].substring(5);\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; \n        Network network = new Network();\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; \n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n        position.setNetwork(network);\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n        if (values[index].length() == 3) {\n            index += 1; \n        }\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        position.setTime(dateFormat.parse(values[index++] + values[index++]));\n        position.setLatitude(Double.parseDouble(values[index++]));\n        position.setLongitude(Double.parseDouble(values[index++]));\n        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n        position.setCourse(Double.parseDouble(values[index++]));\n        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n        position.setValid(values[index++].equals(\"1\"));\n        return position;\n    }\n", "fixed_code": "    private Position decode4(\n            Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {\n        int index = 0;\n        String type = values[index++].substring(5);\n        if (!type.equals(\"STT\") && !type.equals(\"ALT\")) {\n            return null;\n        }\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_TYPE, type);\n        position.set(Position.KEY_VERSION_FW, values[index++]);\n        index += 1; \n        Network network = new Network();\n        for (int i = 0; i < 7; i++) {\n            int cid = Integer.parseInt(values[index++]);\n            int mcc = Integer.parseInt(values[index++]);\n            int mnc = Integer.parseInt(values[index++]);\n            int lac, rssi;\n            if (i == 0) {\n                rssi = Integer.parseInt(values[index++]);\n                lac = Integer.parseInt(values[index++]);\n            } else {\n                lac = Integer.parseInt(values[index++]);\n                rssi = Integer.parseInt(values[index++]);\n            }\n            index += 1; \n            if (cid > 0) {\n                network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));\n            }\n        }\n        position.setNetwork(network);\n        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));\n        position.set(Position.KEY_ARCHIVE, values[index++].equals(\"0\") ? true : null);\n        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));\n        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));\n        if (values[index].length() == 3) {\n            index += 1; \n        }\n        if (values[index].isEmpty()) {\n            getLastLocation(position, null);\n        } else {\n            DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHH:mm:ss\");\n            dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n            position.setTime(dateFormat.parse(values[index++] + values[index++]));\n            position.setLatitude(Double.parseDouble(values[index++]));\n            position.setLongitude(Double.parseDouble(values[index++]));\n            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n            position.setCourse(Double.parseDouble(values[index++]));\n            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));\n            position.setValid(values[index++].equals(\"1\"));\n        }\n        return position;\n    }\n"}
{"bug_id": "jhy-jsoup-a349582236a7", "buggy_code": "    private boolean isInlineable(Document.OutputSettings out) {\n        return tag().isInline()\n            && (parent() == null || parent().isBlock())\n            && previousSibling() != null\n            && !out.outline();\n    }\n", "fixed_code": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false;\n        final Node prev = previousSibling();\n        boolean isFirst = siblingIndex == 0;\n        if (siblingIndex == 1 && prev instanceof TextNode && (((TextNode) prev).isBlank()))\n            isFirst = true;\n        return (parent() == null || parent().isBlock())\n            && !isFirst\n            && !out.outline();\n    }\n"}
{"bug_id": "traccar-traccar-8638bc8ab98f", "buggy_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x56:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    buf.readUnsignedByte(); \n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x56:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    buf.readUnsignedByte(); \n                    break;\n                case 0x60:\n                    int event = buf.readUnsignedShort();\n                    position.set(Position.KEY_EVENT, event);\n                    if (event >= 0x0061 && event <= 0x0066) {\n                        buf.skipBytes(6); \n                        stringValue = buf.readCharSequence(8, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    }\n                    break;\n                case 0x63:\n                    for (int i = 1; i <= length / 11; i++) {\n                        position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(6)));\n                        position.set(\"lock\" + i + \"Battery\", buf.readUnsignedShort() * 0.001);\n                        position.set(\"lock\" + i + \"Seal\", buf.readUnsignedByte() == 0x31);\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                    }\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n"}
{"bug_id": "jhy-jsoup-2a4a9cf83dea", "buggy_code": "        @Override\n        public boolean matches(Element root, Element element) {\n            for (int i = evaluators.size() -1; i >= 0; --i) {\n                if (element == null)\n                    return false;\n                Evaluator eval = evaluators.get(i);\n                if (!eval.matches(root, element))\n                    return false;\n                element = element.parent();\n            }\n            return true;\n        }\n", "fixed_code": "        @Override\n        public boolean matches(Element root, Element element) {\n            if (element == root)\n                return false; \n            for (int i = evaluators.size() -1; i >= 0; --i) {\n                if (element == null)\n                    return false;\n                Evaluator eval = evaluators.get(i);\n                if (!eval.matches(root, element))\n                    return false;\n                element = element.parent();\n            }\n            return true;\n        }\n"}
{"bug_id": "traccar-traccar-d797671b2ce6", "buggy_code": "    private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n        int type = buf.readUnsignedByte();\n        if (type == 0xF0) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            if (buf.readUnsignedByte() > 0) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n            buf.readUnsignedByte(); \n            int count;\n            int subtype = buf.readUnsignedByte();\n            switch (subtype) {\n                case 0x01:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x0102:\n                            case 0x0528:\n                            case 0x0546:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0103:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x052A:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x0105:\n                            case 0x052C:\n                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x014A:\n                            case 0x0537:\n                            case 0x0538:\n                            case 0x0539:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x052D:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                                break;\n                            case 0x0530:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0535:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0536:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0547:\n                            case 0x0548:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                                break;\n                            default:\n                                switch (length) {\n                                    case 1:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                                        break;\n                                    case 2:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());\n                                        break;\n                                    case 4:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());\n                                        break;\n                                    default:\n                                        buf.skipBytes(length);\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    break;\n                case 0x02:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        buf.readUnsignedInt(); \n                        int codeCount = buf.readUnsignedShort();\n                        for (int j = 0; j < codeCount; j++) {\n                            buf.skipBytes(16); \n                        }\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    break;\n                case 0x03:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedByte();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x1A:\n                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                break;\n                            case 0x1B:\n                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                break;\n                            case 0x1C:\n                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                break;\n                            case 0x1D:\n                            case 0x1E:\n                            case 0x1F:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                                break;\n                            case 0x23:\n                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        buf.skipBytes(length);\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    break;\n                case 0x0B:\n                    if (buf.readUnsignedByte() > 0) {\n                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n                    }\n                    getLastLocation(position, time);\n                    break;\n                default:\n                    return null;\n            }\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {\n        int type = buf.readUnsignedByte();\n        if (type == 0xF0) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            if (buf.readUnsignedByte() > 0) {\n                position.set(Position.KEY_ARCHIVE, true);\n            }\n            buf.readUnsignedByte(); \n            int count;\n            int subtype = buf.readUnsignedByte();\n            switch (subtype) {\n                case 0x01:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedShort();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x0102:\n                            case 0x0528:\n                            case 0x0546:\n                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0103:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x052A:\n                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x0105:\n                            case 0x052C:\n                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);\n                                break;\n                            case 0x014A:\n                            case 0x0537:\n                            case 0x0538:\n                            case 0x0539:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                                break;\n                            case 0x052D:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                                break;\n                            case 0x0530:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0535:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0536:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0547:\n                            case 0x0548:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                                break;\n                            default:\n                                switch (length) {\n                                    case 1:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());\n                                        break;\n                                    case 2:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());\n                                        break;\n                                    case 4:\n                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());\n                                        break;\n                                    default:\n                                        buf.skipBytes(length);\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x02:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        buf.readUnsignedInt(); \n                        int codeCount = buf.readUnsignedShort();\n                        for (int j = 0; j < codeCount; j++) {\n                            buf.skipBytes(16); \n                        }\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x03:\n                    count = buf.readUnsignedByte();\n                    for (int i = 0; i < count; i++) {\n                        int id = buf.readUnsignedByte();\n                        int length = buf.readUnsignedByte();\n                        switch (id) {\n                            case 0x1A:\n                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                break;\n                            case 0x1B:\n                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                break;\n                            case 0x1C:\n                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                break;\n                            case 0x1D:\n                            case 0x1E:\n                            case 0x1F:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);\n                                break;\n                            case 0x23:\n                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        buf.skipBytes(length);\n                    }\n                    getLastLocation(position, time);\n                    decodeCoordinates(position, buf);\n                    position.setTime(time);\n                    break;\n                case 0x0B:\n                    if (buf.readUnsignedByte() > 0) {\n                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());\n                    }\n                    getLastLocation(position, time);\n                    break;\n                default:\n                    return null;\n            }\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-779486a30483", "buggy_code": "    protected Object decodeAvrmc(\n            String sentence, Channel channel, SocketAddress remoteAddress) {\n        Parser parser = new Parser(PATTERN_AVRMC, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        String deviceModel = null;\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n        if (device != null) {\n            deviceModel = device.getModel();\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        DateBuilder dateBuilder = new DateBuilder()\n                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n        String status = parser.next();\n        String upperCaseStatus = status.toUpperCase();\n        position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n        position.set(Position.KEY_STATUS, status);\n        position.setLatitude(parser.nextCoordinate());\n        position.setLongitude(parser.nextCoordinate());\n        position.setSpeed(parser.nextDouble(0));\n        position.setCourse(parser.nextDouble(0));\n        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n        position.setTime(dateBuilder.getDate());\n        String event = parser.next();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll(\"\\\\.\", \"\")) * 0.001);\n        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n        position.set(Position.KEY_GPS, parser.nextInt());\n        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n        if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n        }\n        Integer lac = parser.nextHexInt();\n        Integer cid = parser.nextHexInt();\n        Integer mcc = parser.nextInt();\n        Integer mnc = parser.nextInt();\n        if (lac != null && cid != null && mcc != null && mnc != null) {\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n        }\n        parser.next(); \n        String checksum = parser.next();\n        if (channel != null) {\n            sendAcknowledge(status, event, checksum, channel, remoteAddress);\n            String devicePassword = AttributeUtil.getDevicePassword(\n                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n            sendEventResponse(event, devicePassword, channel, remoteAddress);\n        }\n        return position;\n    }\n", "fixed_code": "    protected Object decodeAvrmc(\n            String sentence, Channel channel, SocketAddress remoteAddress) {\n        Parser parser = new Parser(PATTERN_AVRMC, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        DeviceSession deviceSession =\n            getDeviceSession(channel, remoteAddress, parser.next());\n        if (deviceSession == null) {\n            return null;\n        }\n        String deviceModel = null;\n        Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());\n        if (device != null) {\n            deviceModel = device.getModel();\n        }\n        if (deviceModel == null) {\n            deviceModel = \"\";\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        DateBuilder dateBuilder = new DateBuilder()\n                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n        String status = parser.next();\n        String upperCaseStatus = status.toUpperCase();\n        position.setValid(upperCaseStatus.equals(\"A\") || upperCaseStatus.equals(\"R\") || upperCaseStatus.equals(\"P\"));\n        position.set(Position.KEY_STATUS, status);\n        position.setLatitude(parser.nextCoordinate());\n        position.setLongitude(parser.nextCoordinate());\n        position.setSpeed(parser.nextDouble(0));\n        position.setCourse(parser.nextDouble(0));\n        dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));\n        position.setTime(dateBuilder.getDate());\n        String event = parser.next();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));\n        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll(\"\\\\.\", \"\")) * 0.001);\n        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);\n        position.set(Position.KEY_GPS, parser.nextInt());\n        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);\n        if (\"AVL110\".equals(deviceModel) || \"AVL120\".equals(deviceModel)) {\n            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);\n        } else {\n            parser.next();\n        }\n        Integer lac = parser.nextHexInt();\n        Integer cid = parser.nextHexInt();\n        Integer mcc = parser.nextInt();\n        Integer mnc = parser.nextInt();\n        if (lac != null && cid != null && mcc != null && mnc != null) {\n            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));\n        }\n        parser.next(); \n        String checksum = parser.next();\n        if (channel != null) {\n            sendAcknowledge(status, event, checksum, channel, remoteAddress);\n            String devicePassword = AttributeUtil.getDevicePassword(\n                    getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);\n            sendEventResponse(event, devicePassword, channel, remoteAddress);\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-4ece72558c80", "buggy_code": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n        if (!connectionless) {\n            buf.readUnsignedInt(); \n        }\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); \n                int length = buf.readInt() - 4;\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n                if (isPrintable(buf, length)) {\n                    position.set(Position.KEY_RESULT,\n                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());\n                } else {\n                    position.set(Position.KEY_RESULT,\n                            ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n        return positions.isEmpty() ? null : positions;\n    }\n", "fixed_code": "    private List<Position> parseData(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {\n        List<Position> positions = new LinkedList<>();\n        if (!connectionless) {\n            buf.readUnsignedInt(); \n        }\n        int codec = buf.readUnsignedByte();\n        int count = buf.readUnsignedByte();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            position.setValid(true);\n            if (codec == CODEC_13) {\n                buf.readUnsignedByte(); \n                int length = buf.readInt() - 4;\n                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n                if (isPrintable(buf, length)) {\n                    String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    if (data.startsWith(\"GTSL\")) {\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, data.split(\"\\\\|\")[4]);\n                    } else {\n                        position.set(Position.KEY_RESULT, data);\n                    }\n                } else {\n                    position.set(Position.KEY_RESULT,\n                            ByteBufUtil.hexDump(buf.readSlice(length)));\n                }\n            } else if (codec == CODEC_12) {\n                decodeSerial(channel, remoteAddress, deviceSession, position, buf);\n            } else {\n                decodeLocation(position, buf, codec, model);\n            }\n            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {\n                positions.add(position);\n            }\n        }\n        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {\n            ByteBuf response = Unpooled.buffer();\n            if (connectionless) {\n                response.writeShort(5);\n                response.writeShort(0);\n                response.writeByte(0x01);\n                response.writeByte(locationPacketId);\n                response.writeByte(count);\n            } else {\n                response.writeInt(count);\n            }\n            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n        }\n        return positions.isEmpty() ? null : positions;\n    }\n"}
{"bug_id": "jhy-jsoup-6ccd158754e2", "buggy_code": "    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        for (int i = 0; i < s.length(); i++) {\n            int c = s.codePointAt(i);\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { \n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));\n            } else {\n                sb.append((char) c);\n            }\n        }\n    }\n", "fixed_code": "    private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {\n        for (int i = 0; i < s.length(); i++) {\n            int c = s.codePointAt(i);\n            if (c == ' ') {\n                sb.append(spaceAsPlus ? '+' : \"%20\");\n            } else if (c > 127) { \n                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));\n                if (Character.charCount(c) == 2) i++; \n            } else {\n                sb.append((char) c);\n            }\n        }\n    }\n"}
{"bug_id": "traccar-traccar-37ed394724c0", "buggy_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS && variant != Variant.SL4X) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2 || type == MSG_LBS_3\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20 || variant == Variant.SL4X) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) || variant == Variant.SL4X\n                    ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac;\n                int cid;\n                if (type == MSG_LBS_2 || type == MSG_WIFI_3) {\n                    lac = buf.readInt();\n                    cid = (int) buf.readLong();\n                } else if (type == MSG_WIFI_5 || type == MSG_LBS_3) {\n                    lac = buf.readUnsignedShort();\n                    cid = (int) buf.readUnsignedInt();\n                } else {\n                    lac = buf.readUnsignedShort();\n                    cid = buf.readUnsignedMedium();\n                }\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20 && variant != Variant.SL4X) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2 && type != MSG_LBS_3) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                boolean hasLength = hasStatus(type)\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                decodeLbs(position, buf, type, hasLength);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    short alarmExtension = buf.readUnsignedByte();\n                    if (variant != Variant.VXT01) {\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarmExtension));\n                    }\n                }\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if (type == MSG_GPS_LBS_2 && variant == Variant.SEEWORLD) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                buf.readUnsignedByte(); \n                buf.readUnsignedByte(); \n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                buf.readUnsignedInt(); \n                int temperature = buf.readUnsignedShort();\n                if (BitUtil.check(temperature, 15)) {\n                    temperature = -BitUtil.to(temperature, 15);\n                }\n                position.set(Position.PREFIX_TEMP + 1, temperature * 0.01);\n                position.set(\"humidity\", buf.readUnsignedShort() * 0.01);\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 3 + 6 || buf.readableBytes() == 3 + 4 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                buf.readUnsignedByte(); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0 ? true : null);\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                if (variant == Variant.JC400) {\n                    buf.readUnsignedShort(); \n                    buf.readUnsignedByte(); \n                }\n                decodeGps(\n                        position, buf, false,\n                        variant == Variant.JC400, variant == Variant.JC400, variant == Variant.JC400,\n                        deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            if (variant == Variant.JC400) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n            }\n            short event = buf.readUnsignedByte();\n            position.set(Position.KEY_EVENT, event);\n            switch (event) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x0E:\n                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                    break;\n                case 0x76:\n                    position.set(Position.KEY_ALARM, Position.ALARM_TEMPERATURE);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x88:\n                    position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n", "fixed_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS && variant != Variant.SL4X) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2 || type == MSG_LBS_3\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20 || variant == Variant.SL4X) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) || variant == Variant.SL4X\n                    ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac;\n                int cid;\n                if (type == MSG_LBS_2 || type == MSG_WIFI_3) {\n                    lac = buf.readInt();\n                    cid = (int) buf.readLong();\n                } else if (type == MSG_WIFI_5 || type == MSG_LBS_3) {\n                    lac = buf.readUnsignedShort();\n                    cid = (int) buf.readUnsignedInt();\n                } else {\n                    lac = buf.readUnsignedShort();\n                    cid = buf.readUnsignedMedium();\n                }\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20 && variant != Variant.SL4X) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2 && type != MSG_LBS_3) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                boolean hasLength = hasStatus(type)\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                decodeLbs(position, buf, type, hasLength);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    int battery = buf.readUnsignedByte();\n                    position.set(Position.KEY_BATTERY_LEVEL, battery <= 6 ? battery * 100 / 6 : battery);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    short alarmExtension = buf.readUnsignedByte();\n                    if (variant != Variant.VXT01) {\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarmExtension));\n                    }\n                }\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if (type == MSG_GPS_LBS_2 && variant == Variant.SEEWORLD) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                buf.readUnsignedByte(); \n                buf.readUnsignedByte(); \n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                buf.readUnsignedInt(); \n                int temperature = buf.readUnsignedShort();\n                if (BitUtil.check(temperature, 15)) {\n                    temperature = -BitUtil.to(temperature, 15);\n                }\n                position.set(Position.PREFIX_TEMP + 1, temperature * 0.01);\n                position.set(\"humidity\", buf.readUnsignedShort() * 0.01);\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 3 + 6 || buf.readableBytes() == 3 + 4 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                buf.readUnsignedByte(); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0 ? true : null);\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                if (variant == Variant.JC400) {\n                    buf.readUnsignedShort(); \n                    buf.readUnsignedByte(); \n                }\n                decodeGps(\n                        position, buf, false,\n                        variant == Variant.JC400, variant == Variant.JC400, variant == Variant.JC400,\n                        deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            if (variant == Variant.JC400) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n            }\n            short event = buf.readUnsignedByte();\n            position.set(Position.KEY_EVENT, event);\n            switch (event) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x0E:\n                    position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                    break;\n                case 0x76:\n                    position.set(Position.KEY_ALARM, Position.ALARM_TEMPERATURE);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x88:\n                    position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n"}
{"bug_id": "snowflakedb-snowflake-jdbc-f2c8eba73535", "buggy_code": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    return response != null\n        && (response.getStatusLine().getStatusCode() < 500\n            || \n            response.getStatusLine().getStatusCode() >= 600)\n        && \n        response.getStatusLine().getStatusCode() != 408\n        && \n        (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403);\n  }\n", "fixed_code": "  static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {\n    return response != null\n        && (response.getStatusLine().getStatusCode() < 500\n            || \n            response.getStatusLine().getStatusCode() >= 600)\n        && \n        response.getStatusLine().getStatusCode() != 408\n        && \n        response.getStatusLine().getStatusCode() != 429\n        && \n        (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403);\n  }\n"}
{"bug_id": "traccar-traccar-d2ce5af34782", "buggy_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM && type != MSG_LBS_STATUS);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n            if (type == MSG_STATUS && variant == Variant.VXT01) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n", "fixed_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                boolean hasLength = hasStatus(type)\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                decodeLbs(position, buf, type, hasLength);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n            if (type == MSG_STATUS && variant == Variant.VXT01) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-4a5b8d79b560", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        String sentence = (String) msg;\n        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"datetime_actual\":\n                    position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        }\n        return position;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        String sentence = (String) msg;\n        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));\n        Position position = new Position();\n        position.setProtocol(getProtocolName());\n        for (String entry : sentence.split(\",\")) {\n            int delimiter = entry.indexOf('=');\n            String key = entry.substring(0, delimiter);\n            String value = entry.substring(delimiter + 1);\n            switch (key) {\n                case \"unit\":\n                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);\n                    if (deviceSession != null) {\n                        position.setDeviceId(deviceSession.getDeviceId());\n                    }\n                    break;\n                case \"gps_valid\":\n                    position.setValid(Integer.parseInt(value) != 0);\n                    break;\n                case \"datetime_actual\":\n                    position.setTime(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").parse(value));\n                    break;\n                case \"latitude\":\n                    position.setLatitude(Double.parseDouble(value));\n                    break;\n                case \"longitude\":\n                    position.setLongitude(Double.parseDouble(value));\n                    break;\n                case \"altitude\":\n                    position.setAltitude(Double.parseDouble(value));\n                    break;\n                case \"velocity\":\n                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));\n                    break;\n                case \"heading\":\n                    position.setCourse(Integer.parseInt(value));\n                    break;\n                case \"eventid\":\n                    position.set(Position.KEY_EVENT, Integer.parseInt(value));\n                    break;\n                case \"mileage\":\n                case \"odometer\":\n                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));\n                    break;\n                case \"satellites\":\n                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));\n                    break;\n                case \"ignition\":\n                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);\n                    break;\n                case \"door\":\n                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);\n                    break;\n                case \"arm\":\n                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);\n                    break;\n                case \"fuel\":\n                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));\n                    break;\n                case \"rpm\":\n                    position.set(Position.KEY_RPM, Integer.parseInt(value));\n                    break;\n                case \"main_voltage\":\n                    position.set(Position.KEY_POWER, Double.parseDouble(value));\n                    break;\n                case \"backup_voltage\":\n                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));\n                    break;\n                case \"analog1\":\n                case \"analog2\":\n                case \"analog3\":\n                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));\n                    break;\n                case \"extra1\":\n                case \"extra2\":\n                case \"extra3\":\n                default:\n                    position.set(key, value);\n                    break;\n            }\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-6631d7c4b352", "buggy_code": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n        int endIndex = -1;\n        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {\n            if (buf.getByte(i) == ']') {\n                endIndex = i + 1;\n                break;\n            }\n        }\n        if (endIndex > 0) {\n            ByteBuf frame = Unpooled.buffer();\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {\n        int brackets = 0;\n        int endIndex = -1;\n        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {\n            byte b = buf.getByte(i);\n            switch (b) {\n                case '[':\n                    brackets += 1;\n                    break;\n                case ']':\n                    brackets -= 1;\n                    break;\n                default:\n                    break;\n            }\n            if (brackets == 0 && i > buf.readerIndex()) {\n                endIndex = i + 1;\n                break;\n            }\n        }\n        if (endIndex > 0) {\n            ByteBuf frame = Unpooled.buffer();\n            while (buf.readerIndex() < endIndex) {\n                byte b1 = buf.readByte();\n                if (b1 == '}') {\n                    byte b2 = buf.readByte();\n                    switch (b2) {\n                        case 0x01:\n                            frame.writeByte('}');\n                            break;\n                        case 0x02:\n                            frame.writeByte('[');\n                            break;\n                        case 0x03:\n                            frame.writeByte(']');\n                            break;\n                        case 0x04:\n                            frame.writeByte(',');\n                            break;\n                        case 0x05:\n                            frame.writeByte('*');\n                            break;\n                        default:\n                            throw new IllegalArgumentException(String.format(\n                                    \"unexpected byte at %d: 0x%02x\", buf.readerIndex() - 1, b2));\n                    }\n                } else {\n                    frame.writeByte(b1);\n                }\n            }\n            return frame;\n        }\n        return null;\n    }\n"}
{"bug_id": "jhy-jsoup-9e5869b6e1e2", "buggy_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())); \n            if (couldSkip && isBlank) return;\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n", "fixed_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())); \n            if (couldSkip && isBlank) return;\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n"}
{"bug_id": "traccar-traccar-046076aeb6f0", "buggy_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type)) {\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(\"driverLicense\", data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n", "fixed_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(\"driverLicense\", data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n"}
{"bug_id": "stellar-java-stellar-sdk-15cc6d2c8131", "buggy_code": "  @Override\n  public boolean equals(Object object) {\n    if (!(object instanceof KeyPair)) {\n      return false;\n    }\n    KeyPair other = (KeyPair) object;\n    return this.mPrivateKey.equals(other.mPrivateKey) &&\n            this.mPublicKey.equals(other.mPublicKey);\n  }\n", "fixed_code": "  @Override\n  public boolean equals(Object object) {\n    if (!(object instanceof KeyPair)) {\n      return false;\n    }\n    KeyPair other = (KeyPair) object;\n    return Objects.equal(this.mPrivateKey, other.mPrivateKey) &&\n            this.mPublicKey.equals(other.mPublicKey);\n  }\n"}
{"bug_id": "jhy-jsoup-9bb07d2ab43c", "buggy_code": "    protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode == this);\n        Validate.notNull(in);\n        if (in.parentNode != null)\n            in.parentNode.removeChild(in);\n        final int index = out.siblingIndex;\n        ensureChildNodes().set(index, in);\n        in.parentNode = this;\n        in.setSiblingIndex(index);\n        out.parentNode = null;\n    }\n", "fixed_code": "    protected void replaceChild(Node out, Node in) {\n        Validate.isTrue(out.parentNode == this);\n        Validate.notNull(in);\n        if (out == in) return; \n        if (in.parentNode != null)\n            in.parentNode.removeChild(in);\n        final int index = out.siblingIndex;\n        ensureChildNodes().set(index, in);\n        in.parentNode = this;\n        in.setSiblingIndex(index);\n        out.parentNode = null;\n    }\n"}
{"bug_id": "jhy-jsoup-29be991198d3", "buggy_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n            Node next = this.nextSibling();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())); \n            if (couldSkip && isBlank()) return;\n            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank()))\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n", "fixed_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        boolean trimLeading = false;\n        boolean trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||\n                parentNode instanceof Document;\n            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())); \n            if (couldSkip && isBlank) return;\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n"}
{"bug_id": "LMAX-Exchange-Simple-DSL-81182e58bd80", "buggy_code": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n            processor.consume(groupArg.getIdentity(), arguments);\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    break;\n                }\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n                checkValidValue(arg, argument.value);\n                argValues.add(argument.value);\n                arguments.pollFirst();\n            }\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n", "fixed_code": "        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)\n        {\n            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();\n            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, \"Did not supply a value for %s in group \" + groupArg.getName());\n            processor.consume(groupArg.getIdentity(), arguments);\n            final Map<String, SimpleDslArg> argsByName = new HashMap<>();\n            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());\n            for (SimpleDslArg dslArg : groupArg.getOtherArgs())\n            {\n                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)\n                {\n                    throw new IllegalArgumentException(\"Duplicate parameter '\" + dslArg.getName() + \"' in group \" + groupArg.getName());\n                }\n            }\n            while (!arguments.isEmpty())\n            {\n                final NameValuePair argument = arguments.peekFirst();\n                if (argument == NameValuePair.NULL)\n                {\n                    arguments.pollFirst();\n                    continue;\n                }\n                if (argument.name == null)\n                {\n                    throw new IllegalArgumentException(\"Unexpected ambiguous argument \" + argument.originalValue);\n                }\n                final DslArg arg = argsByName.get(argument.name.toLowerCase());\n                if (arg == null)\n                {\n                    break;\n                }\n                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());\n                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())\n                {\n                    break;\n                }\n                SimpleArgumentProcessor.addValue(arg, argument.value, argValues);\n                arguments.pollFirst();\n            }\n            final Map<String, List<String>> valuesByName = new HashMap<>();\n            for (final SimpleDslArg simpleDslArg : argsByName.values())\n            {\n                final SimpleDslParam param = processor.collect(simpleDslArg);\n                if (param.hasValue())\n                {\n                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());\n                }\n            }\n            final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];\n            dslArgs[0] = groupArg.getIdentity();\n            System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);\n            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));\n        }\n"}
{"bug_id": "jhy-jsoup-111919256590", "buggy_code": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false;\n        return (parent() == null || parent().isBlock())\n            && !isEffectivelyFirst()\n            && !out.outline();\n    }\n", "fixed_code": "    private boolean isInlineable(Document.OutputSettings out) {\n        if (!tag.isInline())\n            return false;\n        return (parent() == null || parent().isBlock())\n            && !isEffectivelyFirst()\n            && !out.outline()\n            && !isNode(\"br\");\n    }\n"}
{"bug_id": "traccar-traccar-94fbc93f8b0a", "buggy_code": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            switch (key) {\n                case \"SA\":\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case \"MV\":\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"BV\":\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"GQ\":\n                    cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    break;\n                case \"CE\":\n                    cellTower.setCellId(buf.readUnsignedInt());\n                    break;\n                case \"LC\":\n                    cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    break;\n                case \"CN\":\n                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); \n                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    break;\n                case \"RL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"PC\":\n                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    break;\n                case \"AT\":\n                    position.setAltitude(buf.readUnsignedInt());\n                    break;\n                case \"RP\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    break;\n                case \"GS\":\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case \"DT\":\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    break;\n                case \"VN\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"EL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"TR\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case \"ET\":\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    break;\n                case \"FL\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case \"ML\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"FC\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case \"CI\":\n                    readString(buf); \n                    break;\n                case \"AV1\":\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    break;\n                case \"NC\":\n                    readString(buf); \n                    break;\n                case \"SM\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"GL\":\n                    readString(buf); \n                    break;\n                case \"MA\":\n                    readString(buf); \n                    break;\n                case \"PD\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    buf.readLong(); \n                    break;\n                case \"GN\":\n                    buf.skipBytes(60); \n                    break;\n                case \"GV\":\n                    buf.skipBytes(6); \n                    break;\n                case \"ME\":\n                    buf.readLong(); \n                    break;\n                case \"IA\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"MP\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"EO\":\n                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    break;\n                case \"EH\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);\n                    break;\n                case \"ZO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO4\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"ZO5\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO6\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    break;\n                case \"ZO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO9\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO10\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO11\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO13\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO14\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());\n                    break;\n                case \"ZO15\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO16\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO17\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZH1\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"ZH2\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                    break;\n                case \"ZH3\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                    break;\n                case \"ZL1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL2\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);\n                    break;\n                case \"ZL3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL4\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"ZS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO4\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    break;\n                case \"JO5\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"JO6\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO9\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO10\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO11\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    break;\n                case \"JO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JH1\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                    break;\n                case \"JH2\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    int index = Integer.parseInt(key.substring(2)) - 2;\n                    position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    break;\n                case \"JH8\":\n                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);\n                    break;\n                case \"JH9\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH10\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH11\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                    break;\n                case \"JH12\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JL1\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                    break;\n                case \"JL2\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"JL3\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n                    break;\n                case \"JL4\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                    break;\n                case \"JS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                    readString(buf); \n                    break;\n                case \"JS3\":\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN2\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN4\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN5\":\n                    buf.readUnsignedInt(); \n                    break;\n                default:\n                    break;\n            }\n        }\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }\n", "fixed_code": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            switch (key) {\n                case \"SA\":\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case \"MV\":\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"BV\":\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"GQ\":\n                    cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    break;\n                case \"CE\":\n                    cellTower.setCellId(buf.readUnsignedInt());\n                    break;\n                case \"LC\":\n                    cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    break;\n                case \"CN\":\n                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); \n                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    break;\n                case \"RL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"PC\":\n                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    break;\n                case \"AT\":\n                    position.setAltitude(buf.readUnsignedInt());\n                    break;\n                case \"RP\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    break;\n                case \"GS\":\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case \"DT\":\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    break;\n                case \"VN\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"EL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"TR\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case \"ET\":\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    break;\n                case \"FL\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case \"ML\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"FC\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case \"CI\":\n                    readString(buf); \n                    break;\n                case \"AV1\":\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    break;\n                case \"NC\":\n                    readString(buf); \n                    break;\n                case \"SM\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"GL\":\n                    readString(buf); \n                    break;\n                case \"MA\":\n                    readString(buf); \n                    break;\n                case \"PD\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    buf.readLong(); \n                    break;\n                case \"GN\":\n                    buf.skipBytes(60); \n                    break;\n                case \"GV\":\n                    buf.skipBytes(6); \n                    break;\n                case \"ME\":\n                    buf.readLong(); \n                    break;\n                case \"IA\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"MP\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"EO\":\n                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    break;\n                case \"EH\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);\n                    break;\n                case \"ZO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO4\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"ZO5\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO6\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    break;\n                case \"ZO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO9\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO10\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO11\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO13\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO14\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());\n                    break;\n                case \"ZO15\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO16\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO17\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZH1\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"ZH2\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                    break;\n                case \"ZH3\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                    break;\n                case \"ZL1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL2\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);\n                    break;\n                case \"ZL3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL4\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"ZS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO4\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    break;\n                case \"JO5\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"JO6\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO9\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO10\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO11\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    break;\n                case \"JO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JH1\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                    break;\n                case \"JH2\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    int index = Integer.parseInt(key.substring(2)) - 2;\n                    position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    break;\n                case \"JH8\":\n                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);\n                    break;\n                case \"JH9\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH10\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH11\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                    break;\n                case \"JH12\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JL1\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                    break;\n                case \"JL2\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"JL3\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n                    break;\n                case \"JL4\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                    break;\n                case \"JS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                    readString(buf); \n                    break;\n                case \"JS3\":\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN2\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN4\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN5\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"IN0\":\n                    position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                    break;\n                case \"IN1\":\n                case \"IN2\":\n                case \"IN3\":\n                    position.set(Position.PREFIX_IN + key.charAt(2), buf.readUnsignedByte() > 0);\n                    break;\n                case \"HA\":\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_ACCELERATION : null);\n                    break;\n                case \"HB\":\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_BRAKING : null);\n                    break;\n                case \"HC\":\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_CORNERING : null);\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }\n"}
{"bug_id": "traccar-traccar-553527d9fbe6", "buggy_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-d244b4bc4999", "buggy_code": "    public String getString(String key, String defaultValue) {\n        if (attributes.containsKey(key)) {\n            Object value = attributes.containsKey(key);\n            return value != null ? value.toString() : null;\n        } else {\n            return defaultValue;\n        }\n    }\n", "fixed_code": "    public String getString(String key, String defaultValue) {\n        if (attributes.containsKey(key)) {\n            Object value = attributes.get(key);\n            return value != null ? value.toString() : null;\n        } else {\n            return defaultValue;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-4722f9b6b648", "buggy_code": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        buf.readUnsignedShortLE(); \n        buf.skipBytes(3); \n        buf.readUnsignedIntLE(); \n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        buf.readUnsignedByte(); \n        buf.skipBytes(4); \n        buf.readUnsignedIntLE(); \n        buf.skipBytes(23); \n        buf.skipBytes(3); \n        decodeMinimalDataSet(position, buf);\n        return position;\n    }\n", "fixed_code": "    private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        buf.readUnsignedShort(); \n        buf.skipBytes(3); \n        buf.readUnsignedInt(); \n        DeviceSession deviceSession = getDeviceSession(\n                channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        buf.readUnsignedByte(); \n        buf.skipBytes(4); \n        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n        buf.skipBytes(3); \n        int flags = buf.readUnsignedByte();\n        double latitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n        double longitude = buf.readUnsignedByte() + buf.readUnsignedShort() / 60000.0;\n        position.setLatitude(BitUtil.check(flags, 1) ? -latitude : latitude);\n        position.setLongitude(BitUtil.check(flags, 0) ? -longitude : longitude);\n        buf.readUnsignedInt(); \n        buf.readUnsignedByte(); \n        return position;\n    }\n"}
{"bug_id": "jhy-jsoup-d126488db626", "buggy_code": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\"))\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\"))\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators))\n                if (sq.length() > 0)\n                    break;\n                else\n                    tq.consume();\n            else\n                sq.append(tq.consume());\n        }\n        return StringUtil.releaseBuilder(sq);\n    }\n", "fixed_code": "    private String consumeSubQuery() {\n        StringBuilder sq = StringUtil.borrowBuilder();\n        boolean seenNonCombinator = false; \n        while (!tq.isEmpty()) {\n            if (tq.matches(\"(\"))\n                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n            else if (tq.matches(\"[\"))\n                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n            else if (tq.matchesAny(Combinators))\n                if (seenNonCombinator)\n                    break;\n                else\n                    sq.append(tq.consume());\n            else {\n                seenNonCombinator = true;\n                sq.append(tq.consume());\n            }\n        }\n        return StringUtil.releaseBuilder(sq);\n    }\n"}
{"bug_id": "traccar-traccar-6f59f756a7d3", "buggy_code": "    private Position decodePosition(\n            Channel channel, DeviceSession deviceSession, ByteBuf buf, int type, int index, ByteBuf imei) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n        if (header != 0x2727) {\n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            position.set(Position.KEY_RSSI, BitUtil.to(buf.readUnsignedShort(), 7));\n        }\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_SATELLITES, BitUtil.to(status, 5));\n        if (header != 0x2727) {\n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            int io = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(io, 14));\n            position.set(\"ac\", BitUtil.check(io, 13));\n            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 12));\n            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 11));\n            if (type == MSG_GPS_2 || type == MSG_ALARM_2) {\n                position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                buf.readUnsignedByte(); \n            } else {\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 7));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 8));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 9));\n            }\n            if (header != 0x2626) {\n                int adcCount = type == MSG_GPS_2 || type == MSG_ALARM_2 ? 5 : 2;\n                for (int i = 1; i <= adcCount; i++) {\n                    String value = ByteBufUtil.hexDump(buf.readSlice(2));\n                    if (!value.equals(\"ffff\")) {\n                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value) * 0.01);\n                    }\n                }\n            }\n        }\n        int alarm = buf.readUnsignedByte();\n        position.set(Position.KEY_ALARM, header != 0x2727 ? decodeAlarm1(alarm) : decodeAlarm2(alarm));\n        position.set(\"alarmCode\", alarm);\n        if (header != 0x2727) {\n            buf.readUnsignedByte(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n        }\n        if (BitUtil.check(status, 6)) {\n            position.setValid(true);\n            position.setTime(readDate(buf));\n            position.setAltitude(buf.readFloatLE());\n            position.setLongitude(buf.readFloatLE());\n            position.setLatitude(buf.readFloatLE());\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4) * 0.1));\n            position.setCourse(buf.readUnsignedShort());\n        } else {\n            getLastLocation(position, readDate(buf));\n            int mcc = buf.readUnsignedShortLE();\n            int mnc = buf.readUnsignedShortLE();\n            if (mcc != 0xffff && mnc != 0xffff) {\n                Network network = new Network();\n                for (int i = 0; i < 3; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE()));\n                }\n                position.setNetwork(network);\n            }\n        }\n        if (header == 0x2727) {\n            byte[] accelerationBytes = new byte[5];\n            buf.readBytes(accelerationBytes);\n            long acceleration = new BigInteger(accelerationBytes).longValue();\n            double accelerationZ = BitUtil.between(acceleration, 8, 15) + BitUtil.between(acceleration, 4, 8) * 0.1;\n            if (!BitUtil.check(acceleration, 15)) {\n                accelerationZ = -accelerationZ;\n            }\n            double accelerationY = BitUtil.between(acceleration, 20, 27) + BitUtil.between(acceleration, 16, 20) * 0.1;\n            if (!BitUtil.check(acceleration, 27)) {\n                accelerationY = -accelerationY;\n            }\n            double accelerationX = BitUtil.between(acceleration, 28, 32) + BitUtil.between(acceleration, 32, 39) * 0.1;\n            if (!BitUtil.check(acceleration, 39)) {\n                accelerationX = -accelerationX;\n            }\n            position.set(Position.KEY_G_SENSOR, \"[\" + accelerationX + \",\" + accelerationY + \",\" + accelerationZ + \"]\");\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n            position.set(Position.KEY_DEVICE_TEMP, (int) buf.readByte());\n            position.set(\"lightSensor\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_BATTERY, BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(\"solarPanel\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            int inputStatus = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(inputStatus, 2));\n            position.set(Position.KEY_RSSI, BitUtil.between(inputStatus, 4, 11));\n            position.set(Position.KEY_INPUT, inputStatus);\n            buf.readUnsignedShort(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n        } else {\n            if (buf.readableBytes() >= 2) {\n                position.set(Position.KEY_POWER, BcdUtil.readInteger(buf, 4) * 0.01);\n            }\n            if (buf.readableBytes() >= 19) {\n                position.set(Position.KEY_OBD_SPEED, BcdUtil.readInteger(buf, 4) * 0.01);\n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt() * 0.001);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                int value;\n                value = buf.readUnsignedByte();\n                if (value != 0xff) {\n                    position.set(\"airInput\", value);\n                }\n                if (value != 0xff) {\n                    position.set(\"airPressure\", value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_COOLANT_TEMP, value - 40);\n                }\n                if (value != 0xff) {\n                    position.set(\"airTemp\", value - 40);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_ENGINE_LOAD, value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_THROTTLE, value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_FUEL_LEVEL, value);\n                }\n            }\n        }\n        boolean acknowledgement = AttributeUtil.lookup(\n                getCacheManager(), Keys.PROTOCOL_ACK.withPrefix(getProtocolName()), deviceSession.getDeviceId());\n        if (acknowledgement || type == MSG_ALARM || type == MSG_ALARM_2) {\n            sendResponse(channel, header, type, index, imei, alarm);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodePosition(\n            Channel channel, DeviceSession deviceSession, ByteBuf buf, int type, int index, ByteBuf imei) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n        if (header != 0x2727) {\n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            position.set(Position.KEY_RSSI, BitUtil.to(buf.readUnsignedShort(), 7));\n        }\n        int status = buf.readUnsignedByte();\n        position.set(Position.KEY_SATELLITES, BitUtil.to(status, 5));\n        if (header != 0x2727) {\n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            int io = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(io, 14));\n            position.set(\"ac\", BitUtil.check(io, 13));\n            position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 12));\n            position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 11));\n            if (type == MSG_GPS_2 || type == MSG_ALARM_2) {\n                position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                buf.readUnsignedByte(); \n            } else {\n                position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 7));\n                position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 8));\n                position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 9));\n            }\n            if (header != 0x2626) {\n                int adcCount = type == MSG_GPS_2 || type == MSG_ALARM_2 ? 5 : 2;\n                for (int i = 1; i <= adcCount; i++) {\n                    String value = ByteBufUtil.hexDump(buf.readSlice(2));\n                    if (!value.equals(\"ffff\")) {\n                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value, 16) * 0.01);\n                    }\n                }\n            }\n        }\n        int alarm = buf.readUnsignedByte();\n        position.set(Position.KEY_ALARM, header != 0x2727 ? decodeAlarm1(alarm) : decodeAlarm2(alarm));\n        position.set(\"alarmCode\", alarm);\n        if (header != 0x2727) {\n            buf.readUnsignedByte(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n        }\n        if (BitUtil.check(status, 6)) {\n            position.setValid(true);\n            position.setTime(readDate(buf));\n            position.setAltitude(buf.readFloatLE());\n            position.setLongitude(buf.readFloatLE());\n            position.setLatitude(buf.readFloatLE());\n            position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4) * 0.1));\n            position.setCourse(buf.readUnsignedShort());\n        } else {\n            getLastLocation(position, readDate(buf));\n            int mcc = buf.readUnsignedShortLE();\n            int mnc = buf.readUnsignedShortLE();\n            if (mcc != 0xffff && mnc != 0xffff) {\n                Network network = new Network();\n                for (int i = 0; i < 3; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE()));\n                }\n                position.setNetwork(network);\n            }\n        }\n        if (header == 0x2727) {\n            byte[] accelerationBytes = new byte[5];\n            buf.readBytes(accelerationBytes);\n            long acceleration = new BigInteger(accelerationBytes).longValue();\n            double accelerationZ = BitUtil.between(acceleration, 8, 15) + BitUtil.between(acceleration, 4, 8) * 0.1;\n            if (!BitUtil.check(acceleration, 15)) {\n                accelerationZ = -accelerationZ;\n            }\n            double accelerationY = BitUtil.between(acceleration, 20, 27) + BitUtil.between(acceleration, 16, 20) * 0.1;\n            if (!BitUtil.check(acceleration, 27)) {\n                accelerationY = -accelerationY;\n            }\n            double accelerationX = BitUtil.between(acceleration, 28, 32) + BitUtil.between(acceleration, 32, 39) * 0.1;\n            if (!BitUtil.check(acceleration, 39)) {\n                accelerationX = -accelerationX;\n            }\n            position.set(Position.KEY_G_SENSOR, \"[\" + accelerationX + \",\" + accelerationY + \",\" + accelerationZ + \"]\");\n            int battery = BcdUtil.readInteger(buf, 2);\n            position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);\n            position.set(Position.KEY_DEVICE_TEMP, (int) buf.readByte());\n            position.set(\"lightSensor\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_BATTERY, BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(\"solarPanel\", BcdUtil.readInteger(buf, 2) * 0.1);\n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            int inputStatus = buf.readUnsignedShort();\n            position.set(Position.KEY_IGNITION, BitUtil.check(inputStatus, 2));\n            position.set(Position.KEY_RSSI, BitUtil.between(inputStatus, 4, 11));\n            position.set(Position.KEY_INPUT, inputStatus);\n            buf.readUnsignedShort(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n        } else {\n            if (buf.readableBytes() >= 2) {\n                position.set(Position.KEY_POWER, BcdUtil.readInteger(buf, 4) * 0.01);\n            }\n            if (buf.readableBytes() >= 19) {\n                position.set(Position.KEY_OBD_SPEED, BcdUtil.readInteger(buf, 4) * 0.01);\n                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt() * 0.001);\n                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                int value;\n                value = buf.readUnsignedByte();\n                if (value != 0xff) {\n                    position.set(\"airInput\", value);\n                }\n                if (value != 0xff) {\n                    position.set(\"airPressure\", value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_COOLANT_TEMP, value - 40);\n                }\n                if (value != 0xff) {\n                    position.set(\"airTemp\", value - 40);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_ENGINE_LOAD, value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_THROTTLE, value);\n                }\n                if (value != 0xff) {\n                    position.set(Position.KEY_FUEL_LEVEL, value);\n                }\n            }\n        }\n        boolean acknowledgement = AttributeUtil.lookup(\n                getCacheManager(), Keys.PROTOCOL_ACK.withPrefix(getProtocolName()), deviceSession.getDeviceId());\n        if (acknowledgement || type == MSG_ALARM || type == MSG_ALARM_2) {\n            sendResponse(channel, header, type, index, imei, alarm);\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-105873ab5256", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf.slice());\n        }\n        if (type == MSG_DATA || type == MSG_SERVICES) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); \n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf.slice());\n        }\n        if (type == MSG_DATA || type == MSG_SERVICES) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        if (deviceSession == null) {\n                            return null;\n                        }\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); \n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        } else if (type == MSG_RESPONSE) {\n            DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-1b8993293646", "buggy_code": "    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        String imei = parser.next();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String index = parser.next();\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n        position.setDeviceTime(parser.nextDateTime());\n        Network network = new Network();\n        network.addCellTower(CellTower.from(\n                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n        position.set(Position.KEY_BATTERY, parser.nextDouble());\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n        if (parser.hasNext(5)) {\n            position.setValid(parser.next().equals(\"A\"));\n            position.setFixTime(position.getDeviceTime());\n            position.set(Position.KEY_SATELLITES, parser.nextInt());\n            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n            position.setLatitude(parser.nextDouble());\n            position.setLongitude(parser.nextDouble());\n        } else {\n            String[] points = parser.next().split(\"\\\\|\");\n            for (String point : points) {\n                String[] wifi = point.split(\":\");\n                String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n            }\n        }\n        position.setNetwork(network);\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n        return position;\n    }\n", "fixed_code": "    private Object decodeLocationNew(\n            Channel channel, SocketAddress remoteAddress, String sentence) {\n        Parser parser = new Parser(PATTERN_NEW, sentence);\n        if (!parser.matches()) {\n            return null;\n        }\n        String imei = parser.next();\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        String index = parser.next();\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));\n        position.setDeviceTime(parser.nextDateTime());\n        Network network = new Network();\n        network.addCellTower(CellTower.from(\n                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));\n        position.set(Position.KEY_BATTERY, parser.nextDouble());\n        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n        if (parser.hasNext(5)) {\n            position.setValid(parser.next().equals(\"A\"));\n            position.setFixTime(position.getDeviceTime());\n            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n            position.set(Position.KEY_SATELLITES, parser.nextInt());\n            position.setLatitude(parser.nextDouble());\n            position.setLongitude(parser.nextDouble());\n        } else {\n            String[] points = parser.next().split(\"\\\\|\");\n            for (String point : points) {\n                String[] wifi = point.split(\":\");\n                String mac = wifi[0].replaceAll(\"(..)\", \"$1:\");\n                network.addWifiAccessPoint(WifiAccessPoint.from(\n                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));\n            }\n        }\n        position.setNetwork(network);\n        DateFormat dateFormat = new SimpleDateFormat(\"yyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        String response = index + \",A03,\" + dateFormat.format(new Date());\n        sendResponse(channel, remoteAddress, imei, response);\n        return position;\n    }\n"}
{"bug_id": "revelc-formatter-maven-plugin-3e9843d2ab99", "buggy_code": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        var formattedCode = sheet.getCssText(this.formatter);\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n", "fixed_code": "    @Override\n    protected String doFormat(final String code, final LineEnding ending) throws IOException {\n        final var source = new InputSource(new StringReader(code));\n        final var parser = new CSSOMParser(new SACParserCSS3());\n        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);\n        var formattedCode = sheet.getCssText(this.formatter);\n        formattedCode = formattedCode.replace(\"\\t;\", \"\\\\9;\");\n        String[] lines = formattedCode.split(ending.getChars());\n        if (!lines[lines.length - 1].equals(ending.getChars())) {\n            formattedCode = formattedCode + ending.getChars();\n        }\n        if (code.equals(formattedCode)) {\n            return null;\n        }\n        return formattedCode;\n    }\n"}
{"bug_id": "traccar-traccar-3b6900a95342", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n        if (type == MSG_DATA) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); \n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n        if (type == MSG_DATA || type == MSG_SERVICES) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        if (BitUtil.check(status, 4)) {\n                            position.set(Position.KEY_CHARGE, true);\n                        }\n                        if (BitUtil.check(status, 7)) {\n                            position.set(Position.KEY_ARCHIVE, true);\n                        }\n                        position.set(Position.KEY_MOTION, BitUtil.check(status, 9));\n                        position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); \n                        long barking = buf.readUnsignedIntLE();\n                        if (BitUtil.check(barking, 31)) {\n                            position.set(\"barkStop\", true);\n                        }\n                        position.set(\"barkCount\", BitUtil.to(barking, 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-d4efbfa2a7d9", "buggy_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (sentence.startsWith(\"*M00\")) {\n                        String lockStatus = sentence.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        position.set(\n                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();\n                    position.set(\"driverLicense\", license);\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driverLicense\", stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n"}
{"bug_id": "retel-io-ari-proxy-610e9b6725e1", "buggy_code": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n    if (!ariCommand.extractCommandType().isCreationCommand()) {\n      return Try.success(Done.done());\n    }\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n    final AriResource resource = maybeResource.get();\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }\n", "fixed_code": "  public static Try<Done> registerCallContext(\n      final ActorRef<CallContextProviderMessage> callContextProvider,\n      final String callContext,\n      final AriCommand ariCommand) {\n    if (!(ariCommand.extractCommandType().isCreationCommand()\n        && \"POST\".equals(ariCommand.getMethod()))) {\n      return Try.success(Done.done());\n    }\n    final Option<AriResource> maybeResource =\n        ariCommand\n            .extractResourceRelations()\n            .find(AriResourceRelation::isCreated)\n            .map(AriResourceRelation::getResource);\n    if (maybeResource.isEmpty()) {\n      return Try.failure(\n          new RuntimeException(\n              String.format(\n                  \"Failed to extract resourceId from command '%s'\", ariCommand.toString())));\n    }\n    final AriResource resource = maybeResource.get();\n    callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));\n    return Try.success(Done.done());\n  }\n"}
{"bug_id": "spring-projects-spring-retry-e6091f790c64", "buggy_code": "\tpublic BackOffPolicy build() {\n\t\tif (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n\t\t\tExponentialBackOffPolicy policy;\n\t\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\t\tpolicy = new ExponentialRandomBackOffPolicy();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpolicy = new ExponentialBackOffPolicy();\n\t\t\t}\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t}\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tif (this.multiplier != null) {\n\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t}\n\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t}\n\t\t\tif (this.maxDelay != null && this.delay != null) {\n\t\t\t\tpolicy.setMaxInterval(\n\t\t\t\t\t\tthis.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n\t\t\t}\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t}\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tif (this.maxDelay != null) {\n\t\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t\t}\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\t\tif (this.delay != null) {\n\t\t\tpolicy.setBackOffPeriod(this.delay);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}\n", "fixed_code": "\tpublic BackOffPolicy build() {\n\t\tif (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {\n\t\t\tExponentialBackOffPolicy policy;\n\t\t\tif (Boolean.TRUE.equals(this.random)) {\n\t\t\t\tpolicy = new ExponentialRandomBackOffPolicy();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpolicy = new ExponentialBackOffPolicy();\n\t\t\t}\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setInitialInterval(this.delay);\n\t\t\t}\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.initialIntervalSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tif (this.multiplier != null) {\n\t\t\t\tpolicy.setMultiplier(this.multiplier);\n\t\t\t}\n\t\t\tif (this.multiplierSupplier != null) {\n\t\t\t\tpolicy.multiplierSupplier(this.multiplierSupplier);\n\t\t\t}\n\t\t\tif (this.maxDelay != null && this.delay != null) {\n\t\t\t\tpolicy.setMaxInterval(\n\t\t\t\t\t\tthis.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);\n\t\t\t}\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxIntervalSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\tif (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {\n\t\t\tUniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();\n\t\t\tif (this.delay != null) {\n\t\t\t\tpolicy.setMinBackOffPeriod(this.delay);\n\t\t\t}\n\t\t\tif (this.delaySupplier != null) {\n\t\t\t\tpolicy.minBackOffPeriodSupplier(this.delaySupplier);\n\t\t\t}\n\t\t\tif (this.maxDelay != null) {\n\t\t\t\tpolicy.setMaxBackOffPeriod(this.maxDelay);\n\t\t\t}\n\t\t\tif (this.maxDelaySupplier != null) {\n\t\t\t\tpolicy.maxBackOffPeriodSupplier(this.maxDelaySupplier);\n\t\t\t}\n\t\t\tif (this.sleeper != null) {\n\t\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t\t}\n\t\t\treturn policy;\n\t\t}\n\t\tFixedBackOffPolicy policy = new FixedBackOffPolicy();\n\t\tif (this.delaySupplier != null) {\n\t\t\tpolicy.backOffPeriodSupplier(this.delaySupplier);\n\t\t}\n\t\telse if (this.delay != null) {\n\t\t\tpolicy.setBackOffPeriod(this.delay);\n\t\t}\n\t\tif (this.sleeper != null) {\n\t\t\tpolicy.setSleeper(this.sleeper);\n\t\t}\n\t\treturn policy;\n\t}\n"}
{"bug_id": "jhy-jsoup-1e69577e358c", "buggy_code": "    URL build() {\n        try {\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), \n                u.getPort(),\n                decodePart(u.getPath()),\n                null, null \n            );\n            String normUrl = uri.toASCIIString();\n            if (q != null || u.getRef() != null) {\n                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);\n                if (q != null) {\n                    sb.append('?');\n                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);\n                }\n                if (u.getRef() != null) {\n                    sb.append('#');\n                    appendToAscii(u.getRef(), false, sb);\n                }\n                normUrl = StringUtil.releaseBuilder(sb);\n            }\n            u =  new URL(normUrl);\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n", "fixed_code": "    URL build() {\n        try {\n            URI uri = new URI(\n                u.getProtocol(),\n                u.getUserInfo(),\n                IDN.toASCII(decodePart(u.getHost())), \n                u.getPort(),\n                null, null, null \n            );\n            StringBuilder normUrl = StringUtil.borrowBuilder().append(uri.toASCIIString());\n            appendToAscii(u.getPath(), false, normUrl);\n            if (q != null) {\n                normUrl.append('?');\n                appendToAscii(StringUtil.releaseBuilder(q), true, normUrl);\n            }\n            if (u.getRef() != null) {\n                normUrl.append('#');\n                appendToAscii(u.getRef(), false, normUrl);\n            }\n            u = new URL(StringUtil.releaseBuilder(normUrl));\n            return u;\n        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {\n            assert Validate.assertFail(e.toString());\n            return u;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-b77131f4be38", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.skipBytes(1); \n        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); \n        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.skipBytes(1); \n        String index = null;\n        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'\n                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();\n            hasIndex = true;\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); \n        }\n        buf.skipBytes(4); \n        buf.skipBytes(1); \n        buf.writerIndex(buf.writerIndex() - 1); \n        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (contentIndex < 0) {\n            contentIndex = buf.writerIndex();\n        }\n        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        if (contentIndex < buf.writerIndex()) {\n            buf.readerIndex(contentIndex + 1);\n        }\n        if (type.equals(\"INIT\")) {\n            sendResponse(channel, id, index, \"INIT,1\");\n        } else if (type.equals(\"LK\")) {\n            sendResponse(channel, id, index, \"LK\");\n            if (buf.isReadable()) {\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                if (values.length >= 3) {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                    return position;\n                }\n            }\n        } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n            if (type.startsWith(\"AL\")) {\n                if (position != null) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n                sendResponse(channel, id, index, \"AL\");\n            }\n            return position;\n        } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n            sendResponse(channel, id, index, type);\n        } else if (type.equalsIgnoreCase(\"PULSE\")\n                || type.equalsIgnoreCase(\"HEART\")\n                || type.equalsIgnoreCase(\"BLOOD\")\n                || type.equalsIgnoreCase(\"BPHRT\")\n                || type.equalsIgnoreCase(\"btemp2\")) {\n            if (buf.isReadable()) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, new Date());\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                int valueIndex = 0;\n                if (type.equalsIgnoreCase(\"btemp2\")) {\n                    if (Integer.parseInt(values[valueIndex++]) > 0) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                    }\n                } else {\n                    if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                        position.set(\"pressureHigh\", values[valueIndex++]);\n                        position.set(\"pressureLow\", values[valueIndex++]);\n                    }\n                    if (valueIndex <= values.length - 1) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                    }\n                }\n                return position;\n            }\n        } else if (type.equals(\"img\")) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n            buf.readerIndex(timeIndex + 12 + 2);\n            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n            return position;\n        } else if (type.equals(\"JXTK\")) {\n            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n            String[] values = buf.readCharSequence(\n                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n            int current = Integer.parseInt(values[2]);\n            int total = Integer.parseInt(values[3]);\n            if (audio == null) {\n                audio = Unpooled.buffer();\n            }\n            audio.writeBytes(buf);\n            sendResponse(channel, id, index, \"JXTKR,1\");\n            if (current < total) {\n                return null;\n            } else {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n                audio.release();\n                audio = null;\n                return position;\n            }\n        } else if (type.equals(\"TK\")) {\n            if (buf.readableBytes() == 1) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.skipBytes(1); \n        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1); \n        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.skipBytes(1); \n        String index = null;\n        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');\n        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'\n                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches(\"\\\\p{XDigit}+\")) {\n            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();\n            hasIndex = true;\n            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);\n            buf.skipBytes(1); \n        }\n        buf.skipBytes(4); \n        buf.skipBytes(1); \n        buf.writerIndex(buf.writerIndex() - 1); \n        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n        if (contentIndex < 0) {\n            contentIndex = buf.writerIndex();\n        }\n        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);\n        if (contentIndex < buf.writerIndex()) {\n            buf.readerIndex(contentIndex + 1);\n        }\n        if (type.equals(\"INIT\")) {\n            sendResponse(channel, id, index, \"INIT,1\");\n        } else if (type.equals(\"LK\")) {\n            sendResponse(channel, id, index, \"LK\");\n            if (buf.isReadable()) {\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                if (values.length >= 3) {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));\n                    position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));\n                    return position;\n                }\n            }\n        } else if (type.startsWith(\"UD\") || type.startsWith(\"AL\") || type.startsWith(\"WT\")) {\n            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));\n            if (type.startsWith(\"AL\")) {\n                if (position != null && !position.hasAttribute(Position.KEY_ALARM)) {\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                }\n                sendResponse(channel, id, index, \"AL\");\n            }\n            return position;\n        } else if (type.equals(\"TKQ\") || type.equals(\"TKQ2\")) {\n            sendResponse(channel, id, index, type);\n        } else if (type.equalsIgnoreCase(\"PULSE\")\n                || type.equalsIgnoreCase(\"HEART\")\n                || type.equalsIgnoreCase(\"BLOOD\")\n                || type.equalsIgnoreCase(\"BPHRT\")\n                || type.equalsIgnoreCase(\"TEMP\")\n                || type.equalsIgnoreCase(\"btemp2\")) {\n            if (buf.isReadable()) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, new Date());\n                String[] values = buf.toString(StandardCharsets.US_ASCII).split(\",\");\n                int valueIndex = 0;\n                if (type.equalsIgnoreCase(\"TEMP\")) {\n                    position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                } else if (type.equalsIgnoreCase(\"btemp2\")) {\n                    if (Integer.parseInt(values[valueIndex++]) > 0) {\n                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));\n                    }\n                } else {\n                    if (type.equalsIgnoreCase(\"BPHRT\") || type.equalsIgnoreCase(\"BLOOD\")) {\n                        position.set(\"pressureHigh\", values[valueIndex++]);\n                        position.set(\"pressureLow\", values[valueIndex++]);\n                    }\n                    if (valueIndex <= values.length - 1) {\n                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));\n                    }\n                }\n                return position;\n            }\n        } else if (type.equals(\"img\")) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');\n            buf.readerIndex(timeIndex + 12 + 2);\n            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, \"jpg\"));\n            return position;\n        } else if (type.equals(\"JXTK\")) {\n            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;\n            String[] values = buf.readCharSequence(\n                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(\",\");\n            int current = Integer.parseInt(values[2]);\n            int total = Integer.parseInt(values[3]);\n            if (audio == null) {\n                audio = Unpooled.buffer();\n            }\n            audio.writeBytes(buf);\n            sendResponse(channel, id, index, \"JXTKR,1\");\n            if (current < total) {\n                return null;\n            } else {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                getLastLocation(position, null);\n                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, \"amr\"));\n                audio.release();\n                audio = null;\n                return position;\n            }\n        } else if (type.equals(\"TK\")) {\n            if (buf.readableBytes() == 1) {\n                return null;\n            }\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, \"amr\"));\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-6e5481ebb185", "buggy_code": "    private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n        int length = 0;\n        if (hasLength) {\n            length = buf.readUnsignedByte();\n            if (length == 0) {\n                boolean zeroedData = true;\n                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                    if (buf.getByte(i) != 0) {\n                        zeroedData = false;\n                        break;\n                    }\n                }\n                if (zeroedData) {\n                    buf.skipBytes(Math.min(buf.readableBytes(), 45));\n                }\n                return false;\n            }\n        }\n        int mcc = buf.readUnsignedShort();\n        int mnc;\n        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n            mnc = buf.readUnsignedShort();\n        } else {\n            mnc = buf.readUnsignedByte();\n        }\n        int lac;\n        if (type == MSG_LBS_ALARM) {\n            lac = buf.readInt();\n        } else {\n            lac = buf.readUnsignedShort();\n        }\n        long cid;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cid = buf.readLong();\n        } else if (type == MSG_GPS_LBS_6) {\n            cid = buf.readUnsignedInt();\n        } else {\n            cid = buf.readUnsignedMedium();\n        }\n        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n        if (length > 9) {\n            buf.skipBytes(length - 9);\n        }\n        return true;\n    }\n", "fixed_code": "    private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasLength) {\n        int length = 0;\n        if (hasLength) {\n            length = buf.readUnsignedByte();\n            if (length == 0) {\n                boolean zeroedData = true;\n                for (int i = buf.readerIndex() + 9; i < buf.readerIndex() + 45 && i < buf.writerIndex(); i++) {\n                    if (buf.getByte(i) != 0) {\n                        zeroedData = false;\n                        break;\n                    }\n                }\n                if (zeroedData) {\n                    buf.skipBytes(Math.min(buf.readableBytes(), 45));\n                }\n                return false;\n            }\n        }\n        int mcc = buf.readUnsignedShort();\n        int mnc;\n        if (BitUtil.check(mcc, 15) || type == MSG_GPS_LBS_6) {\n            mnc = buf.readUnsignedShort();\n        } else {\n            mnc = buf.readUnsignedByte();\n        }\n        int lac;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            lac = buf.readInt();\n        } else {\n            lac = buf.readUnsignedShort();\n        }\n        long cid;\n        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {\n            cid = buf.readLong();\n        } else if (type == MSG_GPS_LBS_6) {\n            cid = buf.readUnsignedInt();\n        } else {\n            cid = buf.readUnsignedMedium();\n        }\n        position.setNetwork(new Network(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid)));\n        if (length > 9) {\n            buf.skipBytes(length - 9);\n        }\n        return true;\n    }\n"}
{"bug_id": "traccar-traccar-413d9a49c41a", "buggy_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n", "fixed_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        buf.readUnsignedShort(); \n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0010:\n                    position.set(Position.KEY_ODOMETER, Double.parseDouble(\n                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString()) * 1000);\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-b3c6e22fc19c", "buggy_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                boolean hasLength = hasStatus(type)\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                decodeLbs(position, buf, type, hasLength);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                }\n            }\n            if (type == MSG_STATUS && variant == Variant.VXT01) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n", "fixed_code": "    private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        int length = buf.readUnsignedByte();\n        int dataLength = length - 5;\n        int type = buf.readUnsignedByte();\n        Position position = new Position(getProtocolName());\n        DeviceSession deviceSession = null;\n        if (type != MSG_LOGIN) {\n            deviceSession = getDeviceSession(channel, remoteAddress);\n            if (deviceSession == null) {\n                return null;\n            }\n            position.setDeviceId(deviceSession.getDeviceId());\n            if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n        }\n        if (type == MSG_LOGIN) {\n            String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);\n            buf.readUnsignedShort(); \n            deviceSession = getDeviceSession(channel, remoteAddress, imei);\n            if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n                deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n            }\n            if (dataLength > 10) {\n                int extensionBits = buf.readUnsignedShort();\n                int hours = (extensionBits >> 4) / 100;\n                int minutes = (extensionBits >> 4) % 100;\n                int offset = (hours * 60 + minutes) * 60;\n                if ((extensionBits & 0x8) != 0) {\n                    offset = -offset;\n                }\n                if (deviceSession != null) {\n                    TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);\n                    if (timeZone.getRawOffset() == 0) {\n                        timeZone.setRawOffset(offset * 1000);\n                        deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);\n                    }\n                }\n            }\n            if (deviceSession != null) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        } else if (type == MSG_HEARTBEAT) {\n            getLastLocation(position, null);\n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_ARMED, BitUtil.check(status, 0));\n            position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));\n            position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));\n            if (buf.readableBytes() >= 2 + 6) {\n                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            }\n            if (buf.readableBytes() >= 1 + 6) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_ADDRESS_REQUEST) {\n            String response = \"NA&&NA&&0##\";\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(response.length());\n            content.writeInt(0);\n            content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));\n            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);\n            return null;\n        } else if (type == MSG_TIME_REQUEST) {\n            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(calendar.get(Calendar.YEAR) - 2000);\n            content.writeByte(calendar.get(Calendar.MONTH) + 1);\n            content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));\n            content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));\n            content.writeByte(calendar.get(Calendar.MINUTE));\n            content.writeByte(calendar.get(Calendar.SECOND));\n            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);\n            return null;\n        } else if (type == MSG_X1_GPS) {\n            buf.readUnsignedInt(); \n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            buf.readUnsignedShort(); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            position.setNetwork(new Network(CellTower.from(\n                    buf.readUnsignedShort(), buf.readUnsignedByte(),\n                    buf.readUnsignedShort(), buf.readUnsignedInt())));\n            long driverId = buf.readUnsignedInt();\n            if (driverId > 0) {\n                position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));\n            }\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            long portInfo = buf.readUnsignedInt();\n            position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n            position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {\n                position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);\n            }\n            return position;\n        } else if (type == MSG_X1_PHOTO_INFO) {\n            buf.skipBytes(6); \n            buf.readUnsignedByte(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedInt(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            ByteBuf photo = Unpooled.buffer(buf.readInt());\n            int pictureId = buf.readInt();\n            photos.put(pictureId, photo);\n            sendPhotoRequest(channel, pictureId);\n            return null;\n        } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {\n            ByteBuf time = buf.readSlice(6);\n            DateBuilder dateBuilder = new DateBuilder()\n                    .setYear(BcdUtil.readInteger(time, 2))\n                    .setMonth(BcdUtil.readInteger(time, 2))\n                    .setDay(BcdUtil.readInteger(time, 2))\n                    .setHour(BcdUtil.readInteger(time, 2))\n                    .setMinute(BcdUtil.readInteger(time, 2))\n                    .setSecond(BcdUtil.readInteger(time, 2));\n            getLastLocation(position, dateBuilder.getDate());\n            Network network = new Network();\n            int wifiCount;\n            if (type == MSG_WIFI_4) {\n                wifiCount = buf.readUnsignedByte();\n            } else {\n                wifiCount = buf.getUnsignedByte(2);\n            }\n            for (int i = 0; i < wifiCount; i++) {\n                if (type == MSG_WIFI_4) {\n                    buf.skipBytes(2);\n                }\n                WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();\n                wifiAccessPoint.setMacAddress(String.format(\"%02x:%02x:%02x:%02x:%02x:%02x\",\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),\n                        buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));\n                if (type != MSG_WIFI_4) {\n                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());\n                }\n                network.addWifiAccessPoint(wifiAccessPoint);\n            }\n            if (type != MSG_WIFI_4) {\n                int cellCount = buf.readUnsignedByte();\n                int mcc = buf.readUnsignedShort();\n                int mnc = buf.readUnsignedByte();\n                for (int i = 0; i < cellCount; i++) {\n                    network.addCellTower(CellTower.from(\n                            mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));\n                }\n                if (channel != null) {\n                    ByteBuf response = Unpooled.buffer();\n                    response.writeShort(0x7878);\n                    response.writeByte(0);\n                    response.writeByte(type);\n                    response.writeBytes(time.resetReaderIndex());\n                    response.writeByte('\\r');\n                    response.writeByte('\\n');\n                    channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));\n                }\n            }\n            position.setNetwork(network);\n            return position;\n        } else if (type == MSG_INFO) {\n            getLastLocation(position, null);\n            position.set(Position.KEY_POWER, buf.readShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {\n            decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            decodeLbs(position, buf, type, false);\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n            return position;\n        } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3\n                || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2\n                || type == MSG_WIFI_3 || type == MSG_WIFI_5) {\n            boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            if (variant == Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            int mcc = buf.readUnsignedShort();\n            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();\n            Network network = new Network();\n            int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;\n            for (int i = 0; i < cellCount; i++) {\n                int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();\n                int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();\n                int rssi = -buf.readUnsignedByte();\n                if (lac > 0) {\n                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));\n                }\n            }\n            if (variant != Variant.WANWAY_S20) {\n                buf.readUnsignedByte(); \n            }\n            if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3\n                    && type != MSG_LBS_2) {\n                int wifiCount = buf.readUnsignedByte();\n                for (int i = 0; i < wifiCount; i++) {\n                    String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                    network.addWifiAccessPoint(WifiAccessPoint.from(\n                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));\n                }\n            }\n            position.setNetwork(network);\n        } else if (type == MSG_STRING) {\n            getLastLocation(position, null);\n            int commandLength = buf.readUnsignedByte();\n            if (commandLength > 0) {\n                buf.readUnsignedInt(); \n                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);\n                if (data.startsWith(\"<ICCID:\")) {\n                    position.set(Position.KEY_ICCID, data.substring(7, 27));\n                } else {\n                    position.set(Position.KEY_RESULT, data);\n                }\n            }\n        } else if (type == MSG_BMS) {\n            buf.skipBytes(8); \n            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));\n            position.set(\"relativeCapacity\", buf.readUnsignedByte());\n            position.set(\"remainingCapacity\", buf.readUnsignedShort());\n            position.set(\"absoluteCapacity\", buf.readUnsignedByte());\n            position.set(\"fullCapacity\", buf.readUnsignedShort());\n            position.set(\"batteryHealth\", buf.readUnsignedByte());\n            position.set(\"batteryTemp\", buf.readUnsignedShort() * 0.1 - 273.1);\n            position.set(\"current\", buf.readUnsignedShort());\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n            position.set(\"cycleIndex\", buf.readUnsignedShort());\n            for (int i = 1; i <= 14; i++) {\n                position.set(\"batteryCell\" + i, buf.readUnsignedShort() * 0.001);\n            }\n            position.set(\"currentChargeInterval\", buf.readUnsignedShort());\n            position.set(\"maxChargeInterval\", buf.readUnsignedShort());\n            position.set(\"barcode\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryVersion\", buf.readUnsignedShort());\n            position.set(\"manufacturer\", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());\n            position.set(\"batteryStatus\", buf.readUnsignedInt());\n            position.set(\"controllerStatus\", buf.readUnsignedInt());\n            position.set(\"controllerFault\", buf.readUnsignedInt());\n            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedByte(); \n            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedByte(); \n            buf.readUnsignedShort(); \n            buf.readUnsignedShort(); \n            int value = buf.readUnsignedShort();\n            double temperature = BitUtil.to(value, 15) * 0.1;\n            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);\n        } else if (isSupported(type)) {\n            if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {\n                return null; \n            }\n            if (hasGps(type)) {\n                decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                getLastLocation(position, null);\n            }\n            if (hasLbs(type) && buf.readableBytes() > 6) {\n                boolean hasLength = hasStatus(type)\n                        && type != MSG_LBS_STATUS\n                        && type != MSG_LBS_ALARM\n                        && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);\n                decodeLbs(position, buf, type, hasLength);\n            }\n            if (hasStatus(type)) {\n                decodeStatus(position, buf);\n                if (variant == Variant.OBD6) {\n                    int signal = buf.readUnsignedShort();\n                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);\n                    position.set(Position.KEY_SATELLITES, satellites);\n                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);\n                } else {\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    short alarmExtension = buf.readUnsignedByte();\n                    if (variant != Variant.VXT01) {\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarmExtension));\n                    }\n                }\n            }\n            if (type == MSG_STATUS && variant == Variant.VXT01) {\n                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            if (type == MSG_GPS_LBS_1) {\n                if (variant == Variant.GT06E_CARD) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_CARD, data.trim());\n                } else if (variant == Variant.BENWAY) {\n                    int mask = buf.readUnsignedShort();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));\n                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));\n                    if (BitUtil.check(mask, 8 + 4)) {\n                        int value = BitUtil.to(mask, 8 + 1);\n                        if (BitUtil.check(mask, 8 + 1)) {\n                            value = -value;\n                        }\n                        position.set(Position.PREFIX_TEMP + 1, value);\n                    } else {\n                        int value = BitUtil.to(mask, 8 + 2);\n                        if (BitUtil.check(mask, 8 + 5)) {\n                            position.set(Position.PREFIX_ADC + 1, value);\n                        } else {\n                            position.set(Position.PREFIX_ADC + 1, value * 0.1);\n                        }\n                    }\n                } else if (variant == Variant.VXT01) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    buf.readUnsignedByte(); \n                } else if (variant == Variant.S5) {\n                    decodeStatus(position, buf);\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));\n                    position.set(\"oil\", buf.readUnsignedShort());\n                    int temperature = buf.readUnsignedByte();\n                    if (BitUtil.check(temperature, 7)) {\n                        temperature = -BitUtil.to(temperature, 7);\n                    }\n                    position.set(Position.PREFIX_TEMP + 1, temperature);\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);\n                } else if (variant == Variant.WETRUST) {\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    position.set(Position.KEY_CARD, buf.readCharSequence(\n                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());\n                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);\n                    position.set(\"cardStatus\", buf.readUnsignedByte());\n                    position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());\n                }\n            }\n            if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)\n                    && buf.readableBytes() >= 3 + 6) {\n                position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n                position.set(Position.KEY_EVENT, buf.readUnsignedByte()); \n                position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);\n            }\n            if (type == MSG_GPS_LBS_3) {\n                int module = buf.readUnsignedShort();\n                int subLength = buf.readUnsignedByte();\n                switch (module) {\n                    case 0x0027:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x002E:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                        break;\n                    case 0x003B:\n                        position.setAccuracy(buf.readUnsignedShort() * 0.01);\n                        break;\n                    default:\n                        buf.skipBytes(subLength);\n                        break;\n                }\n            }\n            if (buf.readableBytes() == 4 + 6) {\n                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n            }\n        } else if (type == MSG_ALARM) {\n            boolean extendedAlarm = dataLength > 7;\n            if (extendedAlarm) {\n                decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));\n            } else {\n                DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                        .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                        .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                getLastLocation(position, dateBuilder.getDate());\n            }\n            short alarmType = buf.readUnsignedByte();\n            switch (alarmType) {\n                case 0x01:\n                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);\n                    break;\n                case 0x80:\n                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    break;\n                case 0x87:\n                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);\n                    break;\n                case 0x90:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                    break;\n                case 0x92:\n                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                    break;\n                case 0x93:\n                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                    break;\n                default:\n                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                    break;\n            }\n        } else {\n            if (dataLength > 0) {\n                buf.skipBytes(dataLength);\n            }\n            if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {\n                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n            }\n            return null;\n        }\n        if (hasLanguage(type)) {\n            buf.readUnsignedShort();\n        }\n        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {\n            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());\n        }\n        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-5da3b8fcb480", "buggy_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-2749e520c9ea", "buggy_code": "    private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n        position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n        int battery = buf.readUnsignedByte();\n        if (battery <= 100) {\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n        } else if (battery == 0xAA) {\n            position.set(Position.KEY_CHARGE, true);\n        }\n        position.setNetwork(new Network(CellTower.fromCidLac(\n                getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n        int product = buf.readUnsignedByte();\n        int status = buf.readUnsignedShort();\n        int alarm = buf.readUnsignedShort();\n        if (product == 1 || product == 2) {\n            if (BitUtil.check(alarm, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n        } else if (product == 3) {\n            position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n            if (BitUtil.check(alarm, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n            if (BitUtil.check(alarm, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            }\n            if (BitUtil.check(alarm, 3)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n            }\n        }\n        position.set(Position.KEY_STATUS, status);\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);\n        position.setValid(type != MSG_LOCATION_REPORT_BLIND);\n        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);\n        int battery = buf.readUnsignedByte();\n        if (battery <= 100) {\n            position.set(Position.KEY_BATTERY_LEVEL, battery);\n        } else if (battery == 0xAA) {\n            position.set(Position.KEY_CHARGE, true);\n        }\n        position.setNetwork(new Network(CellTower.fromCidLac(\n                getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));\n        int product = buf.readUnsignedByte();\n        int status = buf.readUnsignedShort();\n        int alarm = buf.readUnsignedShort();\n        if (product == 1 || product == 2) {\n            if (BitUtil.check(alarm, 0)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n        } else if (product == 3) {\n            position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));\n            if (BitUtil.check(alarm, 1)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n            }\n            if (BitUtil.check(alarm, 2)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n            }\n            if (BitUtil.check(alarm, 3)) {\n                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n            }\n        }\n        position.set(Position.KEY_STATUS, status);\n        while (buf.readableBytes() > 2) {\n            int id = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            switch (id) {\n                case 0x02:\n                    position.setAltitude(buf.readShort());\n                    break;\n                case 0x0C:\n                    position.set(\"gyro\", ByteBufUtil.hexDump(buf.readSlice(6)));\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-f92bde208800", "buggy_code": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            switch (key) {\n                case \"SA\":\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case \"MV\":\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"BV\":\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"GQ\":\n                    cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    break;\n                case \"CE\":\n                    cellTower.setCellId(buf.readUnsignedInt());\n                    break;\n                case \"LC\":\n                    cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    break;\n                case \"CN\":\n                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); \n                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    break;\n                case \"RL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"PC\":\n                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    break;\n                case \"AT\":\n                    position.setAltitude(buf.readUnsignedInt());\n                    break;\n                case \"RP\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    break;\n                case \"GS\":\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case \"DT\":\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    break;\n                case \"VN\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"EL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"TR\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case \"ET\":\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    break;\n                case \"FL\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case \"ML\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"FC\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case \"CI\":\n                    readString(buf); \n                    break;\n                case \"AV1\":\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    break;\n                case \"NC\":\n                    readString(buf); \n                    break;\n                case \"SM\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"GL\":\n                    readString(buf); \n                    break;\n                case \"MA\":\n                    readString(buf); \n                    break;\n                case \"PD\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    buf.readLong(); \n                    break;\n                case \"GN\":\n                    buf.skipBytes(60); \n                    break;\n                case \"GV\":\n                    buf.skipBytes(6); \n                    break;\n                case \"ME\":\n                    buf.readLong(); \n                    break;\n                case \"IA\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"MP\":\n                    buf.readUnsignedByte(); \n                    break;\n                default:\n                    break;\n            }\n        }\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }\n", "fixed_code": "    private void readBinaryCustomData(Position position, ByteBuf buf, String form) {\n        CellTower cellTower = new CellTower();\n        String[] keys = form.substring(1).split(\"%\");\n        for (String key : keys) {\n            switch (key) {\n                case \"SA\":\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case \"MV\":\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"BV\":\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    break;\n                case \"GQ\":\n                    cellTower.setSignalStrength((int) buf.readUnsignedByte());\n                    break;\n                case \"CE\":\n                    cellTower.setCellId(buf.readUnsignedInt());\n                    break;\n                case \"LC\":\n                    cellTower.setLocationAreaCode(buf.readUnsignedShort());\n                    break;\n                case \"CN\":\n                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); \n                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);\n                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);\n                    break;\n                case \"RL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"PC\":\n                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());\n                    break;\n                case \"AT\":\n                    position.setAltitude(buf.readUnsignedInt());\n                    break;\n                case \"RP\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    break;\n                case \"GS\":\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case \"DT\":\n                    position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);\n                    break;\n                case \"VN\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"MF\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"EL\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"TR\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                    break;\n                case \"ET\":\n                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());\n                    break;\n                case \"FL\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                    break;\n                case \"ML\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"FC\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case \"CI\":\n                    readString(buf); \n                    break;\n                case \"AV1\":\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    break;\n                case \"NC\":\n                    readString(buf); \n                    break;\n                case \"SM\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"GL\":\n                    readString(buf); \n                    break;\n                case \"MA\":\n                    readString(buf); \n                    break;\n                case \"PD\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"CD\":\n                    position.set(Position.KEY_ICCID, readString(buf));\n                    break;\n                case \"CM\":\n                    buf.readLong(); \n                    break;\n                case \"GN\":\n                    buf.skipBytes(60); \n                    break;\n                case \"GV\":\n                    buf.skipBytes(6); \n                    break;\n                case \"ME\":\n                    buf.readLong(); \n                    break;\n                case \"IA\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"MP\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"EO\":\n                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));\n                    break;\n                case \"EH\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);\n                    break;\n                case \"ZO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO4\":\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"ZO5\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO6\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);\n                    break;\n                case \"ZO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO9\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO10\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);\n                    break;\n                case \"ZO11\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO13\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO14\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());\n                    break;\n                case \"ZO15\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO16\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZO17\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"ZH1\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"ZH2\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);\n                    break;\n                case \"ZH3\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);\n                    break;\n                case \"ZL1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL2\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);\n                    break;\n                case \"ZL3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"ZL4\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"ZS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JO1\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO2\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO3\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO4\":\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());\n                    break;\n                case \"JO5\":\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    break;\n                case \"JO6\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO7\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO8\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO9\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO10\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JO11\":\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    break;\n                case \"JO12\":\n                    buf.readUnsignedByte(); \n                    break;\n                case \"JH1\":\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);\n                    break;\n                case \"JH2\":\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);\n                    break;\n                case \"JH3\":\n                case \"JH4\":\n                case \"JH5\":\n                case \"JH6\":\n                case \"JH7\":\n                    int index = Integer.parseInt(key.substring(2)) - 2;\n                    position.set(\"axleWeight\" + index, buf.readUnsignedShort() * 0.5);\n                    break;\n                case \"JH8\":\n                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);\n                    break;\n                case \"JH9\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH10\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JH11\":\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);\n                    break;\n                case \"JH12\":\n                    buf.readUnsignedShort(); \n                    break;\n                case \"JL1\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);\n                    break;\n                case \"JL2\":\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);\n                    break;\n                case \"JL3\":\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n                    break;\n                case \"JL4\":\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);\n                    break;\n                case \"JS1\":\n                    position.set(Position.KEY_VIN, readString(buf));\n                    break;\n                case \"JS2\":\n                    readString(buf); \n                    break;\n                case \"JS3\":\n                    position.set(\"driver1\", readString(buf));\n                    break;\n                case \"JS4\":\n                    position.set(\"driver2\", readString(buf));\n                    break;\n                case \"JN1\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN2\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN3\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN4\":\n                    buf.readUnsignedInt(); \n                    break;\n                case \"JN5\":\n                    buf.readUnsignedInt(); \n                    break;\n                default:\n                    break;\n            }\n        }\n        if (cellTower.getMobileCountryCode() != null\n            && cellTower.getMobileNetworkCode() != null\n            && cellTower.getCellId() != null && cellTower.getCellId() != 0\n            && cellTower.getLocationAreaCode() != null) {\n            position.setNetwork(new Network(cellTower));\n        } else if (cellTower.getSignalStrength() != null) {\n            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());\n        }\n    }\n"}
{"bug_id": "traccar-traccar-f4d10160d951", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n        if (type == MSG_DATA) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        }\n        return null;\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedByte(); \n        int flags = buf.readUnsignedByte();\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        int type = buf.readUnsignedByte();\n        if (BitUtil.check(flags, 4)) {\n            sendResponse(channel, remoteAddress, index, type, buf);\n        }\n        if (type == MSG_DATA) {\n            List<Position> positions = new LinkedList<>();\n            Set<Integer> keys = new HashSet<>();\n            boolean hasLocation = false;\n            Position position = new Position(getProtocolName());\n            DeviceSession deviceSession = null;\n            while (buf.isReadable()) {\n                int endIndex = buf.readUnsignedByte() + buf.readerIndex();\n                int key = buf.readUnsignedByte();\n                if (keys.contains(key)) {\n                    if (!hasLocation) {\n                        getLastLocation(position, null);\n                    }\n                    positions.add(position);\n                    keys.clear();\n                    hasLocation = false;\n                    position = new Position(getProtocolName());\n                }\n                keys.add(key);\n                switch (key) {\n                    case 0x01:\n                        deviceSession = getDeviceSession(\n                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        break;\n                    case 0x02:\n                        long alarm = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_ALARM, decodeAlarm(alarm));\n                        if (BitUtil.check(alarm, 31)) {\n                            position.set(\"bark\", true);\n                        }\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);\n                        break;\n                    case 0x20:\n                        hasLocation = true;\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        position.setCourse(buf.readUnsignedShortLE());\n                        position.setAltitude(buf.readShortLE());\n                        int hdop = buf.readUnsignedShortLE();\n                        position.setValid(hdop > 0);\n                        position.set(Position.KEY_HDOP, hdop * 0.1);\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x21:\n                        int mcc = buf.readUnsignedShortLE();\n                        int mnc = buf.readUnsignedByte();\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            position.getNetwork().addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));\n                        }\n                        break;\n                    case 0x22:\n                        if (position.getNetwork() == null) {\n                            position.setNetwork(new Network());\n                        }\n                        while (buf.readerIndex() < endIndex) {\n                            int rssi = buf.readByte();\n                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll(\"(..)\", \"$1:\");\n                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(\n                                    mac.substring(0, mac.length() - 1), rssi));\n                        }\n                        break;\n                    case 0x23:\n                        position.set(\"tagId\", readTagId(buf));\n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x24:\n                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));\n                        long status = buf.readUnsignedIntLE();\n                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));\n                        position.set(Position.KEY_STATUS, status);\n                        break;\n                    case 0x28:\n                        int beaconFlags = buf.readUnsignedByte();\n                        position.set(\"tagId\", readTagId(buf));\n                        position.set(\"tagRssi\", (int) buf.readByte());\n                        position.set(\"tag1mRssi\", (int) buf.readByte());\n                        if (BitUtil.check(beaconFlags, 7)) {\n                            position.setLatitude(buf.readIntLE() * 0.0000001);\n                            position.setLongitude(buf.readIntLE() * 0.0000001);\n                            position.setValid(true);\n                            hasLocation = true;\n                        }\n                        if (BitUtil.check(beaconFlags, 6)) {\n                            position.set(\"description\", buf.readCharSequence(\n                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());\n                        }\n                        break;\n                    case 0x2A:\n                        buf.readUnsignedByte(); \n                        buf.skipBytes(6); \n                        buf.readUnsignedByte(); \n                        position.setLatitude(buf.readIntLE() * 0.0000001);\n                        position.setLongitude(buf.readIntLE() * 0.0000001);\n                        position.setValid(true);\n                        hasLocation = true;\n                        break;\n                    case 0x30:\n                        buf.readUnsignedIntLE(); \n                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());\n                        break;\n                    case 0x31:\n                        int i = 1;\n                        while (buf.readerIndex() < endIndex) {\n                            position.set(\"activity\" + i + \"Time\", buf.readUnsignedIntLE());\n                            position.set(\"activity\" + i, buf.readUnsignedIntLE());\n                            i += 1;\n                        }\n                        break;\n                    case 0x37:\n                        buf.readUnsignedIntLE(); \n                        position.set(\"barkCount\", BitUtil.to(buf.readUnsignedIntLE(), 31));\n                        break;\n                    case 0x40:\n                        buf.readUnsignedIntLE(); \n                        int heartRate = buf.readUnsignedByte();\n                        if (heartRate > 1) {\n                            position.set(Position.KEY_HEART_RATE, heartRate);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                buf.readerIndex(endIndex);\n            }\n            if (!hasLocation) {\n                getLastLocation(position, null);\n            }\n            positions.add(position);\n            if (deviceSession != null) {\n                for (Position p : positions) {\n                    p.setDeviceId(deviceSession.getDeviceId());\n                }\n            } else {\n                return null;\n            }\n            return positions;\n        }\n        return null;\n    }\n"}
{"bug_id": "traccar-traccar-5c26f25b3b0a", "buggy_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        if (buf.readUnsignedByte() > 0) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        } else {\n                            buf.readUnsignedByte();\n                        }\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n", "fixed_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        for (int k = 1; k <= 3; k++) {\n                            if (buf.readUnsignedByte() > 0) {\n                                String key = k == 1 ? Position.KEY_BATTERY_LEVEL : \"battery\" + k + \"Level\";\n                                position.set(key, buf.readUnsignedByte());\n                            } else {\n                                buf.readUnsignedByte();\n                            }\n                        }\n                        buf.readUnsignedByte(); \n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n"}
{"bug_id": "traccar-traccar-7ce4fb9a628f", "buggy_code": "    protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n        Parser parser = new Parser(PATTERN_POSITION, content);\n        if (!parser.matches()) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int event = parser.nextInt();\n        String eventData = parser.next();\n        position.set(Position.KEY_EVENT, event);\n        if (event == 53) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n        } else {\n            position.set(Position.KEY_ALARM, decodeAlarm(event));\n        }\n        position.setTime(parser.nextDateTime());\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.set(Position.KEY_HDOP, parser.nextDouble());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.setCourse(parser.nextInt());\n        position.setAltitude(parser.nextInt());\n        position.set(Position.KEY_ODOMETER, parser.nextInt());\n        position.setNetwork(new Network(CellTower.from(\n                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n        int input = parser.nextHexInt();\n        int output = parser.nextHexInt();\n        position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n        position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n        position.set(Position.KEY_INPUT, input);\n        position.set(Position.KEY_OUTPUT, output);\n        position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);\n        position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);\n        if (parser.hasNext()) {\n            String[] adc = parser.next().split(\"\\\\|\");\n            for (int i = 1; i < adc.length; i++) {\n                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n            }\n        }\n        if (parser.hasNext()) {\n            String[] fuels = parser.next().split(\"\\\\|\");\n            for (String fuel : fuels) {\n                int index = Integer.parseInt(fuel.substring(0, 2));\n                int value = Integer.parseInt(fuel.substring(2), 16);\n                position.set(\"fuel\" + index, value * 0.1);\n            }\n        }\n        if (parser.hasNext()) {\n            String[] temperatures = parser.next().split(\"\\\\|\");\n            for (String temperature : temperatures) {\n                int index = Integer.parseInt(temperature.substring(0, 2));\n                int value = Integer.parseInt(temperature.substring(2), 16);\n                double convertedValue = BitUtil.to(value, 15);\n                if (BitUtil.check(value, 15)) {\n                    convertedValue = -convertedValue;\n                }\n                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n            }\n        }\n        if (parser.hasNextAny(9)) {\n            position.set(Position.KEY_RPM, parser.nextInt());\n            position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());\n            position.set(\"airFlow\", parser.nextInt());\n            position.set(\"airPressure\", parser.nextInt());\n            if (parser.hasNext()) {\n                position.set(\"airTemp\", parser.nextInt() - 40);\n            }\n            position.set(Position.KEY_THROTTLE, parser.nextInt());\n            if (parser.hasNext()) {\n                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);\n            }\n            if (parser.hasNext()) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);\n            }\n            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);\n        }\n        return position;\n    }\n", "fixed_code": "    protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {\n        Parser parser = new Parser(PATTERN_POSITION, content);\n        if (!parser.matches()) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int event = parser.nextInt();\n        String eventData = parser.next();\n        position.set(Position.KEY_EVENT, event);\n        if (event == 53) {\n            position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);\n        } else {\n            position.set(Position.KEY_ALARM, decodeAlarm(event));\n        }\n        position.setTime(parser.nextDateTime());\n        position.setValid(parser.next().equals(\"A\"));\n        position.setLatitude(parser.nextDouble());\n        position.setLongitude(parser.nextDouble());\n        position.set(Position.KEY_SATELLITES, parser.nextInt());\n        position.set(Position.KEY_HDOP, parser.nextDouble());\n        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));\n        position.setCourse(parser.nextInt());\n        position.setAltitude(parser.nextInt());\n        position.set(Position.KEY_ODOMETER, parser.nextLong());\n        position.setNetwork(new Network(CellTower.from(\n                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));\n        position.set(Position.KEY_STATUS, parser.nextHexInt());\n        int input = parser.nextHexInt();\n        int output = parser.nextHexInt();\n        position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));\n        position.set(Position.KEY_DOOR, BitUtil.check(input, 2));\n        position.set(Position.KEY_INPUT, input);\n        position.set(Position.KEY_OUTPUT, output);\n        position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);\n        position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);\n        if (parser.hasNext()) {\n            String[] adc = parser.next().split(\"\\\\|\");\n            for (int i = 1; i < adc.length; i++) {\n                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);\n            }\n        }\n        if (parser.hasNext()) {\n            String[] fuels = parser.next().split(\"\\\\|\");\n            for (String fuel : fuels) {\n                int index = Integer.parseInt(fuel.substring(0, 2));\n                int value = Integer.parseInt(fuel.substring(2), 16);\n                position.set(\"fuel\" + index, value * 0.1);\n            }\n        }\n        if (parser.hasNext()) {\n            String[] temperatures = parser.next().split(\"\\\\|\");\n            for (String temperature : temperatures) {\n                int index = Integer.parseInt(temperature.substring(0, 2));\n                int value = Integer.parseInt(temperature.substring(2), 16);\n                double convertedValue = BitUtil.to(value, 15);\n                if (BitUtil.check(value, 15)) {\n                    convertedValue = -convertedValue;\n                }\n                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);\n            }\n        }\n        if (parser.hasNextAny(9)) {\n            position.set(Position.KEY_RPM, parser.nextInt());\n            position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());\n            position.set(\"airFlow\", parser.nextInt());\n            position.set(\"airPressure\", parser.nextInt());\n            if (parser.hasNext()) {\n                position.set(\"airTemp\", parser.nextInt() - 40);\n            }\n            position.set(Position.KEY_THROTTLE, parser.nextInt());\n            if (parser.hasNext()) {\n                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);\n            }\n            if (parser.hasNext()) {\n                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);\n            }\n            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());\n        }\n        if (parser.hasNext()) {\n            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);\n        }\n        return position;\n    }\n"}
{"bug_id": "jhy-jsoup-e52224fbfe66", "buggy_code": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())) \n                || (prev instanceof Element && ((Element) prev).isBlock())\n                ;\n            if (couldSkip && isBlank) return;\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && isNode(prev, \"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n", "fixed_code": "    @Override\n    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())) \n                || (prev instanceof Element && (((Element) prev).isBlock() || prev.isNode(\"br\"))) \n                ;\n            if (couldSkip && isBlank) return;\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && isNode(prev, \"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n"}
{"bug_id": "xtremexp-UT4X-Converter-e719841eb260", "buggy_code": "\tprotected String convertScaleAndToT3D(double scaleFactor) {\r\n\t\tthis.convert();\r\n\t\tthis.scale(scaleFactor);\r\n\t\treturn \"Begin Map\\nBegin Level\\n\" + toT3d() + \"End Level\\nEnd Map\";\r\n\t}\r\n", "fixed_code": "\tprotected String convertScaleAndToT3D(double scaleFactor) {\r\n\t\tthis.convert();\r\n\t\tthis.scale(scaleFactor);\r\n\t\tString convT3d = toT3d();\r\n\t\tif (convT3d == null) {\r\n\t\t\tconvT3d = \"\";\r\n\t\t\tfor (T3DActor repActor : this.children) {\r\n\t\t\t\tconvT3d += repActor.toT3d();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn \"Begin Map\\nBegin Level\\n\" + convT3d + \"End Level\\nEnd Map\";\r\n\t}\r\n"}
{"bug_id": "traccar-traccar-5e18cb586d34", "buggy_code": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n        int index = 0;\n        String[] values = sentence.split(\",\");\n        index += 1; \n        index += 1; \n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n        index += 1; \n        index += 1; \n        index += 1; \n        long reportMask = Long.parseLong(values[index++], 16);\n        long reportMaskExt = 0;\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index - 1]) * 100);\n        }\n        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 12)) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 13)) {\n            position.set(\"idleHours\", Double.parseDouble(values[index++]));\n        }\n        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 29)) {\n            reportMaskExt = Long.parseLong(values[index++], 16);\n        }\n        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {\n            position.set(\"driver1Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {\n            position.set(\"driver2Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {\n            position.set(\"driver1Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {\n            position.set(\"driver2Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {\n            position.set(\"registration\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; \n        }\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        if (BitUtil.check(reportMask, 30)) {\n            while (values[index].isEmpty()) {\n                index += 1;\n            }\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                index += 6; \n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; \n            index += 1; \n        }\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n        return position;\n    }\n", "fixed_code": "    private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {\n        Position position = new Position(getProtocolName());\n        int index = 0;\n        String[] values = sentence.split(\",\");\n        index += 1; \n        index += 1; \n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);\n        position.setDeviceId(deviceSession.getDeviceId());\n        String deviceName = values[index++];\n        index += 1; \n        index += 1; \n        long reportMask = Long.parseLong(values[index++], 16);\n        long reportMaskExt = 0;\n        if (BitUtil.check(reportMask, 0)) {\n            position.set(Position.KEY_VIN, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 1)) {\n            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);\n        }\n        if (BitUtil.check(reportMask, 2)) {\n            position.set(Position.KEY_OBD_ODOMETER, values[index++]);\n        }\n        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));\n        }\n        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {\n            position.set(\"range\", Long.parseLong(values[index - 1]) * 100);\n        }\n        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));\n        }\n        if (BitUtil.check(reportMask, 12) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 13) && !values[index++].isEmpty()) {\n            position.set(\"idleHours\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {\n            position.set(\"idleFuelConsumption\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {\n            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {\n            position.set(\"tachographInfo\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {\n            position.set(\"indicators\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {\n            position.set(\"lights\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {\n            position.set(\"doors\", Integer.parseInt(values[index - 1], 16));\n        }\n        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {\n            position.set(\"vehicleOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {\n            position.set(\"engineOverspeed\", Double.parseDouble(values[index - 1]));\n        }\n        if (\"GV350M\".equals(deviceName)) {\n            if (BitUtil.check(reportMask, 22)) {\n                index += 1; \n            }\n            if (BitUtil.check(reportMask, 23)) {\n                index += 1; \n            }\n            if (BitUtil.check(reportMask, 24)) {\n                index += 1; \n            }\n        }\n        if (BitUtil.check(reportMask, 29) && !values[index++].isEmpty()) {\n            reportMaskExt = Long.parseLong(values[index - 1], 16);\n        }\n        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {\n            position.set(\"adBlueLevel\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight1\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight3\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {\n            position.set(\"axleWeight4\", Integer.parseInt(values[index - 1]));\n        }\n        if (BitUtil.check(reportMaskExt, 4)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 5)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 6)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {\n            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);\n        }\n        if (BitUtil.check(reportMaskExt, 8)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 9)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 10)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 11)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 12)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 13)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 14)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {\n            position.set(\"driver1Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {\n            position.set(\"driver2Card\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {\n            position.set(\"driver1Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {\n            position.set(\"driver2Name\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {\n            position.set(\"registration\", values[index - 1]);\n        }\n        if (BitUtil.check(reportMaskExt, 20)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 21)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 22)) {\n            index += 1; \n        }\n        if (BitUtil.check(reportMaskExt, 23)) {\n            index += 1; \n        }\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        if (BitUtil.check(reportMask, 30)) {\n            while (values[index].isEmpty()) {\n                index += 1;\n            }\n            position.setValid(Integer.parseInt(values[index++]) > 0);\n            if (!values[index].isEmpty()) {\n                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));\n                position.setCourse(Integer.parseInt(values[index++]));\n                position.setAltitude(Double.parseDouble(values[index++]));\n                position.setLongitude(Double.parseDouble(values[index++]));\n                position.setLatitude(Double.parseDouble(values[index++]));\n                position.setTime(dateFormat.parse(values[index++]));\n            } else {\n                index += 6; \n                getLastLocation(position, null);\n            }\n        } else {\n            getLastLocation(position, null);\n        }\n        if (BitUtil.check(reportMask, 31)) {\n            index += 4; \n            index += 1; \n        }\n        if (ignoreFixTime) {\n            position.setTime(dateFormat.parse(values[index]));\n        } else {\n            position.setDeviceTime(dateFormat.parse(values[index]));\n        }\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-9a1cbeb7b754", "buggy_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        buf.readUnsignedByte(); \n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        buf.readUnsignedByte(); \n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n", "fixed_code": "    private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        List<Position> positions = new LinkedList<>();\n        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);\n        String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);\n        buf.skipBytes(1 + 3 + 1);\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        buf.readUnsignedIntLE(); \n        int count = buf.readUnsignedShortLE();\n        for (int i = 0; i < count; i++) {\n            Position position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            buf.readUnsignedShortLE(); \n            buf.readUnsignedShortLE(); \n            int paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x01:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        break;\n                    case 0x05:\n                        position.setValid(buf.readUnsignedByte() > 0);\n                        break;\n                    case 0x06:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x07:\n                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                        break;\n                    case 0x14:\n                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x15:\n                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());\n                        break;\n                    case 0x47:\n                        int lockState = buf.readUnsignedByte();\n                        if (lockState > 0) {\n                            position.set(Position.KEY_LOCK, lockState == 2);\n                        }\n                        break;\n                    case 0x97:\n                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());\n                        break;\n                    case 0x9D:\n                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());\n                        break;\n                    case 0xFE69:\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        break;\n                    default:\n                        buf.readUnsignedByte();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x08:\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                        break;\n                    case 0x09:\n                        position.setCourse(buf.readUnsignedShortLE());\n                        break;\n                    case 0x0A:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x0B:\n                        position.setAltitude(buf.readShortLE());\n                        break;\n                    case 0x16:\n                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x19:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x1A:\n                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);\n                        break;\n                    case 0x40:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                        break;\n                    case 0x91:\n                    case 0x92:\n                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x98:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());\n                        break;\n                    case 0x99:\n                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9C:\n                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());\n                        break;\n                    case 0x9F:\n                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());\n                        break;\n                    case 0xC9:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());\n                        break;\n                    default:\n                        buf.readUnsignedShortLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                switch (id) {\n                    case 0x02:\n                        position.setLatitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x03:\n                        position.setLongitude(buf.readIntLE() * 0.000001);\n                        break;\n                    case 0x04:\n                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); \n                        break;\n                    case 0x0C:\n                    case 0x9B:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x0D:\n                        position.set(\"runtime\", buf.readUnsignedIntLE());\n                        break;\n                    case 0x25:\n                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));\n                        break;\n                    case 0xA0:\n                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);\n                        break;\n                    case 0xA2:\n                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);\n                        break;\n                    default:\n                        buf.readUnsignedIntLE();\n                        break;\n                }\n            }\n            paramCount = buf.readUnsignedByte();\n            for (int j = 0; j < paramCount; j++) {\n                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;\n                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                int length = buf.readUnsignedByte();\n                switch (id) {\n                    case 0x2A:\n                    case 0x2B:\n                    case 0x2C:\n                    case 0x2D:\n                    case 0x2E:\n                    case 0x2F:\n                    case 0x30:\n                    case 0x31:\n                        buf.readUnsignedByte(); \n                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);\n                        break;\n                    case 0xFE31:\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.skipBytes(length - 2);\n                        break;\n                    case 0xFEA8:\n                        if (buf.readUnsignedByte() > 0) {\n                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                        } else {\n                            buf.readUnsignedByte();\n                        }\n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        buf.readUnsignedByte(); \n                        break;\n                    default:\n                        buf.skipBytes(length);\n                        break;\n                }\n            }\n            positions.add(position);\n        }\n        return positions;\n    }\n"}
{"bug_id": "TheAlgorithms-Java-e5c7a08874a6", "buggy_code": "    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); \n            } else { \n                int num2 = s.pop();\n                int num1 = s.pop();\n                String op = tokens.next();\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> s.push(num1 / num2);\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close();\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n", "fixed_code": "    public static int postfixEvaluate(final String exp) {\n        Stack<Integer> s = new Stack<Integer>();\n        Scanner tokens = new Scanner(exp);\n        while (tokens.hasNext()) {\n            if (tokens.hasNextInt()) {\n                s.push(tokens.nextInt()); \n            } else { \n                if (s.size() < 2) {\n                    throw new IllegalArgumentException(\"exp is not a proper postfix expression (too few arguments).\");\n                }\n                int num2 = s.pop();\n                int num1 = s.pop();\n                String op = tokens.next();\n                switch (op) {\n                    case \"+\" -> s.push(num1 + num2);\n                    case \"-\" -> s.push(num1 - num2);\n                    case \"*\" -> s.push(num1 * num2);\n                    case \"/\" -> s.push(num1 / num2);\n                    default -> throw new IllegalArgumentException(\"exp contains an unknown operation.\");\n                }\n            }\n        }\n        tokens.close();\n        if (s.size() != 1) {\n            throw new IllegalArgumentException(\"exp is not a proper postfix expression.\");\n        }\n        return s.pop();\n    }\n"}
{"bug_id": "traccar-traccar-a9c311855a49", "buggy_code": "    @Override\n    protected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n        JsonObject json;\n        try (ByteBufferInputStream inputStream = new ByteBufferInputStream(message.payload().nioBuffer())) {\n            json = Json.createReader(inputStream).readObject();\n        }\n        String type = json.getString(\"rpt\");\n        switch (type) {\n            case \"hf\":\n            case \"loc\":\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                position.setValid(true);\n                DateFormat dateFormat = new SimpleDateFormat(\"yyyyMMdd'T'HHmmss.SSS'Z'\");\n                position.setTime(dateFormat.parse(json.getString(\"ts\")));\n                JsonObject location = json.getJsonObject(\"location\");\n                position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n                position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n                position.setCourse(json.getInt(\"bear\"));\n                position.setSpeed(UnitsConverter.knotsFromCps(json.getInt(\"spd\")));\n                position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n                return position;\n            default:\n                return null;\n        }\n    }\n", "fixed_code": "    @Override\n    protected Object decode(DeviceSession deviceSession, MqttPublishMessage message) throws Exception {\n        JsonObject json;\n        try (ByteBufferInputStream inputStream = new ByteBufferInputStream(message.payload().nioBuffer())) {\n            json = Json.createReader(inputStream).readObject();\n        }\n        String type = json.getString(\"rpt\");\n        switch (type) {\n            case \"hf\":\n            case \"loc\":\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                position.setValid(true);\n                DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n                position.setTime(dateFormat.parse(json.getString(\"ts\")));\n                JsonObject location = json.getJsonObject(\"location\");\n                position.setLatitude(location.getJsonNumber(\"lat\").doubleValue());\n                position.setLongitude(location.getJsonNumber(\"lon\").doubleValue());\n                position.setCourse(json.getInt(\"bear\"));\n                position.setSpeed(UnitsConverter.knotsFromCps(json.getInt(\"spd\")));\n                position.set(Position.KEY_IGNITION, json.getString(\"ign\").equals(\"on\"));\n                return position;\n            default:\n                return null;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-0f8dd92a6b1b", "buggy_code": "    private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        buf.readUnsignedShort(); \n        int type = buf.readUnsignedByte();\n        if (type == MSG_STRING_INFO) {\n            buf.readUnsignedInt(); \n            String data;\n            if (buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                getLastLocation(position, null);\n                position.set(Position.KEY_RESULT, data);\n            }\n            return position;\n        } else if (type == MSG_INFO) {\n            int subType = buf.readUnsignedByte();\n            getLastLocation(position, null);\n            if (subType == 0x00) {\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                return position;\n            } else if (subType == 0x05) {\n                if (buf.readableBytes() >= 6 + 1 + 6) {\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    position.setDeviceTime(dateBuilder.getDate());\n                }\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                return position;\n            } else if (subType == 0x0a) {\n                buf.skipBytes(8); \n                buf.skipBytes(8); \n                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n                return position;\n            } else if (subType == 0x0d) {\n                if (buf.getByte(buf.readerIndex()) != '!') {\n                    buf.skipBytes(6);\n                }\n                Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n                if (!parser.matches()) {\n                    return null;\n                }\n                position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                return position;\n            } else if (subType == 0x1b) {\n                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                    String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                    position.set(\"serial\", data.trim());\n                } else {\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                }\n                return position;\n            }\n        } else if (type == MSG_X1_PHOTO_DATA) {\n            int pictureId = buf.readInt();\n            ByteBuf photo = photos.get(pictureId);\n            buf.readUnsignedInt(); \n            buf.readBytes(photo, buf.readUnsignedShort());\n            if (photo.writableBytes() > 0) {\n                sendPhotoRequest(channel, pictureId);\n            } else {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n            if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n                getLastLocation(position, position.getDeviceTime());\n            }\n            if (decodeLbs(position, buf, type, true)) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            buf.skipBytes(buf.readUnsignedByte()); \n            buf.skipBytes(buf.readUnsignedByte()); \n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_STATUS, status);\n            if (type == MSG_AZ735_ALARM) {\n                switch (status) {\n                    case 0xA0:\n                        position.set(Position.KEY_ARMED, true);\n                        break;\n                    case 0xA1:\n                        position.set(Position.KEY_ARMED, false);\n                        break;\n                    case 0xA2:\n                    case 0xA3:\n                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                        break;\n                    case 0xA4:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                    case 0xA5:\n                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            buf.skipBytes(buf.readUnsignedByte()); \n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_OBD) {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();\n            for (String pair : data.split(\",\")) {\n                String[] values = pair.split(\"=\");\n                if (values.length >= 2) {\n                    switch (Integer.parseInt(values[0].substring(0, 2), 16)) {\n                        case 40:\n                            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 43:\n                            position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 45:\n                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 53:\n                            position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 54:\n                            position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 71:\n                            position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 73:\n                            position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 74:\n                            position.set(Position.KEY_VIN, values[1]);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            return position;\n        } else if (type == MSG_GPS_MODULAR) {\n            while (buf.readableBytes() > 6) {\n                int moduleType = buf.readUnsignedShort();\n                int moduleLength = buf.readUnsignedShort();\n                switch (moduleType) {\n                    case 0x03:\n                        position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                        break;\n                    case 0x09:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x0a:\n                        position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                        break;\n                    case 0x11:\n                        CellTower cellTower = CellTower.from(\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedMedium(),\n                                buf.readUnsignedByte());\n                        if (cellTower.getCellId() > 0) {\n                            position.setNetwork(new Network(cellTower));\n                        }\n                        break;\n                    case 0x18:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x28:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                        break;\n                    case 0x29:\n                        position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                        break;\n                    case 0x2a:\n                        int input = buf.readUnsignedByte();\n                        position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                        position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                        break;\n                    case 0x2b:\n                        int event = buf.readUnsignedByte();\n                        switch (event) {\n                            case 0x11:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                                break;\n                            case 0x12:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                                break;\n                            case 0x13:\n                                position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                                break;\n                            case 0x14:\n                                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        position.set(Position.KEY_EVENT, event);\n                        break;\n                    case 0x2e:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x33:\n                        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        position.setAltitude(buf.readShort());\n                        double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                        double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                        int flags = buf.readUnsignedShort();\n                        position.setCourse(BitUtil.to(flags, 10));\n                        position.setValid(BitUtil.check(flags, 12));\n                        if (!BitUtil.check(flags, 10)) {\n                            latitude = -latitude;\n                        }\n                        if (BitUtil.check(flags, 11)) {\n                            longitude = -longitude;\n                        }\n                        position.setLatitude(latitude);\n                        position.setLongitude(longitude);\n                        break;\n                    case 0x34:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        buf.readUnsignedIntLE(); \n                        buf.skipBytes(buf.readUnsignedByte()); \n                        break;\n                    default:\n                        buf.skipBytes(moduleLength);\n                        break;\n                }\n            }\n            if (position.getFixTime() == null) {\n                getLastLocation(position, null);\n            }\n            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n            return position;\n        } else if (type == MSG_MULTIMEDIA) {\n            buf.skipBytes(8); \n            long timestamp = buf.readUnsignedInt() * 1000;\n            buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); \n            buf.skipBytes(2 + 2 + 2 + 2); \n            int mediaId = buf.readInt();\n            int mediaLength = buf.readInt();\n            int mediaType = buf.readUnsignedByte();\n            int mediaFormat = buf.readUnsignedByte();\n            if (mediaType == 0 && mediaFormat == 0) {\n                buf.readUnsignedByte(); \n                ByteBuf photo;\n                if (buf.readUnsignedShort() == 0) {\n                    photo = Unpooled.buffer(mediaLength);\n                    if (photos.containsKey(mediaId)) {\n                        photos.remove(mediaId).release();\n                    }\n                    photos.put(mediaId, photo);\n                } else {\n                    photo = photos.get(mediaId);\n                }\n                if (photo != null) {\n                    buf.readBytes(photo, buf.readableBytes() - 3 * 2);\n                    if (!photo.isWritable()) {\n                        position = new Position(getProtocolName());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        getLastLocation(position, new Date(timestamp));\n                        position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                        photos.remove(mediaId).release();\n                    }\n                }\n            }\n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_SERIAL) {\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            int length = buf.readableBytes() - 9; \n            if (length <= 0) {\n                return null;\n            } else if (length < 8) {\n                position.set(\n                        Position.PREFIX_TEMP + 1,\n                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n            } else {\n                buf.readUnsignedByte(); \n                position.set(\n                        Position.KEY_DRIVER_UNIQUE_ID,\n                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n            }\n            return position;\n        }\n        return null;\n    }\n", "fixed_code": "    private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {\n            deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        buf.readUnsignedShort(); \n        int type = buf.readUnsignedByte();\n        if (type == MSG_STRING_INFO) {\n            buf.readUnsignedInt(); \n            String data;\n            if (buf.readUnsignedByte() == 1) {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);\n            } else {\n                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);\n            }\n            Parser parser = new Parser(PATTERN_LOCATION, data);\n            if (parser.matches()) {\n                position.setValid(true);\n                position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));\n                position.setCourse(parser.nextDouble());\n                position.setSpeed(parser.nextDouble());\n                position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));\n            } else {\n                getLastLocation(position, null);\n                position.set(Position.KEY_RESULT, data);\n            }\n            return position;\n        } else if (type == MSG_INFO) {\n            int subType = buf.readUnsignedByte();\n            getLastLocation(position, null);\n            if (subType == 0x00) {\n                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);\n                return position;\n            } else if (subType == 0x04) {\n                CharSequence content = buf.readCharSequence(buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII);\n                String[] values = content.toString().split(\";\");\n                for (String value : values) {\n                    String[] pair = value.split(\"=\");\n                    switch (pair[0]) {\n                        case \"ALM1\":\n                        case \"ALM2\":\n                        case \"ALM3\":\n                            position.set(\"alarm\" + pair[0].charAt(3) + \"Status\", Integer.parseInt(pair[1], 16));\n                        case \"STA1\":\n                            position.set(\"otherStatus\", Integer.parseInt(pair[1], 16));\n                            break;\n                        case \"DYD\":\n                            position.set(\"engineStatus\", Integer.parseInt(pair[1], 16));\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                return position;\n            } else if (subType == 0x05) {\n                if (buf.readableBytes() >= 6 + 1 + 6) {\n                    DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n                    position.setDeviceTime(dateBuilder.getDate());\n                }\n                int flags = buf.readUnsignedByte();\n                position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));\n                position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));\n                return position;\n            } else if (subType == 0x0a) {\n                buf.skipBytes(8); \n                buf.skipBytes(8); \n                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll(\"f\", \"\"));\n                return position;\n            } else if (subType == 0x0d) {\n                if (buf.getByte(buf.readerIndex()) != '!') {\n                    buf.skipBytes(6);\n                }\n                Parser parser = new Parser(PATTERN_FUEL, buf.toString(\n                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));\n                if (!parser.matches()) {\n                    return null;\n                }\n                position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));\n                position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));\n                return position;\n            } else if (subType == 0x1b) {\n                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {\n                    String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();\n                    position.set(\"serial\", data.trim());\n                } else {\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));\n                    buf.readUnsignedByte(); \n                    buf.readUnsignedByte(); \n                }\n                return position;\n            }\n        } else if (type == MSG_X1_PHOTO_DATA) {\n            int pictureId = buf.readInt();\n            ByteBuf photo = photos.get(pictureId);\n            buf.readUnsignedInt(); \n            buf.readBytes(photo, buf.readUnsignedShort());\n            if (photo.writableBytes() > 0) {\n                sendPhotoRequest(channel, pictureId);\n            } else {\n                position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                photos.remove(pictureId).release();\n            }\n        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {\n            if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {\n                getLastLocation(position, position.getDeviceTime());\n            }\n            if (decodeLbs(position, buf, type, true)) {\n                position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            }\n            buf.skipBytes(buf.readUnsignedByte()); \n            buf.skipBytes(buf.readUnsignedByte()); \n            int status = buf.readUnsignedByte();\n            position.set(Position.KEY_STATUS, status);\n            if (type == MSG_AZ735_ALARM) {\n                switch (status) {\n                    case 0xA0:\n                        position.set(Position.KEY_ARMED, true);\n                        break;\n                    case 0xA1:\n                        position.set(Position.KEY_ARMED, false);\n                        break;\n                    case 0xA2:\n                    case 0xA3:\n                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                        break;\n                    case 0xA4:\n                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);\n                        break;\n                    case 0xA5:\n                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            buf.skipBytes(buf.readUnsignedByte()); \n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_OBD) {\n            DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))\n                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())\n                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());\n            getLastLocation(position, dateBuilder.getDate());\n            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);\n            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();\n            for (String pair : data.split(\",\")) {\n                String[] values = pair.split(\"=\");\n                if (values.length >= 2) {\n                    switch (Integer.parseInt(values[0].substring(0, 2), 16)) {\n                        case 40:\n                            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 43:\n                            position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 45:\n                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 53:\n                            position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 54:\n                            position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 71:\n                            position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 73:\n                            position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);\n                            break;\n                        case 74:\n                            position.set(Position.KEY_VIN, values[1]);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            return position;\n        } else if (type == MSG_GPS_MODULAR) {\n            while (buf.readableBytes() > 6) {\n                int moduleType = buf.readUnsignedShort();\n                int moduleLength = buf.readUnsignedShort();\n                switch (moduleType) {\n                    case 0x03:\n                        position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));\n                        break;\n                    case 0x09:\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        break;\n                    case 0x0a:\n                        position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());\n                        break;\n                    case 0x11:\n                        CellTower cellTower = CellTower.from(\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedShort(),\n                                buf.readUnsignedMedium(),\n                                buf.readUnsignedByte());\n                        if (cellTower.getCellId() > 0) {\n                            position.setNetwork(new Network(cellTower));\n                        }\n                        break;\n                    case 0x18:\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                        break;\n                    case 0x28:\n                        position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);\n                        break;\n                    case 0x29:\n                        position.set(Position.KEY_INDEX, buf.readUnsignedInt());\n                        break;\n                    case 0x2a:\n                        int input = buf.readUnsignedByte();\n                        position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);\n                        position.set(\"tamper\", BitUtil.from(input, 4) > 0);\n                        break;\n                    case 0x2b:\n                        int event = buf.readUnsignedByte();\n                        switch (event) {\n                            case 0x11:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);\n                                break;\n                            case 0x12:\n                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);\n                                break;\n                            case 0x13:\n                                position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);\n                                break;\n                            case 0x14:\n                                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);\n                                break;\n                            default:\n                                break;\n                        }\n                        position.set(Position.KEY_EVENT, event);\n                        break;\n                    case 0x2e:\n                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());\n                        break;\n                    case 0x33:\n                        position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                        position.setAltitude(buf.readShort());\n                        double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                        double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;\n                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));\n                        int flags = buf.readUnsignedShort();\n                        position.setCourse(BitUtil.to(flags, 10));\n                        position.setValid(BitUtil.check(flags, 12));\n                        if (!BitUtil.check(flags, 10)) {\n                            latitude = -latitude;\n                        }\n                        if (BitUtil.check(flags, 11)) {\n                            longitude = -longitude;\n                        }\n                        position.setLatitude(latitude);\n                        position.setLongitude(longitude);\n                        break;\n                    case 0x34:\n                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                        buf.readUnsignedIntLE(); \n                        buf.skipBytes(buf.readUnsignedByte()); \n                        break;\n                    default:\n                        buf.skipBytes(moduleLength);\n                        break;\n                }\n            }\n            if (position.getFixTime() == null) {\n                getLastLocation(position, null);\n            }\n            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);\n            return position;\n        } else if (type == MSG_MULTIMEDIA) {\n            buf.skipBytes(8); \n            long timestamp = buf.readUnsignedInt() * 1000;\n            buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); \n            buf.skipBytes(2 + 2 + 2 + 2); \n            int mediaId = buf.readInt();\n            int mediaLength = buf.readInt();\n            int mediaType = buf.readUnsignedByte();\n            int mediaFormat = buf.readUnsignedByte();\n            if (mediaType == 0 && mediaFormat == 0) {\n                buf.readUnsignedByte(); \n                ByteBuf photo;\n                if (buf.readUnsignedShort() == 0) {\n                    photo = Unpooled.buffer(mediaLength);\n                    if (photos.containsKey(mediaId)) {\n                        photos.remove(mediaId).release();\n                    }\n                    photos.put(mediaId, photo);\n                } else {\n                    photo = photos.get(mediaId);\n                }\n                if (photo != null) {\n                    buf.readBytes(photo, buf.readableBytes() - 3 * 2);\n                    if (!photo.isWritable()) {\n                        position = new Position(getProtocolName());\n                        position.setDeviceId(deviceSession.getDeviceId());\n                        getLastLocation(position, new Date(timestamp));\n                        position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, \"jpg\"));\n                        photos.remove(mediaId).release();\n                    }\n                }\n            }\n            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);\n            return position;\n        } else if (type == MSG_SERIAL) {\n            position = new Position(getProtocolName());\n            position.setDeviceId(deviceSession.getDeviceId());\n            getLastLocation(position, null);\n            buf.readUnsignedByte(); \n            int length = buf.readableBytes() - 9; \n            if (length <= 0) {\n                return null;\n            } else if (length < 8) {\n                position.set(\n                        Position.PREFIX_TEMP + 1,\n                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));\n            } else {\n                buf.readUnsignedByte(); \n                position.set(\n                        Position.KEY_DRIVER_UNIQUE_ID,\n                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());\n            }\n            return position;\n        }\n        return null;\n    }\n"}
{"bug_id": "jhy-jsoup-45ed00232722", "buggy_code": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u);\n        try {\n            String urlS = u.toExternalForm(); \n            urlS = urlS.replace(\" \", \"%20\");\n            final URI uri = new URI(urlS);\n            return new URL(uri.toASCIIString());\n        } catch (URISyntaxException | MalformedURLException e) {\n            return u;\n        }\n    }\n", "fixed_code": "    static URL encodeUrl(URL u) {\n\t    u = punyUrl(u);\n        try {\n            URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());\n            return uri.toURL();\n        } catch (URISyntaxException | MalformedURLException e) {\n            return u;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-ed3950fbdccf", "buggy_code": "    @Override\n    protected Object encodeCommand(Command command) {\n        ByteBuf content = Unpooled.buffer();\n        switch (command.getType()) {\n            case Command.TYPE_POSITION_SINGLE:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);\n            case Command.TYPE_ENGINE_STOP:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);\n            case Command.TYPE_ENGINE_RESUME:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);\n            case Command.TYPE_SET_SPEED_LIMIT:\n                content.writeByte(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);\n            case Command.TYPE_SET_ODOMETER:\n                content.writeShort(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);\n            case Command.TYPE_POSITION_PERIODIC:\n                String[] data = command.getString(Command.KEY_FREQUENCY).split(\";\");\n                content.writeShort(Integer.valueOf(data[0]));\n                content.writeShort(Integer.valueOf(data[1]));\n                content.writeShort(Integer.valueOf(data[2]));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);\n            default:\n                return null;\n        }\n    }\n", "fixed_code": "    @Override\n    protected Object encodeCommand(Command command) {\n        ByteBuf content = Unpooled.buffer();\n        switch (command.getType()) {\n            case Command.TYPE_POSITION_SINGLE:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_REQUEST, content);\n            case Command.TYPE_ENGINE_STOP:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_CLOSE_THE_OIL_DUCT, content);\n            case Command.TYPE_ENGINE_RESUME:\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_RESTORES_THE_OIL_DUCT, content);\n            case Command.TYPE_SET_SPEED_LIMIT:\n                content.writeByte(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_SPEED_LIMIT, content);\n            case Command.TYPE_SET_ODOMETER:\n                content.writeShort(command.getInteger(Command.KEY_DATA));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_ODOMETER, content);\n            case Command.TYPE_POSITION_PERIODIC:\n                String[] data = command.getString(Command.KEY_FREQUENCY).split(\";\");\n                content.writeShort(Integer.valueOf(data[0]));\n                content.writeShort(Integer.valueOf(data[1]));\n                content.writeByte(Integer.valueOf(data[2]));\n                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);\n            default:\n                return null;\n        }\n    }\n"}
{"bug_id": "fusesource-jansi-58260c6ce08c", "buggy_code": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                target.append(input);\n                return target;\n            }\n            j += BEGIN_TOKEN_LEN;\n            String spec = input.substring(j, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                target.append(input);\n                return target;\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }\n", "fixed_code": "    public static Appendable render(final String input, Appendable target) throws IOException {\n        int i = 0;\n        int j, k;\n        while (true) {\n            j = input.indexOf(BEGIN_TOKEN, i);\n            if (j == -1) {\n                if (i == 0) {\n                    target.append(input);\n                    return target;\n                }\n                target.append(input.substring(i));\n                return target;\n            }\n            target.append(input.substring(i, j));\n            k = input.indexOf(END_TOKEN, j);\n            if (k == -1) {\n                target.append(input);\n                return target;\n            }\n            j += BEGIN_TOKEN_LEN;\n            if (k < j) {\n                throw new IllegalArgumentException(\"Invalid input string found.\");\n            }\n            String spec = input.substring(j, k);\n            String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);\n            if (items.length == 1) {\n                target.append(input);\n                return target;\n            }\n            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));\n            target.append(replacement);\n            i = k + END_TOKEN_LEN;\n        }\n    }\n"}
{"bug_id": "traccar-traccar-782fd787d14b", "buggy_code": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); \n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n                    position.setValid(true);\n                    position.setLatitude(buf.readInt() * 0.00001);\n                    position.setLongitude(buf.readInt() * 0.00001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_GPS, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());\n                    position.set(\"maxAcceleration\", buf.readUnsignedShortLE() * 0.001);\n                    position.set(\"maxDeceleration\", buf.readUnsignedShortLE() * 0.001);\n                    buf.readUnsignedShortLE(); \n                    buf.readUnsignedIntLE(); \n                    position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));\n                    buf.readUnsignedByte(); \n                    break;\n                case 1:\n                    buf.skipBytes(buf.readUnsignedShortLE()); \n                    break;\n                case 4:\n                    buf.skipBytes(53); \n                    break;\n                case 20:\n                    buf.skipBytes(32); \n                    break;\n                case 22:\n                    buf.readUnsignedByte(); \n                    buf.skipBytes(buf.readUnsignedShortLE()); \n                    break;\n                case 30:\n                    buf.skipBytes(79); \n                    break;\n                case 40:\n                    buf.skipBytes(40); \n                    break;\n                case 50:\n                    buf.skipBytes(buf.readUnsignedShortLE()); \n                    break;\n                case 255:\n                    buf.skipBytes(4); \n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n        return position.getValid() ? position : null;\n    }\n", "fixed_code": "    private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {\n        buf.readUnsignedShortLE(); \n        buf.readUnsignedShortLE(); \n        int index = buf.readUnsignedShortLE();\n        String id = String.format(\"%08d%07d\", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_INDEX, index);\n        position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));\n        while (buf.isReadable()) {\n            int type = buf.readUnsignedByte();\n            switch (type) {\n                case 0:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());\n                    buf.readUnsignedIntLE(); \n                    int status = buf.readUnsignedShortLE();\n                    position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));\n                    position.set(Position.KEY_STATUS, status);\n                    position.setValid(true);\n                    position.setLatitude(buf.readIntLE() * 0.00001);\n                    position.setLongitude(buf.readIntLE() * 0.00001);\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));\n                    position.setCourse(buf.readUnsignedShortLE());\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_GPS, buf.readUnsignedByte());\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());\n                    position.set(\"maxAcceleration\", buf.readUnsignedShortLE() * 0.001);\n                    position.set(\"maxDeceleration\", buf.readUnsignedShortLE() * 0.001);\n                    buf.readUnsignedShortLE(); \n                    buf.readUnsignedIntLE(); \n                    position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));\n                    buf.readUnsignedByte(); \n                    break;\n                case 1:\n                    buf.skipBytes(buf.readUnsignedShortLE() - 3); \n                    break;\n                case 4:\n                    buf.skipBytes(53); \n                    break;\n                case 20:\n                    buf.skipBytes(32); \n                    break;\n                case 22:\n                    buf.readUnsignedByte(); \n                    buf.skipBytes(buf.readUnsignedShortLE()); \n                    break;\n                case 30:\n                    buf.skipBytes(79); \n                    break;\n                case 40:\n                    buf.skipBytes(40); \n                    break;\n                case 50:\n                    buf.skipBytes(buf.readUnsignedShortLE() - 3); \n                    break;\n                case 255:\n                    buf.skipBytes(4); \n                    break;\n                default:\n                    throw new IllegalArgumentException(String.format(\"Unknown type %d\", type));\n            }\n        }\n        return position.getValid() ? position : null;\n    }\n"}
{"bug_id": "jhy-jsoup-f2913bd731f1", "buggy_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n            Node next = nextSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())); \n            if (couldSkip && isBlank) return;\n            Node prev = previousSibling();\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n", "fixed_code": "    void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {\n        final boolean prettyPrint = out.prettyPrint();\n        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;\n        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);\n        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());\n        boolean trimLeading = false, trimTrailing = false;\n        if (normaliseWhite) {\n            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;\n            trimTrailing = trimLikeBlock && nextSibling() == null;\n            Node next = nextSibling();\n            Node prev = previousSibling();\n            boolean isBlank = isBlank();\n            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) \n                || (next instanceof TextNode && (((TextNode) next).isBlank())) \n                || (prev instanceof Element && ((Element) prev).isBlock())\n                ;\n            if (couldSkip && isBlank) return;\n            if (\n                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||\n                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||\n                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals(\"br\")) \n            )\n                indent(accum, depth, out);\n        }\n        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);\n    }\n"}
{"bug_id": "crawler-commons-crawler-commons-2c2cb3bf7a95", "buggy_code": "    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n        int bytesLen = content.length;\n        int offset = 0;\n        Charset encoding = StandardCharsets.US_ASCII;\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n        String contentAsStr;\n        contentAsStr = new String(content, offset, bytesLen, encoding);\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n                hasHTML = true;\n            }\n        }\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames);\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                handleUserAgent(parseState, token);\n                    break;\n                case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                    break;\n                case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                    break;\n                case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                    break;\n                case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                    break;\n                case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                    break;\n                case UNKNOWN:\n                reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n                case MISSING:\n                reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n                default:\n                    break;\n            }\n        }\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }\n", "fixed_code": "    private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {\n        if ((content == null) || (content.length == 0)) {\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n        }\n        int bytesLen = content.length;\n        int offset = 0;\n        Charset encoding = StandardCharsets.UTF_8;\n        if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {\n            offset = 3;\n            bytesLen -= 3;\n            encoding = StandardCharsets.UTF_8;\n        }\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16LE;\n        }\n        else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {\n            offset = 2;\n            bytesLen -= 2;\n            encoding = StandardCharsets.UTF_16BE;\n        }\n        String contentAsStr;\n        contentAsStr = new String(content, offset, bytesLen, encoding);\n        boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith(\"text/html\"));\n        boolean hasHTML = false;\n        if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {\n            if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {\n                LOGGER.trace(\"Found non-robots.txt HTML file: \" + url);\n                return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);\n            } else {\n                if (isHtmlType) {\n                    LOGGER.debug(\"HTML content type returned for robots.txt file: \" + url);\n                } else {\n                    LOGGER.debug(\"Found HTML in robots.txt file: \" + url);\n                }\n                hasHTML = true;\n            }\n        }\n        StringTokenizer lineParser = new StringTokenizer(contentAsStr, \"\\n\\r\\u0085\\u2028\\u2029\");\n        ParseState parseState = new ParseState(url, robotNames);\n        while (lineParser.hasMoreTokens()) {\n            String line = lineParser.nextToken();\n            if (hasHTML) {\n                line = line.replaceAll(\"<[^>]+>\", \"\");\n            }\n            int hashPos = line.indexOf(\"#\");\n            if (hashPos >= 0) {\n                line = line.substring(0, hashPos);\n            }\n            line = line.trim();\n            if (line.length() == 0) {\n                continue;\n            }\n            RobotToken token = tokenize(line);\n            switch (token.getDirective()) {\n                case USER_AGENT:\n                handleUserAgent(parseState, token);\n                    break;\n                case DISALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleDisallow(parseState, token);\n                    break;\n                case ALLOW:\n                parseState.setFinishedAgentFields(true);\n                handleAllow(parseState, token);\n                    break;\n                case CRAWL_DELAY:\n                parseState.setFinishedAgentFields(true);\n                handleCrawlDelay(parseState, token);\n                    break;\n                case SITEMAP:\n                parseState.setFinishedAgentFields(true);\n                handleSitemap(parseState, token);\n                    break;\n                case HTTP:\n                parseState.setFinishedAgentFields(true);\n                handleHttp(parseState, token);\n                    break;\n                case UNKNOWN:\n                reportWarning(parseState, \"Unknown directive in robots.txt file: {}\", line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n                case MISSING:\n                reportWarning(parseState, \"Unknown line in robots.txt file (size {}): {}\", content.length, line);\n                parseState.setFinishedAgentFields(true);\n                    break;\n                default:\n                    break;\n            }\n        }\n        this._numWarningsDuringLastParse.set(parseState._numWarnings);\n        SimpleRobotRules result = parseState.getRobotRules();\n        if (result.getCrawlDelay() > _maxCrawlDelay) {\n            LOGGER.debug(\"Crawl delay exceeds max value - so disallowing all URLs: {}\", url);\n            return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);\n        } else {\n            result.sortRules();\n            return result;\n        }\n    }\n"}
{"bug_id": "vmzakharov-dataframe-ec-12af99192d24", "buggy_code": "    @Override\n    public String asStringLiteral()\n    {\n        return '\"' + this.value + '\"';\n    }\n", "fixed_code": "    @Override\n    public String asStringLiteral()\n    {\n        return this.value.indexOf('\\\"') == -1 ? '\"' + this.value + '\"' : '\\'' + this.value + '\\'';\n    }\n"}
{"bug_id": "traccar-traccar-230f629c3dce", "buggy_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedShort(); \n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        int type = buf.readUnsignedByte();\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n            List<Position> positions = new LinkedList<>();\n            buf.readUnsignedByte(); \n            int count = buf.readUnsignedByte();\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); \n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                        position = positions.remove(positions.size() - 1);\n                    }\n                }\n                buf.readUnsignedByte(); \n                position.setValid(true);\n                position.setLongitude(buf.readInt() / 10000000.0);\n                position.setLatitude(buf.readInt() / 10000000.0);\n                position.setAltitude(buf.readUnsignedShort() / 10.0);\n                position.setCourse(buf.readUnsignedShort() / 100.0);\n                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n                position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); \n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); \n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    position.set(\"tagId\", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n                }\n                positions.add(position);\n            }\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n            return positions;\n        } else if (type == MSG_DTCS) {\n            List<Position> positions = new LinkedList<>();\n            int count = buf.readUnsignedByte();\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                buf.readUnsignedByte(); \n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                position.setValid(true);\n                position.setLongitude(buf.readInt() / 10000000.0);\n                position.setLatitude(buf.readInt() / 10000000.0);\n                if (buf.readUnsignedByte() == 2) {\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n                positions.add(position);\n            }\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n            return positions;\n        } else if (type == MSG_FILES) {\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n            if (subtype == 2) {\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename);\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release();\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, \"jpg\"));\n                    photo.release();\n                    photo = null;\n                    return position;\n                }\n            }\n            return null;\n        } else if (type == MSG_IDENTIFICATION) {\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1);\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n            return null;\n        } else {\n            return decodeCommandResponse(deviceSession, type, buf);\n        }\n    }\n", "fixed_code": "    @Override\n    protected Object decode(\n            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {\n        ByteBuf buf = (ByteBuf) msg;\n        buf.readUnsignedShort(); \n        String imei = String.format(\"%015d\", buf.readLong());\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);\n        if (deviceSession == null) {\n            return null;\n        }\n        int type = buf.readUnsignedByte();\n        if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {\n            List<Position> positions = new LinkedList<>();\n            buf.readUnsignedByte(); \n            int count = buf.readUnsignedByte();\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                buf.readUnsignedByte(); \n                if (type == MSG_EXTENDED_RECORDS) {\n                    int recordExtension = buf.readUnsignedByte();\n                    int mergeRecordCount = BitUtil.from(recordExtension, 4);\n                    int currentRecord = BitUtil.to(recordExtension, 4);\n                    if (currentRecord > 0 && currentRecord <= mergeRecordCount) {\n                        position = positions.remove(positions.size() - 1);\n                    }\n                }\n                buf.readUnsignedByte(); \n                int longitude = buf.readInt();\n                int latitude = buf.readInt();\n                if (longitude > Integer.MIN_VALUE && latitude > Integer.MIN_VALUE) {\n                    position.setValid(true);\n                    position.setLongitude(longitude / 10000000.0);\n                    position.setLatitude(latitude / 10000000.0);\n                    position.setAltitude(buf.readUnsignedShort() / 10.0);\n                    position.setCourse(buf.readUnsignedShort() / 100.0);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);\n                } else {\n                    buf.skipBytes(8);\n                    getLastLocation(position, null);\n                }\n                if (type == MSG_EXTENDED_RECORDS) {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                } else {\n                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());\n                }\n                int valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 1);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 2);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 4);\n                }\n                valueCount = buf.readUnsignedByte();\n                for (int j = 0; j < valueCount; j++) {\n                    int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();\n                    decodeParameter(position, id, buf, 8);\n                }\n                decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); \n                decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); \n                Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);\n                Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);\n                if (tagIdPart1 != null && tagIdPart2 != null) {\n                    position.set(\"tagId\", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));\n                }\n                positions.add(position);\n            }\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"0002640113bc\")), remoteAddress));\n            }\n            return positions;\n        } else if (type == MSG_DTCS) {\n            List<Position> positions = new LinkedList<>();\n            int count = buf.readUnsignedByte();\n            for (int i = 0; i < count; i++) {\n                Position position = new Position(getProtocolName());\n                position.setDeviceId(deviceSession.getDeviceId());\n                buf.readUnsignedByte(); \n                position.setTime(new Date(buf.readUnsignedInt() * 1000));\n                position.setValid(true);\n                position.setLongitude(buf.readInt() / 10000000.0);\n                position.setLatitude(buf.readInt() / 10000000.0);\n                if (buf.readUnsignedByte() == 2) {\n                    position.set(Position.KEY_ARCHIVE, true);\n                }\n                position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));\n                positions.add(position);\n            }\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(\n                        Unpooled.wrappedBuffer(DataConverter.parseHex(\"00026d01c4a4\")), remoteAddress));\n            }\n            return positions;\n        } else if (type == MSG_FILES) {\n            int subtype = buf.readUnsignedByte();\n            int source = buf.readUnsignedByte();\n            if (subtype == 2) {\n                ByteBuf filename = buf.readSlice(8);\n                int total = buf.readUnsignedShort();\n                int current = buf.readUnsignedShort();\n                if (photo == null) {\n                    photo = Unpooled.buffer();\n                }\n                photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));\n                if (current < total - 1) {\n                    ByteBuf content = Unpooled.buffer();\n                    content.writeByte(subtype);\n                    content.writeByte(source);\n                    content.writeBytes(filename);\n                    content.writeShort(current + 1);\n                    ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n                    content.release();\n                    if (channel != null) {\n                        channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n                    }\n                } else {\n                    Position position = new Position(getProtocolName());\n                    position.setDeviceId(deviceSession.getDeviceId());\n                    getLastLocation(position, null);\n                    position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, \"jpg\"));\n                    photo.release();\n                    photo = null;\n                    return position;\n                }\n            }\n            return null;\n        } else if (type == MSG_IDENTIFICATION) {\n            ByteBuf content = Unpooled.buffer();\n            content.writeByte(1);\n            ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);\n            content.release();\n            if (channel != null) {\n                channel.writeAndFlush(new NetworkMessage(response, remoteAddress));\n            }\n            return null;\n        } else {\n            return decodeCommandResponse(deviceSession, type, buf);\n        }\n    }\n"}
{"bug_id": "traccar-traccar-3642b9520863", "buggy_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n", "fixed_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Long.parseLong(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-3dad196b882c", "buggy_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n", "fixed_code": "    private Position decodePosition(\n            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {\n        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);\n        if (deviceSession == null) {\n            return null;\n        }\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        int status = buf.readUnsignedShort();\n        position.setValid(BitUtil.check(status, 15));\n        position.set(Position.KEY_STATUS, status);\n        position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));\n        int event = buf.readUnsignedShort();\n        position.set(Position.KEY_ALARM, decodeAlarm(event));\n        position.set(Position.KEY_EVENT, event);\n        String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();\n        DateBuilder dateBuilder = new DateBuilder()\n                .setYear(Integer.parseInt(time.substring(0, 2)))\n                .setMonth(Integer.parseInt(time.substring(2, 4)))\n                .setDay(Integer.parseInt(time.substring(4, 6)))\n                .setHour(Integer.parseInt(time.substring(6, 8)))\n                .setMinute(Integer.parseInt(time.substring(8, 10)))\n                .setSecond(Integer.parseInt(time.substring(10, 12)));\n        position.setTime(dateBuilder.getDate());\n        position.setLongitude(buf.readInt() * 0.00001);\n        position.setLatitude(buf.readInt() * 0.00001);\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));\n        position.setCourse(buf.readUnsignedShort());\n        position.setAltitude(buf.readUnsignedShort());\n        position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);\n        Network network = new Network();\n        while (buf.readableBytes() > 4) {\n            int subtype = buf.readUnsignedShort();\n            int length = buf.readUnsignedShort() - 4;\n            int endIndex = buf.readerIndex() + length;\n            switch (subtype) {\n                case 0x0001:\n                    int coolantTemperature = buf.readUnsignedByte() - 40;\n                    if (coolantTemperature <= 215) {\n                        position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);\n                    }\n                    int rpm = buf.readUnsignedShort();\n                    if (rpm <= 65535) {\n                        position.set(Position.KEY_RPM, rpm);\n                    }\n                    position.set(\"averageSpeed\", buf.readUnsignedByte());\n                    buf.readUnsignedShort(); \n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);\n                    buf.readUnsignedInt(); \n                    if (buf.readerIndex() < endIndex) {\n                        position.set(\"adBlueLevel\", buf.readUnsignedByte() * 0.4);\n                    }\n                    break;\n                case 0x0005:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_HDOP, buf.readUnsignedByte());\n                    buf.readUnsignedInt(); \n                    break;\n                case 0x0009:\n                    position.set(\n                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());\n                    break;\n                case 0x0011:\n                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);\n                    break;\n                case 0x0014:\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);\n                    position.set(\"timingAdvance\", buf.readUnsignedByte() * 0.5);\n                    position.set(\"airTemp\", buf.readUnsignedByte() - 40);\n                    position.set(\"airFlow\", buf.readUnsignedShort() * 0.01);\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);\n                    break;\n                case 0x0020:\n                    String[] cells = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String cell : cells) {\n                        String[] values = cell.split(\"@\");\n                        network.addCellTower(CellTower.from(\n                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),\n                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));\n                    }\n                    break;\n                case 0x0021:\n                    String[] points = buf.readCharSequence(\n                            length, StandardCharsets.US_ASCII).toString().split(\"\\\\+\");\n                    for (String point : points) {\n                        String[] values = point.split(\"@\");\n                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));\n                    }\n                    break;\n                default:\n                    buf.skipBytes(length);\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {\n            position.setNetwork(network);\n        }\n        sendResponse(channel, MSG_POSITION_RSP, index, null);\n        return position;\n    }\n"}
{"bug_id": "traccar-traccar-4a64ef748e20", "buggy_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n", "fixed_code": "    private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {\n        Position position = new Position(getProtocolName());\n        position.setDeviceId(deviceSession.getDeviceId());\n        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));\n        decodeCoordinates(position, buf);\n        position.setAltitude(buf.readShort());\n        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));\n        position.setCourse(buf.readUnsignedShort());\n        position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));\n        if (buf.readableBytes() == 20) {\n            buf.skipBytes(4); \n            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);\n            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n            buf.readUnsignedInt(); \n            position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n            buf.skipBytes(3); \n            return position;\n        }\n        while (buf.readableBytes() > 2) {\n            int subtype = buf.readUnsignedByte();\n            int length = buf.readUnsignedByte();\n            int endIndex = buf.readerIndex() + length;\n            String stringValue;\n            switch (subtype) {\n                case 0x01:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);\n                    break;\n                case 0x02:\n                    position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0x2b:\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());\n                    break;\n                case 0x30:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    break;\n                case 0x31:\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0x33:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    if (stringValue.startsWith(\"*M00\")) {\n                        String lockStatus = stringValue.substring(8, 8 + 7);\n                        position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);\n                    }\n                    break;\n                case 0x56:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);\n                    buf.readUnsignedByte(); \n                    break;\n                case 0x60:\n                    position.set(Position.KEY_EVENT, buf.readUnsignedShort());\n                    buf.skipBytes(length - 2);\n                    break;\n                case 0x69:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x80:\n                    buf.readUnsignedByte(); \n                    endIndex = buf.writerIndex() - 2;\n                    decodeExtension(position, buf, endIndex);\n                    break;\n                case 0x91:\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);\n                    position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());\n                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);\n                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);\n                    buf.readUnsignedShort();\n                    buf.readUnsignedInt();\n                    buf.readUnsignedShort();\n                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);\n                    break;\n                case 0x94:\n                    if (length > 0) {\n                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                        position.set(Position.KEY_VIN, stringValue);\n                    }\n                    break;\n                case 0xA7:\n                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());\n                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());\n                    break;\n                case 0xAC:\n                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());\n                    break;\n                case 0xBC:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(\"driver\", stringValue.trim());\n                    break;\n                case 0xBD:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);\n                    break;\n                case 0xD0:\n                    long userStatus = buf.readUnsignedInt();\n                    if (BitUtil.check(userStatus, 3)) {\n                        position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);\n                    }\n                    break;\n                case 0xD3:\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    break;\n                case 0xD4:\n                case 0xE1:\n                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    break;\n                case 0xD5:\n                    if (length == 2) {\n                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);\n                    } else {\n                        int count = buf.readUnsignedByte();\n                        for (int i = 1; i <= count; i++) {\n                            position.set(\"lock\" + i + \"Id\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Card\", ByteBufUtil.hexDump(buf.readSlice(5)));\n                            position.set(\"lock\" + i + \"Battery\", buf.readUnsignedByte());\n                            int status = buf.readUnsignedShort();\n                            position.set(\"lock\" + i + \"Locked\", !BitUtil.check(status, 5));\n                        }\n                    }\n                    break;\n                case 0xDA:\n                    buf.readUnsignedShort(); \n                    int deviceStatus = buf.readUnsignedByte();\n                    position.set(\"string\", BitUtil.check(deviceStatus, 0));\n                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));\n                    position.set(\"cover\", BitUtil.check(deviceStatus, 3));\n                    break;\n                case 0xE6:\n                    while (buf.readerIndex() < endIndex) {\n                        int sensorIndex = buf.readUnsignedByte();\n                        buf.skipBytes(6); \n                        position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));\n                        position.set(\"humidity\" + sensorIndex, decodeCustomDouble(buf));\n                    }\n                    break;\n                case 0xEB:\n                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {\n                        Network network = new Network();\n                        int mcc = buf.readUnsignedShort();\n                        int mnc = buf.readUnsignedByte();\n                        while (buf.readerIndex() < endIndex) {\n                            network.addCellTower(CellTower.from(\n                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),\n                                    buf.readUnsignedByte()));\n                        }\n                        position.setNetwork(network);\n                    } else {\n                        while (buf.readerIndex() < endIndex) {\n                            int extendedLength = buf.readUnsignedShort();\n                            int extendedType = buf.readUnsignedShort();\n                            switch (extendedType) {\n                                case 0x0001:\n                                    position.set(\"fuel1\", buf.readUnsignedShort() * 0.1);\n                                    buf.readUnsignedByte(); \n                                    break;\n                                case 0x0023:\n                                    position.set(\"fuel2\", Double.parseDouble(\n                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));\n                                    break;\n                                case 0x00CE:\n                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);\n                                    break;\n                                case 0x00D8:\n                                    Network network = new Network();\n                                    network.addCellTower(CellTower.from(\n                                            buf.readUnsignedShort(), buf.readUnsignedByte(),\n                                            buf.readUnsignedShort(), buf.readUnsignedInt()));\n                                    position.setNetwork(network);\n                                    break;\n                                case 0xE1:\n                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                                    break;\n                                default:\n                                    buf.skipBytes(extendedLength - 2);\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n                case 0xED:\n                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();\n                    position.set(Position.KEY_CARD, stringValue.trim());\n                    break;\n                case 0xEE:\n                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());\n                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);\n                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());\n                    break;\n                case 0xF3:\n                    while (buf.readerIndex() < endIndex) {\n                        int extendedType = buf.readUnsignedShort();\n                        int extendedLength = buf.readUnsignedByte();\n                        switch (extendedType) {\n                            case 0x0002:\n                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0003:\n                                position.set(Position.KEY_RPM, buf.readUnsignedShort());\n                                break;\n                            case 0x0004:\n                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);\n                                break;\n                            case 0x0005:\n                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);\n                                break;\n                            case 0x0007:\n                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0008:\n                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0009:\n                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000B:\n                                position.set(\"intakePressure\", buf.readUnsignedShort());\n                                break;\n                            case 0x000C:\n                                position.set(\"intakeTemp\", buf.readUnsignedShort() - 40);\n                                break;\n                            case 0x000D:\n                                position.set(\"intakeFlow\", buf.readUnsignedShort());\n                                break;\n                            case 0x000E:\n                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);\n                                break;\n                            case 0x0050:\n                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));\n                                break;\n                            case 0x0100:\n                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0102:\n                                position.set(\"tripFuel\", buf.readUnsignedShort() * 0.1);\n                                break;\n                            case 0x0112:\n                                position.set(\"hardAccelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0113:\n                                position.set(\"hardDecelerationCount\", buf.readUnsignedShort());\n                                break;\n                            case 0x0114:\n                                position.set(\"hardCorneringCount\", buf.readUnsignedShort());\n                                break;\n                            default:\n                                buf.skipBytes(extendedLength);\n                                break;\n                        }\n                    }\n                    break;\n                case 0xFE:\n                    if (length == 1) {\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    } else if (length == 2) {\n                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);\n                    } else {\n                        int mark = buf.readUnsignedByte();\n                        if (mark == 0x7C) {\n                            while (buf.readerIndex() < endIndex) {\n                                int extendedType = buf.readUnsignedByte();\n                                int extendedLength = buf.readUnsignedByte();\n                                switch (extendedType) {\n                                    case 0x01:\n                                        long alarms = buf.readUnsignedInt();\n                                        if (BitUtil.check(alarms, 0)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);\n                                        }\n                                        if (BitUtil.check(alarms, 1)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);\n                                        }\n                                        if (BitUtil.check(alarms, 2)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);\n                                        }\n                                        if (BitUtil.check(alarms, 3)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);\n                                        }\n                                        if (BitUtil.check(alarms, 4)) {\n                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);\n                                        }\n                                        break;\n                                    default:\n                                        buf.skipBytes(extendedLength);\n                                        break;\n                                }\n                            }\n                        }\n                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());\n                    }\n                    break;\n                default:\n                    break;\n            }\n            buf.readerIndex(endIndex);\n        }\n        return position;\n    }\n"}
