{"bug_id": "GREATEST_COMMON_DIVISOR", "patches": ["public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "public static int greatest_common_divisor(int a, int b) {\n    while (b > 0) {\n        int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }", "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}", "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }", "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }", "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            a = b;\n            b = a % b;\n        }\n        return a;\n    }\n"}
{"bug_id": "MAKE_A_PILE", "patches": ["\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif (n - 2 * i <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpile.add(n - 2 * i);\n\t\t}\n\t\treturn pile;\n\t}", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(Math.abs(n - 2 * i));\n\t\t}\n\t\treturn pile;\n\t}", "    public static ArrayList<Integer> make_a_pile(int n) {\n        ArrayList<Integer> pile = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++) {\n            int num = n - 2 * i;\n            if(num >= 0) {\n                pile.add(num);\n            }\n        }\n        return pile;\n    }", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(i * 2);\n\t\t}\n\t\treturn pile;\n\t}", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// fixed code\n\t\t\tpile.add(n - i);\n\t\t}\n\t\treturn pile;\n\t}", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\t// corrected code\n\t\t\tpile.add(n - i);\n\t\t}\n\t\treturn pile;\n\t}", "    public static ArrayList<Integer> make_a_pile(int n) {\n        ArrayList<Integer> pile = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++) {\n            pile.add(n - i);\n        }\n        return pile;\n    }", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(Math.abs(n - 2 * i));\n\t\t}\n\t\treturn pile;\n\t}", "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - i);\n\t}\n\treturn pile;\n}", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint newElement = n - 2 * i;\n\t\t\tif (newElement >= 0) {\n\t\t\t\tpile.add(newElement);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn pile;\n\t}"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(n - 2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n"}
{"bug_id": "MIN_SUBARRAY_SUM", "patches": ["    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n            s -= num;\n            if(s > 0) {\n                s = 0;\n            }\n            max_sum = Math.min(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.min(max_sum, nums.get(i));\n            }\n        }\n        long min_sum = max_sum;\n        return min_sum;\n    }", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long min_sum = Long.MAX_VALUE;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s > num) {\n                s = num;\n            }\n            min_sum = Math.min(s, min_sum);\n        }\n        if(min_sum == Long.MAX_VALUE) {\n            min_sum = nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                min_sum = Math.min(min_sum, nums.get(i));\n            }\n        }\n        return min_sum;\n    }", "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = Long.MAX_VALUE;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > 0) {\n            s = 0;\n        }\n        min_sum = Math.min(s, min_sum);\n    }\n    if(min_sum == Long.MAX_VALUE) {\n        min_sum = nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            min_sum = Math.min(min_sum, nums.get(i));\n        }\n    }\n    return min_sum;\n}", "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > 0) {\n            s = 0;\n        }\n        max_sum = Math.min(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.min(max_sum, nums.get(i));\n        }\n    }\n    long min_sum = max_sum;\n    return min_sum;\n}", "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = nums.get(0);\n    long s = nums.get(0);\n    for(int i = 1; i < nums.size(); i++) {\n        if(s > 0) {\n            s = nums.get(i);\n        } else {\n            s += nums.get(i);\n        }\n        min_sum = Math.min(min_sum, s);\n    }\n    return min_sum;\n}", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long min_sum = nums.get(0);\n        long s = nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            long num = nums.get(i);\n            s = Math.min(s + num, num);\n            min_sum = Math.min(s, min_sum);\n        }\n        return min_sum;\n    }", "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s -= num;\n        if(s > 0) {\n            s = 0;\n        }\n        min_sum = Math.min(s, min_sum);\n    }\n    if(min_sum == 0) {\n        min_sum = nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            min_sum = Math.min(min_sum, nums.get(i));\n        }\n    }\n    return min_sum;\n}", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long min_sum = Long.MAX_VALUE;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s > 0) {\n                s = num;\n            }\n            min_sum = Math.min(s, min_sum);\n        }\n        if(min_sum == Long.MAX_VALUE) {\n            min_sum = nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                min_sum = Math.max(min_sum, nums.get(i));\n            }\n        }\n        return min_sum;\n    }", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long min_sum = Long.MAX_VALUE;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s > 0) {\n                s = 0;\n            }\n            min_sum = Math.min(s, min_sum);\n        }\n        if(min_sum == Long.MAX_VALUE) {\n            min_sum = nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                min_sum = Math.min(min_sum, nums.get(i));\n            }\n        }\n        return min_sum;\n    }", "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long min_sum = Long.MAX_VALUE;\n    long s = 0;\n    for(long num : nums) {\n        s = Math.min(s+num, num);\n        if(s > 0) {\n            s = 0;\n        }\n        min_sum = Math.min(s, min_sum);\n    }\n    if(min_sum == 0) {\n        min_sum = nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            min_sum = Math.min(min_sum, nums.get(i));\n        }\n    }\n    return min_sum;\n}"], "test_results": ["Test fail", "Plausible", "Test fail", "Plausible", "Plausible", "Plausible", "Test fail", "Test fail", "Test fail", "Plausible"], "buggy_code": "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n"}
{"bug_id": "ISCUBE", "patches": ["    public static boolean iscude(int a) {\n        // Check for negative numbers\n        if (a < 0) {\n            return false;\n        }\n\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }", "    public static boolean isCube(int a) {\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }", "public static boolean isCube(int a) {\n    double root = Math.pow(a, 1./3);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n    return ((int) Math.pow(round_root, 3)) == a;\n}", "    public static boolean isCube(int a) {\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }", "    public static boolean isCube(int a) {\n        double root = Math.cbrt(a);\n        BigDecimal bd = new BigDecimal(root);\n        int roundedRoot = bd.setScale(0, RoundingMode.HALF_UP).intValue();\n\n        return Math.pow(roundedRoot, 3) == a;\n    }", "public static boolean isCube(int a) {\n    double root = Math.cbrt(a);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int roundRoot = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n    return ((int) Math.pow(roundRoot, 3)) == a;\n}", "    public static boolean isCube(int a) {\n        double root = Math.cbrt(a);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }", "public static boolean iscude(int a) {\n    // Calculate cube root\n    double root = Math.cbrt(a);\n     \n    // Round off the value to the nearest integer\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n    // Check if the cube of the rounded value is equal to the original number\n    return ((int) Math.pow(round_root, 3)) == a;\n}", "public static boolean isCube(int a) {\n    double root = Math.pow(a, 1./3);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n    return ((int) Math.pow(round_root, 3)) == a;\n}", "    public static boolean iscude(int a) {\n        // check if the number is negative\n        if(a < 0)\n            return false;\n\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n        return ((int) Math.pow(round_root, 3)) == a;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Plausible", "Compile fail", "Test fail"], "buggy_code": "    public static boolean iscude(int a) {\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n"}
{"bug_id": "MULTIPLY", "patches": ["public static int multiply(int a, int b) {\n    // fixed code\n    return a * b;\n}", "public static int multiply(int a, int b) {\n    return a * b;\n}", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "    public static int multiply(int a, int b) {\n        return a * b;\n    }", "public static int multiply(int a, int b) {\n    return a * b;\n}", "    public static int multiply(int a, int b) {\n        return a * b;\n    }"], "test_results": ["Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"], "buggy_code": "    public static int multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }\n"}
{"bug_id": "REMOVE_DUPLICATES", "patches": ["    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// corrected code\n// \n            count.put(n, count.getOrDefault(n, 0) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }", "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    \n    for (Integer n : numbers){\n        // Fixed code\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n\n    return result;\n}", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            if (count.containsKey(n))\n                count.put(n, count.get(n) + 1);\n            else\n                count.put(n, 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            if (count.get(n) == null)\n                count.put(n, 1);\n            else\n                count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }", "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    \n    for (Integer n : numbers){\n        if(count.get(n) == null) {\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n\n    return result;\n}", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            if (count.containsKey(n)) {\n                count.put(n, count.get(n) + 1);\n            } else {\n                count.put(n, 1);\n            }\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }", "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    \n    for (Integer n : numbers){\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n\n    return result;\n}", "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\n    for (Integer n : numbers){\n        // fixed code\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n\n    return result;\n}", "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\n    for (Integer n : numbers){\n        if (!count.containsKey(n)) {\n            count.put(n, 0);\n        }\n        count.put(n, count.get(n) + 1);\n    }\n\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n\n    return result;\n}", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            if (!count.containsKey(n)) {\n                count.put(n, 0);\n            }\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }"], "test_results": ["Semantical match", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Compile fail", "Semantical match", "Semantical match"], "buggy_code": "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "SORT_NUMBERS", "patches": ["public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    // Use a customized comparator to sort the array based on the HashMap\n    Collections.sort(number_array, new Comparator<String>() {\n        @Override\n        public int compare(String o1, String o2) {\n            return value_map.get(o1) - value_map.get(o2);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}", "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        @Override\n        public int compare(String o1, String o2) {\n            return value_map.get(o1) - value_map.get(o2);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}", "    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return value_map.get(s1) - value_map.get(s2);\n        }\n    });", "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n        @Override\n        public int compare(String o1, String o2) {\n            return value_map.get(o1) - value_map.get(o2);\n        }\n    });\n    \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}", "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return value_map.get(s1) - value_map.get(s2);\n        }\n    });\n    \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        \n        Collections.sort(number_array, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return value_map.get(o1) - value_map.get(o2);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }", "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return value_map.get(s1) - value_map.get(s2);\n        }\n    });\n    \n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}", "Collections.sort(number_array, new Comparator<String>() {\n    @Override\n    public int compare(String s1, String s2) {\n        return value_map.get(s1) - value_map.get(s2);\n    }\n});", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array, (a, b) -> value_map.get(a) - value_map.get(b));\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// replacement for the buggy code\n        Collections.sort(number_array, new Comparator<String>() {\n            @Override\n            public int compare(String str1, String str2) {\n                return value_map.get(str1) - value_map.get(str2);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }"], "test_results": ["Test fail", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match", "Semantical match"], "buggy_code": "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array);\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n"}
{"bug_id": "TRI", "patches": ["    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = 2;\n        for(int i = 2; i <= n; i++) {\n            sequence[i] = sequence[i-1] + i;\n        }\n        return sequence;\n\n    }", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 0;\n        return sequence;\n    }\n    sequence[0] = 0;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + i;\n    }\n    return sequence;\n}", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 0;\n        return sequence;\n    }\n    sequence[0] = 0;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = i * (i + 1) / 2;\n    }\n    return sequence;\n}", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        for(int i = 1; i <= n; i++) {\n            sequence[i] = sequence[i - 1] + i;\n        }\n        return sequence;\n    }", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = 3;\n        for(int i = 2; i <= n; i++) {\n            sequence[i] = sequence[i - 1] + i + 1;\n        }\n        return sequence;\n    }", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + i;\n    }\n    return sequence;\n}", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = 3;\n        for(int i = 2; i <= n; i++) {\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + i + 1;\n        }\n        return sequence;\n    }", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 0;\n        return sequence;\n    }\n    sequence[0] = 0;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + i;\n    }\n    return sequence;\n}", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2;\n        else sequence[i] = i;\n    }\n    return sequence;\n}", "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + i;\n    }\n    return sequence;\n}"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = -3;\n        for(int i = 2; i < n - 1; i--) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n"}
{"bug_id": "INTERSPERSE", "patches": ["    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}", "    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimiter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n\n        for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        // corrected code\n        for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }", "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    if (numbers.size() == 0)\n        return result;\n    \n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail"], "buggy_code": "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size(); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n"}
{"bug_id": "COMMON", "patches": ["    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>();\n        \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}", "public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "    public static int[] common(int[] l1, int[] l2) {\n// fixed code\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1) {\n            for (int j = 0; j < l2.length; j += 1) {\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }", "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>();\n    \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    \n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    \n    Arrays.sort(result);\n    return result;\n}", "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>();\n        \n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n"}
{"bug_id": "COMPARE", "patches": ["public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n        if(guess[i] != 0){\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0; // Or whatever value you want to assign when guess[i] is 0\n        }\n    }\n\n    return result;\n}", "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n// fixed code\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0; // or whatever value you want to assign when guess[i] is zero\n        }\n    }\n\n    return result;\n}", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            if (guess[i] != 0) {\n                result[i] = Math.floorDiv(game[i], guess[i]);\n            } else {\n                result[i] = 0;  // or whatever you want to return in this case\n            }\n        }\n\n        return result;\n    }", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// fixed code\n            if(guess[i] != 0) {\n                result[i] = Math.floorDiv(game[i], guess[i]);\n            } else {\n                result[i] = 0; // or any default value\n            }\n        }\n\n        return result;\n    }", "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n        if (guess[i] != 0) {\n           result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n           result[i] = 0; // or some other value, depending on what you want to do when guess[i] is zero\n        }\n    }\n    return result;\n}", "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0; // Or whatever value you wish to assign when the divisor is zero.\n        }\n    }\n\n    return result;\n}", "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;\n        }\n    }\n\n    return result;\n}", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            if (game[i] == guess[i]) {\n                result[i] = 1;\n            } else {\n                result[i] = 0;\n            }\n        }\n\n        return result;\n    }", "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n\n    for (int i = 0; i < game.length; i += 1) {\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;  // or any default value or error message\n        }\n    }\n\n    return result;\n}", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            if (guess[i] != 0) {\n                result[i] = Math.floorDiv(game[i], guess[i]);\n            } else {\n                result[i] = 0; // or any default value\n            }\n        }\n\n        return result;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "SELECT_WORDS", "patches": ["public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    \n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            \n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            \n            if(consonant) num_consonants++;\n        }\n        \n        if(num_consonants == n) result.add(words[i]);\n    }\n    \n    return result;\n}", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }", "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}", "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}", "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == Character.toLowerCase(words[i].charAt(j))) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }", "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}", "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        \n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == Character.toLowerCase(words[i].charAt(j))) {\n                    consonant = false;\n                    break;\n                }\n            }\n\n            if(consonant) num_consonants++;\n        }\n\n        if(num_consonants == n) result.add(words[i]);\n    }\n    \n    return result;\n}", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == Character.toLowerCase(words[i].charAt(j))) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n"}
{"bug_id": "EXCHANGE", "patches": ["public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    // fixed code\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n\n        if(even >= odd) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }"], "test_results": ["Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match"], "buggy_code": "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst2) {\n            if((i % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n"}
{"bug_id": "SIMPLIFY", "patches": ["    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (numerator % denom == 0)\n            return true;\n        return false;\n    }", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        if (b == 0 || d == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed\");\n        }\n\n        int numerator = a * c;\n        int denom = b * d;\n\n        return true;\n    }", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        // Cross multiplication\n        int crossProduct1 = a * d;\n        int crossProduct2 = b * c;\n        \n        // Check if cross products are equal\n        if (crossProduct1 == crossProduct2)\n            return true;\n        return false;\n    }", "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator % denom == 0)\n        return true;\n    return false;\n}", "public static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\npublic static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n\n    int num1 = a / gcd(a, b);\n    int den1 = b / gcd(a, b);\n    int num2 = c / gcd(c, d);\n    int den2 = d / gcd(c, d);\n\n    return num1 == num2 && den1 == den2;\n}", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n\n        if (numerator % denom == 0)\n            return true;\n        return false;\n    }", "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n\n    int numerator = a * c;\n    int denom = b * d;\n\n    if ((double) numerator / denom == numerator / denom)\n        return true;\n    return false;\n}", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (numerator % denom == 0)\n            return true;\n        return false;\n    }", "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n\n    return (double) a / b == (double) c / d;\n}", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        return (a * d) == (b * c);\n    }"], "test_results": ["Semantical match", "Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Semantical match", "Semantical match", "Test fail", "Test fail"], "buggy_code": "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (numerator / denom == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n"}
{"bug_id": "CHANGE_BASE", "patches": ["public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = Integer.toString(x % base) + result;\n        x = x / base;\n    }\n    return result;\n}", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = x % base + result;\n        x = x / base;\n    }\n    return result;\n}", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n}", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = Integer.toString(x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = result + x % base;\n            x = x / base;\n        }\n        return new StringBuilder(result).reverse().toString();\n    }", "public static String change_base(int x, int base) {\n    String result = \"\";\n\n    while (x > 0) {\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Test fail", "Test fail"], "buggy_code": "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = result + x % base;\n            x = x - x / base;\n        }\n        return result;\n    }\n"}
{"bug_id": "SUM_SQUARES", "patches": ["public static int sum_squares(int[] lst) {\n    int result = 0;\n\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else \n            result += lst[i];\n    }\n    return result;\n}", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n        }\n        return result;\n    }", "public static int sum_squares(int[] lst) {\n    int result = 0;\n\n    for (int i = 0; i < lst.length; i += 1){\n        if (lst[i] % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (lst[i] % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }", "public static int sum_squares(int[] lst) {\n    int result = 0;\n\n    for (int i = 0; i < lst.length; i += 1){\n        if (lst[i] % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (lst[i] % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}", "public static int sum_squares(int[] lst) {\n    int result = 0;\n\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else\n                result += lst[i];\n        }\n        return result;\n    }", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }", "public static int sum_squares(int[] lst) {\n    int result = 0;\n\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else \n            result += lst[i];\n    }\n    return result;\n}", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n"}
{"bug_id": "ENCODE", "patches": ["    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }"], "test_results": ["Test fail", "Test fail", "Semantical match", "Test fail", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Test fail", "Test fail"], "buggy_code": "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "IS_MULTIPLY_PRIME", "patches": ["    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }", "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }", "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}", "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}", "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                // corrected code\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"], "buggy_code": "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; j += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "SOLVE", "patches": ["public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}", "    public static String solve(int N) {\n        int sum = 0;\n        String nStr = Integer.toString(N);\n        for (int i = 0; i < nStr.length(); i++){\n            sum += Character.getNumericValue(nStr.charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Character.getNumericValue((N + \"\").charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }", "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}", "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf((N + \"\").charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}", "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Character.getNumericValue((N + \"\").charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }", "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}", "    public static String solve(int N) {\n        int sum = 0;\n        String NString = Integer.toString(N);\n        for (int i = 0; i < NString.length(); i++){\n            sum += Character.getNumericValue(NString.charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Character.getNumericValue((N + \"\").charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Integer.parseInt((N + \"\").substring(i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n"}
{"bug_id": "FILTER_BY_SUBSTRING", "patches": ["    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if(string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }", "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if (string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }", "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}", "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}", "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if (string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if(string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }", "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Compile fail", "Test fail", "Compile fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            result.add(string);\n        }\n        return result;\n    }\n"}
{"bug_id": "PRIME_FIB", "patches": ["    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len - 2));\n            \n            if (is_prime(fib.get(len))) {\n                n -= 1;\n            }\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }", "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 2) + fib.get(len - 1));\n        if (is_prime(fib.get(len)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}", "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 2) + fib.get(len - 1));\n        if (is_prime(fib.get(len)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}", "fib.add(fib.get(len - 1) + fib.get(len));", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len - 2));\n            if (is_prime(fib.get(len)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(len);\n        }\n    }", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n       while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 2) + fib.get(len - 1));\n            if (is_prime(fib.get(len))) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return fib.get(fib.size() - 1);\n            }\n        }\n    }\n\n    public static boolean is_prime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }", "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (is_prime(fib.get(len)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len - 2));\n            if (is_prime(fib.get(len)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len - 2));\n            if (is_prime(fib.get(len))) {\n                n -= 1;\n            }\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }", "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (is_prime(fib.get(len)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len));\n            if (is_prime(fib.get(len - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n"}
{"bug_id": "FIZZ_BUZZ", "patches": ["public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String iStr = String.valueOf(i);\n            for (int j = 0; j < iStr.length(); j += 1){\n                if (Character.getNumericValue(iStr.charAt(j)) == 7) {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String strI = Integer.toString(i);\n            if (strI.contains(\"7\")){\n                result += 1;\n            }\n        }\n    }\n    return result;\n}", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String numStr = Integer.toString(i);\n            for (int j = 0; j < numStr.length(); j += 1){\n                if (numStr.substring(j, j + 1).equals(\"7\")) {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = Integer.toString(i);\n                for (int j = 0; j < numStr.length(); j += 1){\n                    if (numStr.charAt(j) == '7'){\n                        result += 1;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String s = String.valueOf(i);\n            for (int j = 0; j < s.length(); j += 1){\n                if (s.substring(j, j + 1).equals(\"7\")) {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String number = Integer.toString(i);\n            if (number.contains(\"7\")){\n                result += 1;\n            }\n        }\n    }\n    return result;\n}", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            String numStr = Integer.toString(i);\n            for (int j = 0; j < numStr.length(); j += 1) {\n                if (numStr.substring(j, j + 1).equals(\"7\")){\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < String.valueOf(i).length(); j += 1){\n                    if (String.valueOf(i).substring(j, j + 1).equals(\"7\")) {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            String numberStr = Integer.toString(i);\n            for (int j = 0; j < numberStr.length(); j += 1){\n                if (numberStr.charAt(j) == '7') {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}", "public static int fizz_buzz(int n) {\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < String.valueOf(i).length(); j += 1){\n                if (String.valueOf(i).substring(j, j + 1).equals(\"7\")) {\n                    result += 1;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}"], "test_results": ["Semantical match", "Test fail", "Semantical match", "Test fail", "Semantical match", "Test fail", "Test fail", "Semantical match", "Semantical match", "Test fail"], "buggy_code": "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < i + \"\".length(); j += 1){\n                    if (i + \"\".substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "CAR_RACE_COLLISION", "patches": ["public static int car_race_collision(int n) {\n    return n * 10;\n}", "    public static int car_race_collision(int n) {\n        // number of possible collision pairs is n*(n-1)/2\n        return n*(n-1)/2;\n    }", "    public static int car_race_collision(int n) {\n        return n * n;\n    }", "    public static int car_race_collision(int n) {\n        return n * n;\n    }", "public static int car_race_collision(int n) {\n    return n * n;\n}", "    public static int car_race_collision(int n) {\n        int collisions = n * (n - 1) / 2;  // This could represent the maximum number of possible collisions, assuming each car could collision with each other once.\n        return collisions;\n    }", "    public static int car_race_collision(int n) {\n        return n * 2;\n    }", "public static int car_race_collision(int n) {\n    return n * n;\n}", "    public static int car_race_collision(int n) {\n        return 2 * n;\n    }", "    public static int car_race_collision(int n) {\n        if (n <= 1) {\n            return 0; // no collision can occur with only one or no cars\n        } else {\n            // assuming each car has a potential to collide with every other car\n            return n * (n - 1) / 2;\n        }\n    }"], "test_results": ["Test fail", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Test fail", "Semantical match", "Test fail", "Compile fail"], "buggy_code": "    public static int car_race_collision(int n) {\n        return n;\n    }\n"}
{"bug_id": "REVERSE_DELETE", "patches": ["public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(!s.substring(i, i + 1).equals(c)) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) != c.charAt(0)) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "        if(s.charAt(i) != c.charAt(0)) {", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        // fixing the bug by checking if the current character is not equal to c\n        if(!s.substring(i, i+1).equals(c)) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        // fixed code\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        // corrected code\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}", "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}"], "test_results": ["Semantical match", "Test fail", "Test fail", "Semantical match", "Semantical match", "Compile fail", "Test fail", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(c.indexOf(s.charAt(i)) != -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n"}
{"bug_id": "ODD_COUNT", "patches": ["public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            // Fixed code\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements in the string is \" + n + \".\");\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            // Fixed code\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements in the string is \" + n + \".\");\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements in the string is \" + n);\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements is \" + n + \" in the string \" + s + \".\");\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements is \" + n + \" in the string: \" + s);\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements is \" + n + \" in the string \" + s + \" of the input.\");\n    }\n    return result;\n}", "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd digits in the string '\" + s + \"' is \" + n + \".\"); \n    }\n    return result;\n}", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \" in the string \" + s + \" of the input.\");\n        }\n        return result;\n    }", " public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 != 0) {\n                    n++;\n                }\n            }\n            result.add(\"The number of odd elements in the string \\\"\" + s + \"\\\" is \" + n + \".\");\n        }\n        return result;\n    }", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 != 0) {\n                    n++;\n                }\n            }\n            result.add(\"The number of odd digits in the string \" + s + \" is \" + n + \".\");\n        }\n        return result;\n    }"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail"], "buggy_code": "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 == 0) {\n                    n--;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n"}
{"bug_id": "HEX_KEY", "patches": ["    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7'){\n                result += 1;\n            }\n        }\n        return result;\n    }", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }", "            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                result += 1;", "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7') {\n            result += 1;\n        }\n    }\n    return result;\n}", "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7') {\n            result += 1;\n        }\n    }\n    return result;\n}", "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7') {\n            result += 1;\n        }\n    }\n    return result;\n}", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// fixed code\n            if (c == '2' || c == '3' || c == '5' || c == '7') {\n                result += 1;\n            }\n        }\n        return result;\n    }", "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7'){\n                result += 1;\n            }\n        }\n        return result;\n    }", "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' || c == 'F')\n            result += 1;\n    }\n    return result;\n}"], "test_results": ["Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n"}
{"bug_id": "CORRECT_BRACKETING", "patches": ["", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }", "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}", "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}", "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}", "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n    }\n    return depth == 0;\n}", "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }"], "test_results": ["Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match", "Compile fail"], "buggy_code": "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth >= 0)\n                return true;\n        }\n        return false;\n    }\n"}
{"bug_id": "GET_ODD_COLLATZ", "patches": ["public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n > 1) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 1) {\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n > 1) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    while(n != 1) {\n        if((n % 2) == 1){\n            result.add(n);\n            n = 3 * n + 1;\n        }\n        else{\n            n /= 2;\n        }\n    }\n    if((n % 2) == 1) result.add(n);\n    Collections.sort(result);\n    return result;\n}", "    while(n > 1) {\n            if((n % 2) == 0) n /= 2;", "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}"], "test_results": ["Semantical match", "Semantical match", "Plausible", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Plausible", "Compile fail", "Semantical match"], "buggy_code": "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n >= 1) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n"}
{"bug_id": "NUMERICAL_LETTER_GRADE", "patches": ["public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}", "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}", "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa >= 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa >= 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa >= 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa >= 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa >= 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa >= 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa >= 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa >= 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa >= 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa >= 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa >= 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }", "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    \n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }", "else if (gpa > 1.7)\n    letter_grade[i] = \"C\";\nelse if (gpa > 1.3)\n    letter_grade[i] = \"C-\";\nelse if (gpa > 1.0)\n    letter_grade[i] = \"D+\";", "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}"], "test_results": ["Semantical match", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match"], "buggy_code": "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n"}
{"bug_id": "TRIANGLE_AREA", "patches": ["public static double triangle_area(double a, double h) {\n    return (a * h) / 2;\n}", "    public static double triangle_area(double a, double h) {\n        return (a * h) / 2;\n    }", "    public static double triangle_area(double a, double h) {\n        return (a * h)/2;\n    }", "public static double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }", "    public static double triangle_area(double a, double h) {\n        return (a * h) / 2;\n    }", "    public static double triangle_area(double a, double h) {\n        return (a * h) / 2;\n    }", "public static double triangle_area(double a, double h) {\n    return 0.5 * a * h;\n}", "    public static double triangle_area(double a, double h) {\n        return (a * h) / 2;\n    }", "public static double triangle_area(double a, double h) {\n    return 0.5 * a * h;\n}", "    public static double triangle_area(double a, double h) {\n        return 0.5 * a * h;\n    }"], "test_results": ["Semantical match", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static double triangle_area(double a, double h) {\n        return a * h;\n    }\n"}
{"bug_id": "TRIANGLE_AREA_2", "patches": ["public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    double s = (a + b + c) / 2.;\n    // corrected code\n    double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    double s = (a + b + c) / 2.;\n    // buggy code\n    // double result = Math.pow(s, 0.5);\n    double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    \n    double s = (a + b + c) / 2.;\n    \n    // bug fixed, correctly apply Heron's formula\n    double result = Math.sqrt(s*(s - a)*(s - b)*(s - c));\n    \n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.sqrt(s * (s-a) * (s-b) * (s-c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }", "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n        \n    double s = (a + b + c) / 2.0;\n\n    double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    double s = (a + b + c) / 2.;\n    // Correct Heron's formula\n    double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        // Heron's formula\n        double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.0;\n        double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }", "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n\n    double s = (a + b + c) / 2.0;\n\n    // Correct code\n    double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match", "Semantical match"], "buggy_code": "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.pow(s, 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n"}
{"bug_id": "STRANGE_SORT_LIST", "patches": ["    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer minVal = Collections.min(lst);\n                result.add(minVal);\n                lst.remove(minVal);\n            } else {\n                Integer maxVal = Collections.max(lst);\n                result.add(maxVal);\n                lst.remove(maxVal);\n            }\n            \n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer min = Collections.min(lst);\n                result.add(min);\n                lst.remove(min);\n            } else {\n                Integer max = Collections.max(lst);\n                result.add(max);\n                lst.remove(max);\n            }\n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer minValue = Collections.min(lst);\n                result.add(minValue);\n                lst.remove(minValue);\n            } else {\n                Integer maxValue = Collections.max(lst);\n                result.add(maxValue);\n                lst.remove(maxValue);\n            }\n\n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer minVal = Collections.min(lst);\n                result.add(minVal);\n                lst.remove(minVal);\n            } else {\n                Integer maxVal = Collections.max(lst);\n                result.add(maxVal);\n                lst.remove(maxVal);\n            }\n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer min = Collections.min(lst);\n                result.add(min);\n                lst.remove(min);\n                switched = false;\n            } else {\n                Integer max = Collections.max(lst);\n                result.add(max);\n                lst.remove(max);\n                switched = true;\n            }\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                int min = Collections.min(lst);\n                result.add(min);\n                lst.remove((Integer) min);\n            } else {\n                int max = Collections.max(lst);\n                result.add(max);\n                lst.remove((Integer) max);\n            }\n            \n            switched = !switched;\n        }\n\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            Integer toAdd;\n            if (switched) {\n                toAdd = Collections.min(lst);\n            } else {\n                toAdd = Collections.max(lst);\n            }\n            result.add(toAdd);\n            lst.remove(toAdd);\n            \n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer min = Collections.min(lst);\n                result.add(min);\n                lst.remove(min);\n            } else {\n                Integer max = Collections.max(lst);\n                result.add(max);\n                lst.remove(max);\n            }\n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                Integer minVal = Collections.min(lst);\n                result.add(minVal);\n                lst.remove(minVal);\n            } else {\n                Integer maxVal = Collections.max(lst);\n                result.add(maxVal);\n                lst.remove(maxVal);\n            }\n            switched = !switched;\n        }\n        return result;\n    }", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n                lst.remove(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n                lst.remove(Collections.max(lst));\n            }\n            switched = !switched;\n        }\n        return result;\n    }"], "test_results": ["Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible"], "buggy_code": "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "FIB4", "patches": ["    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(i - 1) + result.get(i - 2) + result.get(i - 3) + result.get(i - 4)\n            );\n        }\n        return result.get(result.size() - 1);\n    }", "public static int fib(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n\n    if (n < 2)\n        return result.get(n);\n    for (int i = 2; i < n + 1; i++) {\n        result.add(\n            result.get(i - 1) + result.get(i - 2)\n        );\n    }\n    return result.get(result.size() - 1);\n}", "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0); // fib(0)\n    result.add(1); // fib(1)\n    \n    if (n < 2)\n        return result.get(n);\n    for (int i = 2; i < n + 1; i += 1) {\n        result.add(result.get(i - 1) + result.get(i - 2));\n    }\n    return result.get(result.size() - 1);\n}", "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n    result.add(1);\n    result.add(2);\n\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(i-1) + result.get(i-2) + result.get(i-3) + result.get(i-4)\n        );\n    }\n    return result.get(result.size() - 1);\n}", "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0); // fib(0)\n    result.add(1); // fib(1)\n    result.add(1); // fib(2)\n    result.add(2); // fib(3)\n\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(i - 1) + result.get(i - 2) + result.get(i - 3) + result.get(i - 4)\n        );\n    }\n    return result.get(result.size() - 1);\n}", "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n    \n    if (n < 2)\n        return result.get(n);\n    for (int i = 2; i < n + 1; i++) {\n        result.add(\n            result.get(i-1) + result.get(i-2)\n        );\n    }\n    return result.get(result.size() - 1);\n}", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(1);\n        result.add(2);\n        result.add(3);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(i - 4) + result.get(i - 3) + result.get(i - 2) + result.get(i - 1)\n            );\n        }\n        return result.get(result.size() - 1);\n    }", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(1);\n        result.add(2);\n        result.add(3);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(i-1) + result.get(i-2) + result.get(i-3) + result.get(i-4)\n            );\n// fixed code\n// \n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(1);\n        result.add(1);\n        result.add(2);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(result.size() - 1) + result.get(result.size() - 2)\n            );\n           \n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }", "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(1);\n    result.add(1);\n    result.add(2);\n\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(i - 1) + result.get(i - 2) + result.get(i - 3) + result.get(i - 4)\n        );\n    }\n    return result.get(result.size() - 1);\n}"], "test_results": ["Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n        }\n        return result.get(result.size() - 1);\n    }\n"}
{"bug_id": "CHECK_IF_LAST_CHAR_IS_A_LETTER", "patches": ["public static boolean check_if_last_char_is_a_letter(String txt) {\n    if(txt.isEmpty()) return false;\n\n    String[] parts = txt.trim().split(\" \");\n    String last = parts[parts.length - 1];\n    char lastChar = last.charAt(last.length() - 1);\n    int lastCharPos = Character.toUpperCase(lastChar) - 'A';\n    return 0 <= lastCharPos && lastCharPos <= 25;\n}", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n\n        String last = \" \";\n        if(txt.length() != 0) {\n            char lastChar = txt.charAt(txt.length() - 1);\n            last = Character.toString(lastChar);\n            if(Character.isWhitespace(lastChar)) last = \" \";\n        }\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n        return (last.length() == 1) && (0 <= last_char_pos && last_char_pos <= 25);\n    }", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        if(txt == null || txt.equals(\"\")) {\n            return false;\n        }\n        String[] parts = txt.trim().split(\" \");\n        String last = parts[parts.length - 1];\n        char lastChar = last.charAt(last.length() - 1);\n        return Character.isLetter(lastChar);\n    }", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n        last = parts[parts.length - 1].trim();\n        if(txt.length() == 0) last = \" \";\n        char lastChar = last.charAt(last.length() - 1);\n        int last_char_pos = Character.toUpperCase(lastChar) - 'A';\n        return (last.length() > 0) && (0 <= last_char_pos && last_char_pos < 26);\n    }", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        if(txt == null || txt.length() == 0) \n            return false;\n\n        String[] parts = txt.trim().split(\"\\\\s+\");\n        String last = parts[parts.length - 1];\n        char lastChar = last.charAt(last.length() - 1);\n        return Character.isLetter(lastChar);\n    }", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.trim().split(\" \");\n        String last = \" \";\n        if (parts.length > 0) {\n            last = parts[parts.length - 1];\n        }\n        if (last.length() > 0) {\n            char lastChar = last.charAt(last.length() - 1);\n            int last_char_pos = Character.toUpperCase(lastChar) - 'A';\n            return (0 <= last_char_pos) && (last_char_pos <= 25);\n        }\n        return false;\n    }", "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String last;\n    if(txt.length() > 0) {\n        last = String.valueOf(txt.charAt(txt.length() - 1));\n    } else {\n        return false;\n    }\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (0 <= last_char_pos && last_char_pos <= 25);\n}", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.trim().split(\" \");\n        String last = parts[parts.length - 1];\n        char lastChar = last.charAt(last.length() - 1);\n        return Character.isLetter(lastChar);\n    }", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.trim().split(\" \");\n        String last = parts[parts.length - 1];\n\n        char lastChar = last.charAt(last.length() - 1);\n        int last_char_pos = Character.toUpperCase(lastChar) - 'A';\n        return (last.length() >= 1) && (0 <= last_char_pos && last_char_pos <= 25);\n    }", "public static boolean check_if_last_char_is_a_letter(String txt) {\n    if(txt == null || txt.isEmpty()) return false;\n    String trimmed = txt.trim();\n    char lastChar = trimmed.charAt(trimmed.length() - 1);\n    return Character.isLetter(lastChar);\n}"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"], "buggy_code": "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n"}
{"bug_id": "IS_PRIME", "patches": ["    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        // fixed code\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 2; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        if (n == 2)\n            return true;\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 2; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }", "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// fixed code\n    for (int k = 2; k * k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}"], "test_results": ["Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 0; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "REMOVE_VOWELS", "patches": ["public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' \n                || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }", "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}"], "test_results": ["Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Compile fail", "Semantical match", "Semantical match", "Test fail", "Semantical match"], "buggy_code": "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "GENERATE_INTEGERS", "patches": ["    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }", "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// fixed code\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }", "public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }", "    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);", "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }", "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}", "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail"], "buggy_code": "    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n"}
{"bug_id": "PARSE_MUSIC", "patches": ["public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        Integer value = note_map.get(note);\n        if (value != null) {\n            result.add(value);\n        }\n    }\n    return result;\n}", "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n\n    List<Integer> result = new ArrayList<Integer>();\n\n    // removed or commented out <FILL_ME>\n    // <FILL_ME>\n    for (String note : music_string.split(\" \")){\n        result.add(note_map.get(note));\n    }\n    return result;\n}", "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n\n    List<Integer> result = new ArrayList<Integer>();\n\n    // Fixed code\n    //\n    for (String note : music_string.split(\" \")){\n        if(note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }", "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        } else {\n            System.out.println(\"Note \" + note + \" not found in map\");\n        }\n    }\n    return result;\n}", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")){\n            if (note_map.containsKey(note)) {\n                result.add(note_map.get(note));\n            } \n        }\n        return result;\n    }", "    public static List<Integer> parse_music(String music_string) {\n        if (music_string == null || music_string.isEmpty()) {\n            throw new IllegalArgumentException(\"Music string can't be null or empty\");\n        }\n\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")) {\n            result.add(note_map.get(note));\n        }\n        return result;\n    }", "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n\n    List<Integer> result = new ArrayList<Integer>();\n\n    // Fixed code\n    for (String note : music_string.split(\" \")){\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        } else {\n            result.add(0); // add default value if note not found in map\n        }\n    }\n    return result;\n}", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")) {\n            if (note_map.containsKey(note)) {\n                result.add(note_map.get(note));\n            }\n        }\n        return result;\n    }", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")) {\n            if (note_map.containsKey(note)) {\n                result.add(note_map.get(note));\n            }\n        }\n\n        return result;\n    }"], "test_results": ["Test fail", "Test fail", "Plausible", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail", "Plausible", "Plausible"], "buggy_code": "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n"}
{"bug_id": "PROD_SIGNS", "patches": ["    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= arr[i];\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= 1;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= Math.signum(arr[i]);\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}", "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= arr[i];\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// fixed code\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else prod *= arr[i];\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= 1;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }"], "test_results": ["Test fail", "Semantical match", "Plausible", "Test fail", "Compile fail", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n"}
{"bug_id": "SOLVE_STRING", "patches": ["public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        } else if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else if(Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isAlphabetic(c)) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            }\n            else \n                sb.append(Character.toLowerCase(c));    \n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }", "public static String solve_string(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n        char c = s.charAt(i);\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) { \n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } \n        else {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        } \n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else {\n            sb.append(Character.toLowerCase(c));\n            flg = 1;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            else sb.append(Character.toLowerCase(c));\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}", "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n            flg = 1;\n        } else {\n            sb.append(Character.toLowerCase(c));\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}"], "test_results": ["Semantical match", "Test fail", "Plausible", "Compile fail", "Plausible", "Test fail", "Test fail", "Test fail", "Semantical match", "Plausible"], "buggy_code": "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            else sb.append(Character.toLowerCase(c));\n            flg = 1;\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "MONOTONIC", "patches": ["    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// fixed code\n        System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        // fixed code\n        System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }", "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    // copy l into sorted\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}", "    System.arraycopy(l, 0, sorted, 0, l.length);", "    public static boolean monotonic(int[] l) {\n        int[] sorted = Arrays.copyOf(l, l.length);\n        int[] reverse_sorted = new int[l.length];\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }", "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    // fixed code\n    sorted = l.clone();\n    \n    Arrays.sort(sorted);\n    \n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        // corrected code\n        System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }", "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n        \n    Arrays.sort(sorted);\n        \n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// fixed code\n        System.arraycopy(l, 0, sorted, 0, l.length);\n\n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }"], "test_results": ["Test fail", "Semantical match", "Semantical match", "Compile fail", "Plausible", "Semantical match", "Plausible", "Semantical match", "Semantical match", "Semantical match"], "buggy_code": "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        sorted = l;\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n"}
{"bug_id": "GET_CLOSET_VOWEL", "patches": ["    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }", "public static String get_closet_vowel(String word) {\n    if(word == null || word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i >= 1; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}", "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = 1; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n         for(int i = 1; i < word.length() - 1; i++) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }", "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 1; i < word.length()-1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// fixed code\n        for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }", "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 1; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// fixed code\n        for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }", "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = word.length() - 2; i >= 1; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}"], "test_results": ["Semantical match", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Semantical match", "Semantical match"], "buggy_code": "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n"}
