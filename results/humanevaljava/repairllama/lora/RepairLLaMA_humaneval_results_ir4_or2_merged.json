{"bug_id": "SORTED_LIST_SUM", "buggy_code": "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n            (s1, s2) -> s1.length() - s2.length()\n        );\n\n        return result;\n    }\n", "patches": ["    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> s2.length() - s1.length()\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> Integer.compare(s1.length(), s2.length())\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (String s1, String s2) -> s1.length() - s2.length()\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> Integer.valueOf(s2.length()) - Integer.valueOf(s1.length())\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> Integer.compare(s2.length(), s1.length())\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> Integer.valueOf(s1.length()) - Integer.valueOf(s2.length())\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           String::compareTo\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           (s1, s2) -> (s1.length() - s2.length())\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n           String::length\n        );\n\n        return result;\n    }\n", "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n// buggy code\n//             (s1, s2) -> s1.length() - s2.length()\n        );\n\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "FIB", "buggy_code": "    public static int fib(int n) {\n        return fib(n - 1) + fib(n - 2);\n    }\n", "patches": ["    public static int fib(int n) {\n// buggy code\n// \n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n < 2) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n <= 2) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n == 0 || n == 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n < 2)\n            return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n", "    public static int fib(int n) {\n// buggy code\n// \n       if (n == 0) {\n            return 0;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n"], "test_results": ["Test fail", "Plausible", "Plausible", "Plausible", "Plausible", "Compile fail", "Plausible", "AST match", "Compile fail", "Compile fail"]}
{"bug_id": "SAME_CHARS", "buggy_code": "    public static boolean same_chars(String s0, String s1) {\n        ArrayList<Character> set0 = new ArrayList<Character>();\n        ArrayList<Character> set1 = new ArrayList<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "patches": ["    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       HashSet<Character> set0 = new HashSet<Character>();\n        HashSet<Character> set1 = new HashSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       LinkedList<Character> set0 = new LinkedList<Character>();\n        LinkedList<Character> set1 = new LinkedList<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       Set<Character> set0 = new TreeSet<Character>();\n        Set<Character> set1 = new TreeSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       TreeSet<Character> set0 = new TreeSet<Character>();\n        TreeSet<Character> set1 = new TreeSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       List<Character> set0 = new ArrayList<Character>();\n        List<Character> set1 = new ArrayList<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       Set<Character> set0 = new LinkedHashSet<Character>();\n        Set<Character> set1 = new LinkedHashSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n", "    public static boolean same_chars(String s0, String s1) {\n// buggy code\n//         ArrayList<Character> set0 = new ArrayList<Character>();\n//         ArrayList<Character> set1 = new ArrayList<Character>();\n       HashSet<Character> set0 = new HashSet<Character>();\n        HashSet<Character> set1 = new HashSet<Character>(); \n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Plausible", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "DECODE_CYCLIC", "buggy_code": "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n                for (int i = 0; i < s.length(); i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "patches": ["            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length(); i += 3) {\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length() - 2; i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length(); i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length() - 1; i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length(); i += 4){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length() - 3; i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length() && i + 3 <= s.length(); i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length(); i += 2){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n               for (int i = 0; i < s.length(); i += 3){\n                    if (i + 3 > s.length()) break;\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n", "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n// buggy code\n//                 for (int i = 0; i < s.length(); i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n"], "test_results": ["Test fail", "Disagree", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "DECIMAL_TO_BINARY", "buggy_code": "    public static String decimal_to_binary(int decimal) {\n        String result = Integer.toHexString(decimal);\n        return \"db\" + result + \"db\";\n    }\n", "patches": ["    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toBinaryString(decimal);\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toString(decimal, 2);\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toHexString(decimal).toUpperCase();\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toHexString(decimal).toLowerCase();\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toHexString(decimal).substring(2);\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toString(decimal);\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toBinaryString(decimal);\n        while(result.length() < 8){\n            result = \"0\" + result;\n        }\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toBinaryString(decimal);\n        while (result.length() < 8)\n            result = \"0\" + result;\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n       String result = Integer.toBinaryString(decimal);\n        while(result.length() < 8)\n            result = \"0\" + result;\n        return \"db\" + result + \"db\";\n    }\n", "    public static String decimal_to_binary(int decimal) {\n// buggy code\n//         String result = Integer.toHexString(decimal);\n        return \"db\" + result + \"db\";\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "FRUIT_DISTRIBUTION", "buggy_code": "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n            int cnt = Integer.parseInt(str);\n            result -= cnt;\n        }\n        return result;\n    }\n", "patches": ["    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           result -= Integer.parseInt(str);\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           if (str.length() > 0) {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (NumberFormatException e) {\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           if (str.matches(\"\\\\d+\")) {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           if (!str.isEmpty()) {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           if (str.matches(\"[0-9]+\")) {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (NumberFormatException e) {\n                continue;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (Exception e) {\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (NumberFormatException e) {\n                result -= 1;\n            }\n        }\n        return result;\n    }\n", "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n// buggy code\n//             int cnt = Integer.parseInt(str);\n//             result -= cnt;\n           try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (NumberFormatException e) {\n                result--;\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Semantical match", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "IS_NESTED", "buggy_code": "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n        Collections.reverse(opening_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l || idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "patches": ["    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = closing_brackets.size();\n        for(int idx : opening_brackets) {\n            if(i < l || idx <= closing_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.sort(opening_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = closing_brackets.size();\n        for(int idx : opening_brackets) {\n            if(i < l || idx >= closing_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(opening_brackets);\n        Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(opening_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.sort(opening_brackets);\n        Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = opening_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l && idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n", "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n// buggy code\n//         Collections.reverse(opening_brackets);\n//         int cnt = 0, i = 0, l = opening_brackets.size();\n//         for(int idx : closing_brackets) {\n//             if(i < l || idx >= opening_brackets.get(i)) {\n       Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = closing_brackets.size();\n        for(int idx : closing_brackets) {\n            if(i < l || idx >= opening_brackets.get(i)) {\n                i++;\n            } else {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Disagree", "Test fail", "Test fail", "Disagree", "Compile fail", "Compile fail"]}
{"bug_id": "MATCH_PARENS", "buggy_code": "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == '(') val--;\n            else val++;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "patches": ["    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == '(') val++;\n            else val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == '(') val++;\n            else if(s.charAt(i) == ')') val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           char c = s.charAt(i);\n            if(c == '(') val++;\n            else if(c == ')') val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == '(') {\n                val++;\n            } else {\n                val--;\n            }\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           val += s.charAt(i) == '(' ? -1 : 1;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == ')') val++;\n            else val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == '(') ++val;\n            else --val;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           char ch = s.charAt(i);\n            if(ch == '(') val++;\n            else if(ch == ')') val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           val += (s.charAt(i) == '(') ? -1 : 1;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n", "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(s.charAt(i) == '(') val--;\n//             else val++;\n           if(s.charAt(i) == '(') {\n                val--;\n            } else {\n                val++;\n            }\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n"], "test_results": ["Line match", "Plausible", "Plausible", "AST match", "Test fail", "Test fail", "Plausible", "Plausible", "Compile fail", "Compile fail"]}
{"bug_id": "FILE_NAME_CHECK", "buggy_code": "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n        if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "patches": ["    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z' || 'A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' > lst[0].charAt(0) || lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) || lst[0].charAt(0) > 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if (! ('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z' || 'A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z'))\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if (!('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z' || 'A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z'))\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' > lst[0].charAt(0) && lst[0].charAt(0) >= 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) >= 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if (lst[0].charAt(0) < 'a' || lst[0].charAt(0) > 'z' || lst[0].charAt(0) < 'A' || lst[0].charAt(0) > 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z' || lst[0].length() > 3)\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n", "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n// buggy code\n//         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n       if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z' || lst[0].length() > 5)\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n"], "test_results": ["Test fail", "Test fail", "AST match", "Test fail", "AST match", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "ALL_PREFIXES", "buggy_code": "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n            result.add(string.substring(i + 1));\n        }\n\n        return result;\n    }\n", "patches": ["    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(i));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(0, i + 1));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(i, string.length()));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(0, i));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(i, i + 1));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(0,i + 1));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(0, i+1));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(0, string.length() - i));\n        }\n\n        return result;\n    }\n", "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n// buggy code\n//             result.add(string.substring(i + 1));\n           result.add(string.substring(i + 1, string.length()));\n        }\n\n        return result;\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Line match", "Line match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "MEAN_ABSOLUTE_DEVIATION", "buggy_code": "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n            deviation_sum += (number - mean) * (number - mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n", "patches": ["    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += Math.abs(number - mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += Math.abs(mean - number);\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += Math.abs((number - mean));\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           double deviation = number - mean;\n            deviation_sum += deviation * deviation;\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += Math.abs((number - mean) * (number - mean));\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += (Math.abs(number - mean));\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += Math.abs(number-mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += (number - mean) * (number - mean) * number;\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n", "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n// buggy code\n//             deviation_sum += (number - mean) * (number - mean);\n           deviation_sum += (number - mean) * (number - mean) * 1.;\n        }\n        return deviation_sum / numbers.size();\n    }\n"], "test_results": ["Line match", "Plausible", "AST match", "Test fail", "Test fail", "AST match", "Line match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "NEXT_SMALLEST", "buggy_code": "    public static Integer next_smallest(int[] lst) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "patches": ["    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       Set<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       List<Integer> numbers = new ArrayList<Integer>(lst.length);\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       List<Integer> numbers = new LinkedList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       List<Integer> numbers = new ArrayList<>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       LinkedList<Integer> numbers = new LinkedList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       List<Integer> numbers = new ArrayList<Integer>();\n        numbers.add(lst[0]);\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       Set<Integer> numbers = new TreeSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n       HashSet<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n", "    public static Integer next_smallest(int[] lst) {\n// buggy code\n//         List<Integer> numbers = new ArrayList<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Line match", "Compile fail"]}
{"bug_id": "SMALLEST_CHANGE", "buggy_code": "    public static int smallest_change(int[] arr) {\n        int result = 0;\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] != arr[arr.length - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "patches": ["    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length / 2; i += 1) {\n            if (arr[i] != arr[arr.length - i - 1])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length - 1; i += 1) {\n            if (arr[i] != arr[arr.length - i - 1])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length / 2; i += 1) {\n            if (arr[i] != arr[arr.length - 1 - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] != arr[arr.length - 1 - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] != arr[arr.length - i - 1])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 1; i < arr.length; i += 1) {\n            if (arr[i] != arr[arr.length - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length - 1; i += 1) {\n            if (arr[i] != arr[arr.length - 1 - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length / 2; i += 1) {\n            if (arr[i] != arr[arr.length - i])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n       for (int i = 0; i < arr.length; i++) {\n            if (arr[i] != arr[arr.length - i - 1])\n                result += 1;\n        }\n\n        return result;\n    }\n", "    public static int smallest_change(int[] arr) {\n        int result = 0;\n// buggy code\n//         for (int i = 0; i < arr.length; i += 1) {\n//             if (arr[i] != arr[arr.length - i])\n                result += 1;\n        }\n\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "ADD_ELEMENTS", "buggy_code": "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n            if(Integer.toString(arr.get(i)).length() >= 2) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(arr.get(i) >= 10) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(Integer.toString(arr.get(i)).length() > 1) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(arr.get(i).toString().length() >= 2) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(Integer.toString(arr.get(i)).length() >= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(Integer.toString(arr.get(i)).length() > 1) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(arr.get(i) >= 10) {\n                result += arr.get(i);\n            } else {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(arr.get(i) >= 10) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           if(Integer.toString(arr.get(i)).length() == 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           result += arr.get(i);\n            if(Integer.toString(arr.get(i)).length() >= 2) {\n                result -= arr.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n// buggy code\n//             if(Integer.toString(arr.get(i)).length() >= 2) {\n//                 result -= arr.get(i);\n           result += arr.get(i);\n            if(Integer.toString(arr.get(i)).length() >= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "ANY_INT", "buggy_code": "    public static boolean any_int(double x, double y, double z) {\n        if ((int)x == x && (int)y == y) {\n            if (x + y == z || x + z == y)\n                return true;\n        }\n        return false;\n    }\n", "patches": ["    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y || y + z == x)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y || z + y == x)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y + z == 0)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || y + z == x)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y || y + z == z)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || y + z == x || x + z == y)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y || z + x == y)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean any_int(double x, double y, double z) {\n// buggy code\n//         if ((int)x == x && (int)y == y) {\n//             if (x + y == z || x + z == y)\n       if (x == (int)x && y == (int)y) {\n            if (x + y == z || x + z == y)\n                return true;\n        }\n        return false;\n    }\n"], "test_results": ["Line match", "Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail"]}
{"bug_id": "FIND_ZERO", "buggy_code": "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n            if (poly(xs, begin) * poly(xs, end) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "patches": ["    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, begin) * poly(xs, center) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, center) * poly(xs, begin) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, center) * poly(xs, end) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, begin) * poly(xs, center) <= 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, begin) * poly(xs, end) <= 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (Math.abs(poly(xs, begin)) < Math.abs(poly(xs, end))) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, end) * poly(xs, center) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (poly(xs, center) * poly(xs, begin) <= 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n           if (Math.signum(poly(xs, begin)) * Math.signum(poly(xs, end)) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n", "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n// buggy code\n//             if (poly(xs, begin) * poly(xs, end) < 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "HOW_MANY_TIMES", "buggy_code": "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n        for (int i = 0; i < string.length() - substring.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "patches": ["    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i <= string.length() - substring.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i + substring.length() <= string.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i <= (string.length() - substring.length()); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length() && i + substring.length() <= string.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length() - substring.length(); i += substring.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n       for (int i = 0; i < string.length() - substring.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n", "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n// buggy code\n//         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Plausible", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "EVEN_ODD_PALINDROME", "buggy_code": "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n            else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "patches": ["    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0 && is_palindrome(i)) even_palindrome_count++;\n            else if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n            else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if(is_palindrome(i)) {\n                if((i % 2) == 0) odd_palindrome_count--;\n                else even_palindrome_count--;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0 && !is_palindrome(i)) odd_palindrome_count++;\n            else if((i % 2) == 1 && !is_palindrome(i)) even_palindrome_count++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0 && !is_palindrome(i)) odd_palindrome_count--;\n            else if((i % 2) == 1 && !is_palindrome(i)) even_palindrome_count--;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0) {\n                if(is_palindrome(i)) odd_palindrome_count--;\n            } else {\n                if(is_palindrome(i)) even_palindrome_count--;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if(is_palindrome(i)) {\n                if((i % 2) == 0) odd_palindrome_count--;\n                else if((i % 2) == 1) even_palindrome_count--;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++;\n            else if((i % 2) == 0 && is_palindrome(i)) even_palindrome_count++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0) {\n                if(is_palindrome(i)) odd_palindrome_count--;\n                else even_palindrome_count++;\n            } else {\n                if(is_palindrome(i)) even_palindrome_count--;\n                else odd_palindrome_count++;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n", "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n// buggy code\n//             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n//             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n           if((i % 2) == 0) {\n                if(is_palindrome(i)) odd_palindrome_count--;\n                else even_palindrome_count++;\n            } else {\n                if(is_palindrome(i)) odd_palindrome_count++;\n                else even_palindrome_count--;\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n"], "test_results": ["Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Compile fail"]}
{"bug_id": "SEARCH", "buggy_code": "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n        int[] frq = new int[max];\n        for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "patches": ["    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max+1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max+1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i <= max; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max + 1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max + 1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i <= max; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max + 1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i <= frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max+1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i <= frq.length; i += 1) if (frq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] freq = new int[max];\n        for (int i = 0; i < lst.length; i += 1)  freq[lst[i]] += 1;\n        for (int i = 0; i < freq.length; i += 1) if (freq[i] >= i) result = i;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max + 1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        if (result == -1) result = max;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max+1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        if (result == -1) result = max;\n        \n        return result;\n    }\n", "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n// buggy code\n//         int[] frq = new int[max];\n//         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n//         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n       int[] frq = new int[max+1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n        if (result == -1) result = 0;\n        \n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "ROLLING_MAX", "buggy_code": "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n            running_max = Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           running_max = (running_max == null) ? n : Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           running_max = running_max == null ? n : Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           if (running_max == null)\n                running_max = n;\n            else\n                running_max = Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           running_max = n > running_max ? n : running_max;\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           running_max = (running_max == null ? n : Math.max(running_max, n));\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           if (running_max == null || n > running_max) {\n                running_max = n;\n            }\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           if (running_max == null || n > running_max){\n                running_max = n;\n            }\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           if (running_max == null || n > running_max)\n                running_max = n;\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n            result.add(running_max);\n        }\n        return result;\n    }\n", "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n// buggy code\n//             running_max = Math.max(running_max, n);\n           if (running_max == null)\n                running_max = n;\n            else\n                running_max = Math.max(n, running_max);\n            result.add(running_max);\n        }\n        return result;\n    }\n"], "test_results": ["Plausible", "Plausible", "AST match", "Test fail", "Plausible", "Plausible", "Plausible", "Plausible", "Test fail", "Plausible"]}
{"bug_id": "DECODE_SHIFT", "buggy_code": "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "patches": ["    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)(((((int) c - 5 - (int)('a')) % 26) + (int)('a')));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c - 5 - (int)('a')) + 26) % 26 + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c - 5 - (int)('a') + 26) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a') + 1);\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('A'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)(((int) c - 5 - (int)('a')) % 26 + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int) c + 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n           c = (char)((((int)c - 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "STRONGEST_EXTENSION", "buggy_code": "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.toUpperCase(c) == c) SM += 1;\n                if (Character.toLowerCase(c) == c) CAP += 1;\n            }\n            val = CAP - SM;\n            strong = s;\n        }\n        return class_name + \".\" + strong;\n    }\n", "patches": ["    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.isUpperCase(c)) SM += 1;\n                if (Character.isLowerCase(c)) CAP += 1;\n            }\n            if (CAP - SM > val) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.isUpperCase(c)) SM += 1;\n                if (Character.isLowerCase(c)) CAP += 1;\n            }\n            if (val < CAP - SM) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            if (CAP - SM > val) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.isUpperCase(c)) SM += 1;\n                if (Character.isLowerCase(c)) CAP += 1;\n            }\n            val = CAP - SM;\n            if (val > 0) strong = s;\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) != c) SM += 1;\n                if (Character.toLowerCase(c) != c) CAP += 1;\n            }\n            if (CAP - SM > val) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toLowerCase(c) == c) SM += 1;\n                if (Character.toUpperCase(c) == c) CAP += 1;\n            }\n            if (CAP - SM > val) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            val = CAP - SM;\n            if (val > 0) strong = s;\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            val = CAP - SM;\n            strong = s;\n            if (val > 0) break;\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            val = CAP - SM;\n            strong = s;\n            if (val == 0) break;\n        }\n        return class_name + \".\" + strong;\n    }\n", "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy code\n//                 if (Character.toUpperCase(c) == c) SM += 1;\n//                 if (Character.toLowerCase(c) == c) CAP += 1;\n//             }\n//             val = CAP - SM;\n//             strong = s;\n               if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            val = CAP - SM;\n            strong = s;\n            if (val > 0) break; \n        }\n        return class_name + \".\" + strong;\n    }\n"], "test_results": ["Test fail", "Test fail", "Line match", "Compile fail", "Plausible", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "BF", "buggy_code": "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        for (int i = planet1_index; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "patches": ["    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index; i <= planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index + 1; i <= planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index + 1; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index; i < planet2_index; i++)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index; i < planet2_index + 1; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index + 1; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        result.add(planet2);\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index + 1; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        result.add(planet1);\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index+1; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n        return result;\n    }\n", "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n// buggy code\n//         for (int i = planet1_index; i < planet2_index; i += 1)\n//             result.add(planet_names.get(i));\n       for (int i = planet1_index+1; i < planet2_index; i += 1)\n            result.add(planet_names.get(i));\n        result.add(planet1);\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "SUM_PRODUCT", "buggy_code": "    public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[2];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "patches": ["    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[numbers.size()];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = {0, 1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       int[] result = new int[2];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[]{0, 1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[] {0, 1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = {0,1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[]{0,1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[3];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n       Integer[] result = new Integer[2];\n        result[1] = 1;\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n", "    public static Integer[] sum_product(List<Integer> numbers) {\n// buggy code\n//         Integer[] result = new Integer[2];\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "AST match", "Compile fail", "Line match", "Line match", "AST match", "Line match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "COMPARE_ONE", "buggy_code": "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n        if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n        if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "patches": ["    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = ((Double) b).doubleValue();\n        if(b instanceof Double) temp_b = ((Double) a).doubleValue();\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = (Double) a;\n        if(b instanceof Double) temp_b = (Double) b;\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = (Double) a;\n        if(b instanceof Double) temp_b = (Double) b;\n        if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if(a instanceof Double) temp_a = (Double) a;\n        if(b instanceof Double) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = ((Double) b);\n        if(b instanceof Double) temp_b = ((Double) a);\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = (Double) b;\n        if(b instanceof Double) temp_b = (Double) a;\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n        if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n        if(a instanceof Integer) temp_a = (Double) a;\n        if(b instanceof Integer) temp_b = (Double) b;\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n", "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n// buggy code\n//         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n//         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n//         if(a instanceof Integer) temp_a = (Double) a;\n//         if(b instanceof Integer) temp_b = (Double) b;\n       if(a instanceof Double) temp_a = ((Double) b);\n        if(b instanceof Double) temp_b = ((Double) a);\n        if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n"], "test_results": ["Compile fail", "Test fail", "Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "CLOSEST_INTEGER", "buggy_code": "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n        if (value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "patches": ["    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.indexOf('.') >= 0) {\n            if (value.substring(value.length() - 2).equals(\".5\")) {\n                result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n            } else {\n                result = (int)Math.round(num);\n            }\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 0 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 1 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 2 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 0 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.floor(num + 0.5) : (int)Math.ceil(num - 0.5);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 2 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.floor(num + 0.5) : (int)Math.ceil(num - 0.5);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.length() > 0 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = (int)Math.round(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.indexOf('.') >= 0) {\n            if (value.substring(value.length() - 2).equals(\".5\")) {\n                result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n            } else {\n                result = (int)num;\n            }\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n", "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n// buggy code\n//         if (value.substring(value.length() - 2).equals(\".5\")) {\n//             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n       if (value.indexOf('.') >= 0) {\n            if (value.substring(value.length() - 2).equals(\".5\")) {\n                result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n            } else {\n                result = (int)Math.floor(num);\n            }\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n"], "test_results": ["Compile fail", "Test fail", "Semantical match", "Disagree", "Test fail", "Plausible", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "SORT_ARRAY", "buggy_code": "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = array[i];\n            }\n            return array;\n        }\n    }\n", "patches": ["    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int temp = array[i];\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = temp;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int temp = array[array.length - i - 1];\n                array[array.length - i - 1] = array[i];\n                array[i] = temp;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int tmp = array[i];\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = tmp;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int aux = array[i];\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = aux;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               array[array.length - i - 1] = array[i];\n                array[i] = array[array.length - i - 1];\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int tmp = array[array.length - i - 1];\n                array[array.length - i - 1] = array[i];\n                array[i] = tmp;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               array[i] = array[array.length - i - 1] + 1;\n                array[array.length - i - 1] = array[i] - 1;\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               array[i] = array[array.length - 1 - i];\n                array[array.length - 1 - i] = array[i];\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               array[i] ^= array[array.length - i - 1];\n                array[array.length - i - 1] ^= array[i];\n            }\n            return array;\n        }\n    }\n", "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n// buggy code\n//                 array[i] = array[array.length - i - 1];\n//                 array[array.length - i - 1] = array[i];\n               int temp = array[i];\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = temp; \n            }\n            return array;\n        }\n    }\n"], "test_results": ["Compile fail", "Plausible", "Line match", "Plausible", "Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Plausible"]}
{"bug_id": "COUNT_UPPER", "buggy_code": "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n                count += 1;\n        }\n        return count;\n    }\n", "patches": ["    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'Y')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' || c == 'Y')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (Character.isUpperCase(c))\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c >= 'A' && c <= 'Z')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if ((c == 'A') || (c == 'E') || (c == 'I') || (c == 'O') || (c == 'U'))\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'e' || c == 'I' || c == 'O' || c == 'U')\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if ((c >= 'A') && (c <= 'Z'))\n                count += 1;\n        }\n        return count;\n    }\n", "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n// buggy code\n//             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u' || c == 'y')\n                count += 1;\n        }\n        return count;\n    }\n"], "test_results": ["Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "DOUBLE_THE_DIFFERENCE", "buggy_code": "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n                    result += d_int;\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result -= d_int;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += d_int * 2;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += d_int + 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += d_int - 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += Math.abs(d_int);\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += 2 * d_int;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += d_int / 2;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += (d_int - 1);\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += (d_int + 1);\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n// buggy code\n//                     result += d_int;\n                   result += (d_int * 2);\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail"]}
{"bug_id": "BELOW_THRESHOLD", "buggy_code": "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n            if (l[i] <= t)\n                return true;\n        }\n        return false;\n    }\n", "patches": ["    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] > t)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] >= t)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] < t)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] <= t) {\n                return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] <= t)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] > t) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] < t)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] <= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n           if (l[i] > t)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n// buggy code\n//             if (l[i] <= t)\n//                 return true;\n//         }\n//         return false;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "FLIP_CASE", "buggy_code": "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n                char_list[i] = Character.toLowerCase(c);\n            }\n            else {\n                char_list[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "patches": ["    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               char_list[i] = Character.toUpperCase(c);\n            }\n            else {\n                char_list[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               c = Character.toUpperCase(c);\n            }\n            else {\n                c = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               char_list[i] = Character.toUpperCase(c);\n            } else {\n                char_list[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               c = Character.toLowerCase(c);\n            }\n            else {\n                c = Character.toUpperCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n           \tchar_list[i] = Character.toUpperCase(c);\n            }\n            else {\n            \tchar_list[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               char_list[i] = Character.toUpperCase(c);\n            }\n            else{\n                char_list[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               c = Character.toUpperCase(c);\n            } else {\n                c = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               char_list[i] = Character.toUpperCase(c);\n            }\n            else {\n                char_list[i] = Character.toLowerCase(c); \n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n", "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n// buggy code\n//                 char_list[i] = Character.toLowerCase(c);\n//             }\n//             else {\n//                 char_list[i] = Character.toUpperCase(c);\n               char_list[i] = Character.toUpperCase(c);\n            }\n            else {\n                char_list[i] = Character.toLowerCase(c);\n            }\n            }\n        }\n        return new String(char_list);\n    }\n"], "test_results": ["Line match", "Test fail", "AST match", "Test fail", "Line match", "Test fail", "Test fail", "Compile fail", "Test fail", "Compile fail"]}
{"bug_id": "FIND_CLOSEST_ELEMENTS", "buggy_code": "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n            for (int j = 0; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = i + 1; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = i+1; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = i; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = 1; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = 0; j <= i; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = 0; j < i; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = (i + 1); j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = 0; j < numbers.length; j++){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n", "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n// buggy code\n//             for (int j = 0; j < numbers.length; j += 1){\n           for (int j = i + 1; j < numbers.length; j += 1) {\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Line match", "Test fail", "Test fail", "Test fail", "Plausible", "AST match", "Compile fail", "Test fail", "Compile fail"]}
{"bug_id": "SPLIT_WORDS", "buggy_code": "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n                if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "patches": ["    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr)) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 1) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && ((curr - 'a') % 2) != 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && ((curr - 'a' + 1) % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && (curr - 'a') % 2 == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && (curr - 'A') % 2 == 0) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n", "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n// buggy code\n//                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n               if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) {\n                    count++;\n                }\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail", "Test fail"]}
{"bug_id": "LONGEST", "buggy_code": "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n            if (strings.size() > string.length()){\n                maxlen = strings.size();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "patches": ["    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string.length() > maxlen){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (maxlen < string.length()){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string.length() >= maxlen){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           int len = string.length();\n            if (len > maxlen){\n                maxlen = len;\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string != null && string.length() > maxlen){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (maxlen <= string.length()){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string.length() > maxlen) {\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string.length() > maxlen){\n                maxlen = string.length();\n            }\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n", "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n// buggy code\n//             if (strings.size() > string.length()){\n//                 maxlen = strings.size();\n           if (string.length() > maxlen){\n                maxlen = string.length();\n                System.out.println(string);\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n"], "test_results": ["Line match", "Plausible", "Plausible", "Plausible", "Plausible", "Plausible", "Line match", "Compile fail", "Compile fail", "Plausible"]}
{"bug_id": "TRIPLES_SUM_TO_ZERO", "buggy_code": "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n            for (int j = i; j < numbers.length; j += 1) {\n                for (int k = j; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "patches": ["    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i + 1; j < numbers.length; j += 1) {\n                for (int k = j + 1; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i+1; j < numbers.length; j += 1) {\n                for (int k = j+1; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i + 1; j < numbers.length; j += 1) {\n                for (int k = j; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = 0; j < numbers.length; j += 1) {\n                for (int k = 0; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i; j < numbers.length - 1; j += 1) {\n                for (int k = j + 1; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i+1; j < numbers.length; j += 1) {\n                for (int k = j; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = i + 1; j < numbers.length; j += 1) {\n                for (int k = i + 1; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = 0; j < numbers.length; j += 1) {\n                for (int k = 0; k < numbers.length; k += 1) {\n                    if (i == j || i == k || j == k) continue;\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n           for (int j = 0; j < numbers.length; j += 1) {\n                for (int k = 0; k < numbers.length; k += 1) {\n                    if (j == i || k == i)\n                        continue;\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             for (int j = i; j < numbers.length; j += 1) {\n//                 for (int k = j; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n"], "test_results": ["Line match", "Line match", "Plausible", "Test fail", "Plausible", "Plausible", "Plausible", "Compile fail", "Plausible", "Compile fail"]}
{"bug_id": "CYCPATTERN_CHECK", "buggy_code": "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n        String pat = b;\n        for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "patches": ["    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i < a.length(); i += 1) {\n            String pat = b;\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       String pat = b.toLowerCase();\n        for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                String pat = b;\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i <= a.length() - l; i += 1) {\n            String pat = b;\n            for (int j = 0; j <= l - 1; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i < a.length() - l + 1; i += 1) {\n            String pat = b;\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       String pat = a;\n        for (int i = 0; i <= a.length() - l; i += 1) {\n            for (int j = 0; j <= a.length() - l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i <= a.length() - l; i += 1) {\n            String pat = b;\n            for (int j = 0; j <= a.length() - l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       for (int i = 0; i <= a.length() - l; i += 1) {\n            String pat = b;\n            for (int j = 0; j <= b.length() - l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       String pat = a;\n        for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n// buggy code\n//         String pat = b;\n//         for (int i = 0; i < a.length(); i += 1) {\n//             for (int j = 0; j < l; j += 1) {\n       String pat = \"\";\n        for (int i = 0; i < a.length(); i += 1) {\n            for (int j = 0; j < l; j += 1) {\n                pat += a.charAt(i);\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "IS_HAPPY", "buggy_code": "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 1))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i+1) || s.charAt(i+1) == s.charAt(i+2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 2) == s.charAt(i + 1))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n           if (s.charAt(i) == s.charAt(i + 1))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy code\n//             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n                return false;\n        }\n        return true;\n    }\n"], "test_results": ["Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "IS_PALINDROME", "buggy_code": "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n            if (text.charAt(i) == text.charAt(text.length() - i))\n                return true;\n        }\n        return false;\n    }\n", "patches": ["    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i - 1))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i)){\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i -1))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i - 1)){\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i))\n                return false;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n    }\n", "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy code\n//             if (text.charAt(i) == text.charAt(text.length() - i))\n//                 return true;\n//         }\n//         return false;\n           if (text.charAt(i) != text.charAt(text.length() - i - 1))\n                return false;\n        }\n        return true;\n        }\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Test fail", "Line match", "Compile fail", "AST match", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "SUM_TO_N", "buggy_code": "    public static int sum_to_n(int n) {\n        return (n + 1) * (n / 2);\n    }\n", "patches": ["    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n * (n + 1)) / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n + 1) * n / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return n * (n + 1) / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n + 1) * (n / 2) + 1;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return ((n + 1) * n) / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n + 1) * (n / 2 + 1);\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n + 1) * (n / 2) + n;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (n + 1) * (n + 1) / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n       return (1 + n) * n / 2;\n    }\n", "    public static int sum_to_n(int n) {\n// buggy code\n//         return (n + 1) * (n / 2);\n    }\n"], "test_results": ["Plausible", "Line match", "Plausible", "Test fail", "AST match", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "ADD", "buggy_code": "    public static int add(int x, int y) {\n        return x | y;\n    }\n", "patches": ["    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x + y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x ^ y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x & y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x | y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x - y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x+y;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return (x | y);\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return (x | y) + 1;\n    }\n", "    public static int add(int x, int y) {\n// buggy code\n//         return x | y;\n       return x | y & 0xFF;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail", "Test fail"]}
{"bug_id": "DERIVATIVE", "buggy_code": "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n        for (int i = 0; i < xs.size(); i += 1)\n            result.add(xs.get(i));\n        return result;\n    }\n", "patches": ["    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = 1; i < xs.size(); i += 1)\n            result.add(xs.get(i));\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = xs.size() - 1; i >= 0; i -= 1)\n            result.add(xs.get(i));\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (Integer x : xs)\n            result.add(x);\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = 0; i < xs.size() - 1; i += 1)\n            result.add(xs.get(i));\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = 0; i < xs.size(); i++)\n            result.add(xs.get(i));\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int x : xs)\n            result.add(x);\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       result.addAll(xs);\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = xs.size()-1; i >= 0; i -= 1)\n            result.add(xs.get(i));\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (Integer i : xs)\n            result.add(i);\n        return result;\n    }\n", "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n// buggy code\n//         for (int i = 0; i < xs.size(); i += 1)\n//             result.add(xs.get(i));\n       for (int i = 0; i < xs.size()-1; i += 1)\n            result.add(xs.get(i));\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "FIX_SPACES", "buggy_code": "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n        return new_text;\n    }\n", "patches": ["    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 0) {\n            for (int j = start; j < end; j += 1) {\n                new_text += \"_\";\n            }\n        }\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 2) new_text += \"-\";\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       new_text = new_text.toLowerCase();\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 2) {\n            for (int j = start; j < end; j += 1) {\n                new_text += \"_\";\n            }\n        }\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 0) {\n            for (int j = start; j <= end; j += 1) {\n                new_text += \"_\";\n            }\n        }\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (text.charAt(text.length() - 1) == ' ') new_text += \"-\";\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (text.charAt(text.length() - 1) == ' ') {\n            new_text += \"-\";\n        }\n        return new_text;\n    }\n", "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n// buggy code\n// \n       if (end - start > 2) new_text += \"-\" + text.substring(i, i);\n        return new_text;\n    }\n"], "test_results": ["Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "LARGEST_PRIME_FACTOR", "buggy_code": "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n            if (is_prime(j)){\n                largest = n % j;\n            }\n        }\n        return largest;\n    }\n", "patches": ["    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && n % j == 0){\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && n % j == 0) {\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(n % j)){\n                largest = n % j;\n                break;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (n % j == 0 && is_prime(j)){\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && n % j == 0){\n                largest = j;\n                break;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && (n % j == 0)) {\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && (n % j == 0)){\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (is_prime(j) && n % j == 0){\n                largest = n / j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n           if (n % j == 0){\n                largest = j;\n            }\n        }\n        return largest;\n    }\n", "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n// buggy code\n//             if (is_prime(j)){\n//                 largest = n % j;\n            }\n        }\n        return largest;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Plausible", "Plausible", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "FACTORIZE", "buggy_code": "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n        return result;\n    }\n", "patches": ["    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       result.add(n);\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n > 1){\n            result.add(n);\n        }\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n != 1){\n            result.add(n);\n        }\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n > 1) result.add(n);\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n > 1)\n            result.add(n);\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n != 1) result.add(n);\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n != 1)\n            result.add(n);\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n", "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n// buggy code\n// \n       if(n > 1){\n            result.add(n);\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Line match", "Plausible", "AST match", "AST match", "Plausible", "Plausible", "Compile fail", "Line match"]}
{"bug_id": "CAN_ARRANGE", "buggy_code": "    public static int can_arrange(int[] arr) {\n        int ind = 1;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n", "patches": ["    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] > arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 1; i < arr.length; i++) {\n            if(arr[i] < arr[i - 1]) ind = i;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 1;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] > arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 1; i < arr.length; i++) {\n            if(arr[i - 1] > arr[i]) ind = i;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) ind = i;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) ind = i + 1;\n            else break;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] > arr[i + 1]) ind = i;\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] < arr[i + 1]) {\n                ind = i + 1;\n            }\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n       int ind = 0;\n        for(int i = 0; i < arr.length - 1; i++) {\n            if(arr[i] > arr[i + 1]) {\n                ind = i + 1;\n            }\n        }\n        return ind;\n    }\n", "    public static int can_arrange(int[] arr) {\n// buggy code\n//         int ind = 1;\n//         for(int i = 0; i < arr.length - 1; i++) {\n//             if(arr[i] < arr[i + 1]) ind = i + 1;\n        }\n        return ind;\n    }\n"], "test_results": ["Test fail", "Test fail", "Compile fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "CHECK_DICT_CASE", "buggy_code": "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n                } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "patches": ["    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (state.equals(\"upper\") && !str_key.equals(str_key.toUpperCase())) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (state.equals(\"lower\") && !str_key.toLowerCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (!state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if ((state.equals(\"upper\")) && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (state.equals(\"upper\") && !str_key.toLowerCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (!(state.equals(\"upper\") && str_key.toUpperCase().equals(str_key))) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (!str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else if (!state.equals(\"mixed\") && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n", "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n// buggy code\n//                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n               } else {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n"], "test_results": ["Test fail", "Plausible", "Compile fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "SEPARATE_PAREN_GROUPS", "buggy_code": "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n            } else {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (c == ')'){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (c == ')') {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (c != ')'){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (c != ')') {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (c == ')' && current_depth > 0){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           }\n            else if (c == ')'){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (current_depth > 0) {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           } else if (current_depth > 0){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n           }else if (c == ')'){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n", "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n// buggy code\n//             } else {\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Line match", "Compile fail", "Test fail", "Compile fail", "AST match", "Test fail", "Test fail", "Line match", "Test fail"]}
{"bug_id": "CONCATENATE", "buggy_code": "    public static String concatenate(String[] strings) {\n        String result = null;\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "patches": ["    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       String result = \"\";\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       StringBuilder result = new StringBuilder();\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       String result = new String();\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       if (strings == null)\n            return null;\n        String result = \"\";\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       String result = \"\"; \n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n\tString result = \"\";\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       String result = new String(\"\");\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       if (strings == null)\n            return \"\";\n        String result = \"\";\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n", "    public static String concatenate(String[] strings) {\n// buggy code\n//         String result = null;\n       String result;\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n"], "test_results": ["Line match", "Compile fail", "Plausible", "Compile fail", "Plausible", "Line match", "Line match", "Plausible", "Plausible", "Compile fail"]}
{"bug_id": "UNIQUE", "buggy_code": "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "patches": ["    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if (!result.contains(n))\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if (result.contains(n))\n                continue;\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if (result.contains(n)) continue;\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if (result.contains(n)){\n                continue;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if (!result.contains(n)){\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if(!result.contains(n))\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if(result.contains(n))\n                continue;\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if(result.contains(n)){\n                continue;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n", "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n// buggy code\n// \n           if(result.contains(n)) continue;\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "AST match", "AST match", "Compile fail", "Test fail", "Line match", "AST match", "AST match"]}
{"bug_id": "MODP", "buggy_code": "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n            result = 2 * result;\n        }\n        return result % p;\n    }\n", "patches": ["    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = (2 * result) % p;\n        }\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result *= 2;\n        }\n        return result % p;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = (result * 2) % p;\n        }\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = 2 * result % p;\n        }\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result *= 2;\n            result %= p;\n        }\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = (2 * result) % p;\n        }\n        return result % p;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result *= 2;\n        }\n        result %= p;\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = (result * 2) % p;\n        }\n        return result % p;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = (result * result) % p;\n        }\n        return result;\n    }\n", "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n// buggy code\n//             result = 2 * result;\n//         }\n//         return result % p;\n           result = result * 2 % p;\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Compile fail", "Plausible", "AST match", "Plausible", "Compile fail", "Test fail", "Plausible", "Test fail", "Plausible"]}
{"bug_id": "FILTER_INTEGERS", "buggy_code": "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n            result.add((Integer) value);\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value instanceof Integer){\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value instanceof Integer)\n                result.add((Integer) value);\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if(value instanceof Integer){\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value instanceof Integer) result.add((Integer) value);\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value != null) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value != null){\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if(value instanceof Integer)\n                result.add((Integer) value);\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n           if (value != null && value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n// buggy code\n//             result.add((Integer) value);\n        }\n        return result;\n    }\n"], "test_results": ["Compile fail", "Line match", "AST match", "Line match", "Compile fail", "Test fail", "Test fail", "AST match", "Plausible", "Test fail"]}
{"bug_id": "RESCALE_TO_UNIT", "buggy_code": "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n            else if (numbers[i] < min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "patches": ["    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] >= max) {\n                max = numbers[i];\n            }\n            else if (numbers[i] <= min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] < min) {\n                min = numbers[i];\n            }\n            else if (numbers[i] > max) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] < max) {\n                max = numbers[i];\n            }\n            else if (numbers[i] > min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] < min) {\n                max = numbers[i];\n            }\n            else if (numbers[i] > max) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] > 0 && numbers[i] > max) {\n                max = numbers[i];\n            }\n            else if (numbers[i] < 0 && numbers[i] < min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] > max || Double.isNaN(numbers[i])) {\n                max = numbers[i];\n            }\n            else if (numbers[i] < min || Double.isNaN(numbers[i])) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (max < numbers[i]) {\n                max = numbers[i];\n            }\n            else if (min > numbers[i]) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] >= max) {\n                max = numbers[i];\n            }\n            if (numbers[i] <= min) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] > max || Double.isNaN(max)) {\n                max = numbers[i];\n            }\n            else if (numbers[i] < min || Double.isNaN(min)) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n", "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n// buggy code\n//             if (numbers[i] > max) {\n//                 max = numbers[i];\n//             }\n//             else if (numbers[i] < min) {\n           if (numbers[i] > 0) {\n                if (numbers[i] > max) {\n                    max = numbers[i];\n                }\n            }\n            else if (numbers[i] < 0) {\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Compile fail"]}
{"bug_id": "BELOW_ZERO", "buggy_code": "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n            if (balance > 0){\n                return false;\n            }\n        }\n        return true;\n    }\n", "patches": ["    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0){\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0){\n                return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance <= 0){\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0){\n                return false;\n            }\n        }\n        return true;\n        }\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance <= 0){\n                return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance <= 0){\n                return false;\n            }\n        }\n        return true;\n        }\n    }\n", "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n// buggy code\n//             if (balance > 0){\n//                 return false;\n//             }\n//         }\n//         return true;\n           if (balance < 0) return false;\n        }\n        return true;\n    }\n"], "test_results": ["Test fail", "Compile fail", "Compile fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "EAT", "buggy_code": "    public static int[] eat(int number, int need, int remaining) {\n        return new int[] {number + need,  remaining - need};\n    }\n", "patches": ["    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number - need,  remaining + need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number - need, remaining + need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number + need, remaining - need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {remaining - need, number + need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number, remaining - need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {remaining - need,  number + need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number,  remaining - need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number + need,  remaining};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n       return new int[] {number + need - 1,  remaining - need};\n    }\n", "    public static int[] eat(int number, int need, int remaining) {\n// buggy code\n//         return new int[] {number + need,  remaining - need};\n    }\n"], "test_results": ["Test fail", "Compile fail", "Compile fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "SUM_SQUARED_NUMS", "buggy_code": "    public static long sum_squared_nums(double[] lst) {\n        int result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n", "patches": ["    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor((long) lst[i])) * (Math.ceil((long) lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor(lst[i])) * (Math.ceil(lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       int result = 0;\n        for(int i = 0; i < lst.length; i++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       double result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor(lst[i])) * (Math.ceil(lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (long) Math.floor(lst[i]) * (long) Math.ceil(lst[i]);\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (long) (Math.floor(lst[i])) * (long) (Math.ceil(lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (long) (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (long) Math.floor((int) lst[i]) * (long) Math.ceil((int) lst[i]);\n        }\n        return result;\n    }\n", "    public static long sum_squared_nums(double[] lst) {\n// buggy code\n//         int result = 0, i = 0;\n//         for(int j = 0; j < lst.length; j++) {\n//             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n       long result = 0, i = 0;\n        for(int j = 0; j < lst.length; j++) {\n            result += (long) Math.floor(lst[i]) * (long) Math.ceil(lst[i]);\n            i++;\n        }\n        return result;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "MOVE_ONE_BALL", "buggy_code": "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n        int min_value = sorted_arr.get(sorted_arr.size() - 1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "patches": ["    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(0);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(sorted_arr.size() - 2);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(arr.size() - 1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(sorted_arr.size() - 1).intValue();\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = arr.get(arr.size() - 1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(sorted_arr.size()-1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = arr.get(0);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n// buggy code\n//         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n       int min_value = sorted_arr.get(sorted_arr.size() - sorted_arr.size());\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail", "Compile fail"]}
{"bug_id": "UNIQUE_DIGITS", "buggy_code": "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n                if((curr_digit % 2) != 0) {\n                    all_odd = true;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "patches": ["    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit % 2) == 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if(curr_digit % 2 == 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit & 1) == 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit % 2) != 1) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit % 2) != 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit & 1) != 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit % 2) == 0) {\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               all_odd &= (curr_digit % 2) != 0;\n                if(!all_odd) {\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               all_odd = (curr_digit % 2) != 0;\n                if(!all_odd) {\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n", "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n// buggy code\n//                 if((curr_digit % 2) != 0) {\n//                     all_odd = true;\n               if((curr_digit % 2) == 0) {\n                    all_odd = false;\n                    break;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Semantical match", "Compile fail"]}
{"bug_id": "VALID_DATE", "buggy_code": "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n                if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month == month_check1[i] && !(day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && (day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && !(day < 1 || day > 31)) return true;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && !(day >= 1 && day <= 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && !(day < 1 || day > 30)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month == month_check1[i]) {\n                    if(!(day < 1 || day > 31)) return false;\n                }\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n               if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n                break;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n", "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n// buggy code\n//                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "SPECIAL_FILTER", "buggy_code": "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n                if (odd_digits.contains(number_as_string.charAt(0))\n                        && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "patches": ["    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                        && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length()))))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Character.getNumericValue(number_as_string.charAt(0)))\n                        && odd_digits.contains(Character.getNumericValue(number_as_string.charAt(number_as_string.length()))))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(number_as_string.charAt(0))\n                        && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1)))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                        && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length() - 1))))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                        && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length()-1))))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1)))\n                        && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1))))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1))\n                        && odd_digits.contains(number_as_string.charAt(0)))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(number_as_string.charAt(0))\n                        && odd_digits.contains(number_as_string.charAt(number_as_string.length()-1)))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(Integer.parseInt(number_as_string.charAt(0)+\"\"))\n                        && odd_digits.contains(Integer.parseInt(number_as_string.charAt(number_as_string.length()-1)+\"\")))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n", "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n// buggy code\n//                 if (odd_digits.contains(number_as_string.charAt(0))\n//                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n               if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1)))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Compile fail", "Semantical match", "Test fail"]}
{"bug_id": "DIGIT_SUM", "buggy_code": "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n            if (c == ' ')\n                break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "patches": ["    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ')\n                continue;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ') {\n                break;\n            }\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (Character.isWhitespace(c))\n                break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c != ' ')\n                break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ') {\n                result = 0;\n                break;\n            }\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ' || c == '\\n')\n                break;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ') continue;\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ') {\n                result = 0;\n                continue;\n            }\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n", "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (c == ' ')\n//                 break;\n           if (c == ' ') {\n                result += 1;\n                break;\n            }\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n"], "test_results": ["Plausible", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "CIRCULAR_SHIFT", "buggy_code": "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n            return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        }\n    }\n", "patches": ["    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift, s.length()) + s.substring(0, s.length() - shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift - 1) + s.substring(0, s.length() - shift + 1);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(shift) + s.substring(0, shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift + 1);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(shift - 1) + s.substring(0, shift - 1);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(s.length() - shift - 1) + s.substring(0, s.length() - shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n           return s.substring(shift, s.length()) + s.substring(0, shift);\n        }\n    }\n", "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n// buggy code\n//             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        }\n    }\n"], "test_results": ["Test fail", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "CHOOSE_NUM", "buggy_code": "    public static int choose_num(int x, int y) {\n        if(x < y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "patches": ["    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x > y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(y < x) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x <= y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x < y) return y;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x < y) return x;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x >= y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x == y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x == y) return -1;\n        if(x < y) return x;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n", "    public static int choose_num(int x, int y) {\n// buggy code\n//         if(x < y) return -1;\n       if(x < y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "STARTS_ONE_ENDS", "buggy_code": "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    }\n", "patches": ["    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 1));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((11 + 9) * Math.pow(10, n - 2));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 8) * Math.pow(10, n - 2));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((9 + 10) * Math.pow(10, n - 2));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 3));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 2)) + 1;\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) (10 * Math.pow(10, n - 2));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 2) + 1);\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 2));\n    }\n", "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n// buggy code\n//         return (int) ((10 + 9) * Math.pow(10, n - 2));\n       return (int) ((10 + 9) * Math.pow(10, n - 2)) - 1;\n    }\n"], "test_results": ["Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "RIGHT_ANGLE_TRIANGLE", "buggy_code": "    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n", "patches": ["    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b >= c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b == c*c || b*b + c*c == a*a;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b <= c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return (a*a + b*b) == c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b - c*c == 0;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b == c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b == c*c || a*a + c*c == b*b;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b == c*c || a*a == b*b + c*c;\n    }\n", "    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy code\n//         return a*a + b*b == c*c;\n       return a*a + b*b == c*c || a*a == c*c;\n    }\n"], "test_results": ["Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "STRING_TO_MD5", "buggy_code": "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "patches": ["    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"md5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"SHA\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n", "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n// buggy code\n//         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n       MessageDigest md = MessageDigest.getInstance(\"MD-5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Plausible", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "INT_TO_MINI_ROMAN", "buggy_code": "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n            result += sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "patches": ["    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           result = sym[i] + result;\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           while (number >= num[i]) {\n                result += sym[i];\n                number -= num[i];\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (number >= num[i]) {\n                result += sym[i];\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (number >= num[i]) {\n                result += sym[i];\n                number -= num[i];\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (number >= num[i])\n                result += sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           result = result + sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (number >= num[i]) {\n                number -= num[i];\n                result += sym[i];\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (number >= num[i]) result += sym[i];\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n", "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n// buggy code\n//             result += sym[i];\n           if (num[i] <= number) {\n                result += sym[i];\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n"], "test_results": ["Test fail", "Semantical match", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "TRUNCATE_NUMBER", "buggy_code": "    public static double truncate_number(double number) {\n        return number / 1.0;\n    }\n", "patches": ["    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return number;\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return Math.floor(number);\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return Math.floor(number / 1.0);\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return number * 1.0;\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return (int) number;\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return Math.round(number);\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return number - (number % 1.0);\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return (double) (int) number;\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return number / 1.0d;\n    }\n", "    public static double truncate_number(double number) {\n// buggy code\n//         return number / 1.0;\n       return (double) (int) (number);\n    }\n"], "test_results": ["Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "IS_BORED", "buggy_code": "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "patches": ["    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           sentence = sentence.trim();\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.length() == 0)\n                continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.length() < 2)\n                continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.length() == 0) continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.isEmpty())\n                continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           sentence = sentence.toLowerCase();\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.length() <= 2)\n                continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.equals(\"\"))\n                continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n// buggy code\n// \n           if (sentence.length() < 2) continue;\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Line match", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "WORDS_STRINGS", "buggy_code": "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "patches": ["\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s == null) {\n\t\t\treturn result;\n\t\t}\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s == null) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s.isEmpty()) {\n\t\t\treturn result;\n\t\t}\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s.length() == 0) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s.equals(\"\")) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s == null)\n\t\t\treturn result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\ts = s.trim();\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s.isEmpty()) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n// buggy code\n// \n\t\tif(s == null || s.length() == 0) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Plausible", "Test fail", "Compile fail", "Test fail", "Disagree", "Disagree"]}
{"bug_id": "LARGEST_SMALLEST_INTEGERS", "buggy_code": "    public static int[] largest_smallest_integers(int[] lst) {\n        boolean negative = true, positive = true;\n        int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = false;\n                max_negative = Math.min(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "patches": ["    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 0; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = true, positive = true;\n        int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = 0, min_positive = 0; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 0; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        boolean negative = true, positive = true;\n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = false;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n        for(int i = 0; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n", "    public static int[] largest_smallest_integers(int[] lst) {\n// buggy code\n//         boolean negative = true, positive = true;\n//         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n//         for(int i = 1; i < lst.length; i++) {\n//             if(lst[i] < 0) {\n//                 negative = false;\n//                 max_negative = Math.min(max_negative, lst[i]);\n       boolean negative = false, positive = false;\n        int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n        for(int i = 1; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.min(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "SORT_THIRD", "buggy_code": "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n                result.add(thirds.get(i));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(i/3));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(i / 3));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(0));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               if (i < thirds.size())\n                    result.add(thirds.get(i));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(l.get(i));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(0));\n                thirds.remove(0);\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               if (!thirds.isEmpty()){\n                    result.add(thirds.get(i));\n                }\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(Math.min(i, thirds.size() - 1)));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n// buggy code\n//                 result.add(thirds.get(i));\n               result.add(thirds.get(Math.min(i, thirds.size()-1)));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Semantical match", "Compile fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Disagree", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "ENCRYPT", "buggy_code": "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "patches": ["    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(d.indexOf((int) c) + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(d.indexOf(c) + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(s.indexOf((int) c) + 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(s.indexOf(c) + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(c - 'a' + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt((int) c + 2 * 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(d.indexOf((int) c) + 2)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt((s.indexOf((int) c) + 2) % 26)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(s.indexOf((int) c) + 2 * 2 % 26)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n", "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n// buggy code\n//                     d.charAt(s.indexOf((int) c) + 2 * 2)\n                   d.charAt(s.indexOf((int) c) + 2 * 2 % d.length())\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "MONOTONIC", "buggy_code": "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        sorted = l;\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "patches": ["    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       for (int i = 0; i < l.length; i += 1)\n            sorted[i] = l[i];\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       sorted = l.clone();\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       sorted = Arrays.copyOf(l, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       for (int i = 0; i < sorted.length; i += 1)\n            sorted[i] = l[i];\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       System.arraycopy(l,0,sorted,0,l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       System.arraycopy(l, 0, sorted, 0, sorted.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       for(int i = 0; i < l.length; i++)\n            sorted[i] = l[i];\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       for (int i = 0; i < l.length; i++)\n            sorted[i] = l[i];\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n", "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n// buggy code\n//         sorted = l;\n       System.arraycopy(l, 0, sorted, 0, l.length); \n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Plausible", "Plausible", "Line match", "Test fail", "Plausible", "Plausible", "Line match"]}
{"bug_id": "GET_MAX_TRIPLES", "buggy_code": "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n            for (int j = 0; j < n-1; j += 1) {\n                for (int k = 0; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i+1; j < n-1; j += 1) {\n                for (int k = j+1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i + 1; j < n-1; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i; j < n-1; j += 1) {\n                for (int k = j; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i+1; j < n; j += 1) {\n                for (int k = j+1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i + 1; j < n; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i + 1; j < n - 1; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i+1; j < n-1; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i+1; j < n-1; j += 1) {\n                for (int k = i+2; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i + 1; j < n-1; j += 1) {\n                for (int k = i + 2; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n// buggy code\n//             for (int j = 0; j < n-1; j += 1) {\n//                 for (int k = 0; k < n; k += 1) {\n           for (int j = i+1; j < n-1; j += 1) {\n                for (int k = 0; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Line match", "Test fail", "Test fail", "Plausible", "Test fail", "Line match", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "ADD_EVEN_AT_ODD", "buggy_code": "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.length; i += 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "patches": ["    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; i++) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; ++i) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; i += 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length - 1; i += 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; i ++) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 1; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length-1; i += 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length - 1; i += 2) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n", "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n// buggy code\n//         for (int i = 0; i < lst.length; i += 1) {\n       for (int i = 0; i < lst.length; i = i + 1) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "MIN_PATH", "buggy_code": "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n                    if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                    if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "patches": ["    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.min(val, grid[i][j + 1]);\n                    if(j != 0) val = Math.max(val, grid[i - 1][j]);\n                    if(i != n - 1) val = Math.max(val, grid[i - 1][j]);\n                    if(j != n - 1) val = Math.min(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.max(val, grid[i - 1][j]);\n                    if(j != 0) val = Math.min(val, grid[i][j - 1]);\n                    if(i != n - 1) val = Math.min(val, grid[i + 1][j]);\n                    if(j != n - 1) val = Math.max(val, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.max(val, grid[i][j - 1]);\n                    if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                    if(i != n - 1) val = Math.min(val, grid[i + 1][j]);\n                    if(j != n - 1) val = Math.max(val, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.min(val, grid[i][j + 1]);\n                    if(j != 0) val = Math.max(val, grid[i - 1][j]);\n                    if(i != n - 1) val = Math.max(val, grid[i - 1][j]);\n                    if(j != n + 1) val = Math.min(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.max(val, grid[i][j - 1]);\n                    if(j != 0) val = Math.min(val, grid[i + 1][j]);\n                    if(i != n - 1) val = Math.min(val, grid[i + 1][j]);\n                    if(j != n - 1) val = Math.max(val, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i > 0) val = Math.max(val, grid[i][j + 1]);\n                    if(j > 0) val = Math.min(val, grid[i - 1][j]);\n                    if(i < n - 1) val = Math.min(val, grid[i - 1][j]);\n                    if(j < n - 1) val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   val = Math.max(val, grid[i][j + 1]);\n                    val = Math.min(val, grid[i - 1][j]);\n                    val = Math.min(val, grid[i - 1][j]);\n                    val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i > 0) val = Math.max(val, grid[i][j + 1]);\n                    if(j > 0) val = Math.min(val, grid[i - 1][j]);\n                    if(i < n - 1) val = Math.min(val, grid[i + 1][j]);\n                    if(j < n - 1) val = Math.max(val, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n", "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n// buggy code\n//                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n//                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n//                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n//                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                   if(i != 0) val = Math.max(val, grid[i][j + 1] + 1);\n                    if(j != 0) val = Math.min(val, grid[i - 1][j] + 1);\n                    if(i != n - 1) val = Math.min(val, grid[i - 1][j] + 1);\n                    if(j != n - 1) val = Math.max(val, grid[i][j - 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "DIGITS", "buggy_code": "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n        while(n >= 0) {\n            int digit = n * 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "patches": ["    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product *= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n            } else {\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n * 10;\n            if(digit % 2 == 0) {\n                product *= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product *= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product *= digit;\n            } else {\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n * 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n            } else {\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                product /= digit;\n            } else {\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n >= 1) {\n            int digit = n * 10;\n            if(digit % 2 == 0) {\n                product *= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n", "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n// buggy code\n//         while(n >= 0) {\n//             int digit = n * 10;\n//             if(digit % 2 == 0) {\n//                 product /= digit;\n       while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail"]}
{"bug_id": "HAS_CLOSE_ELEMENTS", "buggy_code": "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n                double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "patches": ["    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(j) - numbers.get(i);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(i).doubleValue() - numbers.get(j).doubleValue();\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(i) - numbers.get(j) + 1;\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(i) - numbers.get(j) + threshold;\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = Math.pow(numbers.get(i) - numbers.get(j), 2);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = j - i;\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy code\n//                 double distance = numbers.get(i) - numbers.get(j);\n               double distance = numbers.get(i) - numbers.get(j) + 0.0001;\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail"]}
{"bug_id": "GET_POSITIVE", "buggy_code": "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n            result.add(number);\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number > 0) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number >= 0) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number > 0)\n                result.add(number);\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number > 0) result.add(number);\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number >= 0)\n                result.add(number);\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if(number > 0) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if(number > 0){\n                result.add(number);\n            }\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if(number > 0)\n                result.add(number);\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number >= 0) result.add(number);\n        }\n        return result;\n    }\n", "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n// buggy code\n//             result.add(number);\n           if (number > 0){\n                result.add(number);\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Test fail", "AST match", "AST match", "Test fail", "Test fail", "Compile fail", "AST match", "Test fail", "Line match"]}
{"bug_id": "BY_LENGTH", "buggy_code": "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n            if(digit_map.get(num) != \"\") {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.get(num) != null) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.containsKey(num)) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(!digit_map.get(num).equals(\"\")) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.containsKey(num) && digit_map.get(num) != \"\") {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.get(num) != null && digit_map.get(num) != \"\") {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(!digit_map.get(num).isEmpty()) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.get(num) != null){\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.containsKey(num)){\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n// buggy code\n//             if(digit_map.get(num) != \"\") {\n           if(digit_map.containsKey(num) && digit_map.get(num) != null) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Plausible", "Plausible", "Test fail", "Compile fail", "Test fail", "Plausible", "Plausible"]}
{"bug_id": "STRING_XOR", "buggy_code": "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else{\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else if (a.charAt(i) != b.charAt(i)){\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else result += \"1\";\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else\n                result += \"1\";\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else\n            {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else if (a.charAt(i) > b.charAt(i)){\n                result += \"1\";\n            }\n            else{\n                result += \"0\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else if (a.charAt(i) > b.charAt(i)){\n                result += \"1\";\n            }\n            else {\n                result += \"0\";\n            }\n        }\n        return result;\n    }\n", "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n// buggy code\n// \n           else if (a.charAt(i) != b.charAt(i)) {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Line match", "Test fail", "Plausible", "Test fail", "AST match", "AST match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "X_OR_Y", "buggy_code": "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n            if (n % i == 0) return x;\n        }\n        return y;\n    }\n", "patches": ["    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) return y;\n        }\n        return x;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) return x_or_y(i, x, y);\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i != 0) return x;\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) {\n                return x;\n            }\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) return x_or_y(i, x, y);\n        }\n        return x;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) return x_or_y(i, y, x);\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if ((n % i) == 0) return x;\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (i % n == 0) return x;\n        }\n        return y;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n           if (n % i == 0) return x_or_y(i, y, x);\n        }\n        return x;\n    }\n", "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n// buggy code\n//             if (n % i == 0) return x;\n//         }\n//         return y;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "IS_SORTED", "buggy_code": "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n            if(lst[i] <= lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] > lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] >= lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] < lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(!(lst[i] <= lst[i + 1])) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i + 1] < lst[i]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] >= lst[i+1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] <= lst[i + 1] && lst[i] != lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] != lst[i + 1] && lst[i] > lst[i + 1]) return false;\n        }\n        return true;\n    }\n", "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n// buggy code\n//             if(lst[i] <= lst[i + 1]) return false;\n           if(lst[i] != lst[i + 1] && lst[i] >= lst[i + 1]) return false;\n        }\n        return true;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Plausible", "Test fail", "Plausible", "Test fail", "Compile fail", "Plausible", "Test fail"]}
{"bug_id": "INCR_LIST", "buggy_code": "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n            result.add(n - 1);\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n + 1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n+1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(++n);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n - 1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           if (n > 0)\n                result.add(n - 1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n.intValue() - 1);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(1 + n);\n        }\n        return result;\n    }\n", "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n// buggy code\n//             result.add(n - 1);\n           result.add(n - 1);\n            System.out.println(n);\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "IS_EQUAL_TO_SUM_EVEN", "buggy_code": "    public static boolean is_equal_to_sum_even(int n) {\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n", "patches": ["    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) ^ (n <= 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) ^ (n < 9));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) | (n < 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) ^ (n < 7));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) || (n < 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) && (n < 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return (n * 2 == 1) ^ (n < 8);\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) ^ (n >= 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n    }\n", "    public static boolean is_equal_to_sum_even(int n) {\n// buggy code\n//         return ((n * 2 == 1) ^ (n < 8));\n       return ((n * 2 == 1) ^ (n < 8)) || n == 0;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "GET_CLOSET_VOWEL", "buggy_code": "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "patches": ["    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 1; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 1; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 3; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 1; i >= 1; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = 1; i < word.length() - 1; i++) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = word.length() - 2; i >= 1; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = 0; i < word.length() - 1; i++) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n       for(int i = 0; i < word.length() - 2; i++) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n", "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy code\n//         for(int i = word.length() - 2; i >= 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "SORT_EVEN", "buggy_code": "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n        int[] evens = new int[1 + (int) (l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[l.length / 2];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[(int) (l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[l.length / 2];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[1 + (l.length / 2)];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[l.length / 2];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i++) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[l.length / 2 + 1];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[l.length / 2 + 1];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[(int) (l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 2) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[1 + l.length / 2];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n", "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n// buggy code\n//         int[] evens = new int[1 + (int) (l.length / 2.)];\n//         for (int i = 0; i < l.length; i += 2) {\n//             evens[(int) i / 2] = l[i];\n//         }\n//         Arrays.sort(evens);\n//         for (int i = 0; i < l.length; i += 1) {\n       int[] evens = new int[(int) (l.length / 2.) + 1];\n        for (int i = 0; i < l.length; i += 2) {\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i++) {\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "INTERSECTION", "buggy_code": "    public static String intersection(int[] interval1, int[] interval2) {\n        int l = Math.min(interval1[0], interval2[0]);\n        int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "patches": ["    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[0]) + 1;\n        int r = Math.max(interval1[1], interval2[1]) - 1;\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[0]) + 1;\n        int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        if(l > r) return \"NO\";\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[0]) + 1;\n        int r = Math.max(interval1[1], interval2[1]) + 1;\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[0] + 1);\n        int r = Math.max(interval1[1], interval2[1] + 1);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[1]);\n        int r = Math.max(interval1[1], interval2[0]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        if(r < l) return \"NO\";\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        if(l >= r) return \"NO\";\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n", "    public static String intersection(int[] interval1, int[] interval2) {\n// buggy code\n//         int l = Math.min(interval1[0], interval2[0]);\n//         int r = Math.max(interval1[1], interval2[1]);\n       int l = Math.min(interval1[0], interval2[0])+1;\n        int r = Math.max(interval1[1], interval2[1])-1;\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail", "Compile fail", "Test fail", "Plausible", "Test fail"]}
{"bug_id": "HISTOGRAM", "buggy_code": "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(count_letter[i] < most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "patches": ["    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(most_count < count_letter[i]) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(count_letter[i] >= most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(count_letter[i] == 0) continue;\n            if(count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(i == 0 || count_letter[i] < most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(most_count == 0 || count_letter[i] < most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(count_letter[i] > most_count || most_count == 0) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(most_count == 0 || count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n           if(count_letter[i] <= most_count) continue;\n            if(count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n", "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n// buggy code\n//             if(count_letter[i] < most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n"], "test_results": ["Test fail", "Semantical match", "Test fail", "Disagree", "Test fail", "Test fail", "Semantical match", "Semantical match", "Test fail", "Compile fail"]}
{"bug_id": "VOWELS_COUNT", "buggy_code": "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n        if (str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "patches": ["    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars.length > 0 && str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars[str_chars.length - 1] == 'Y' || str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars.length >= 1 && str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars[str_chars.length - 1] == 'Y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str.endsWith(\"y\"))\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str.length() > 0 && str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars.length != 0 && str_chars[str_chars.length - 1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars[str_chars.length-1] == 'y')\n            result += 1;\n        return result;\n    }\n", "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n// buggy code\n//         if (str_chars[str_chars.length - 1] == 'y')\n       if (str_chars[str_chars.length - 1] == 'a' || str_chars[str_chars.length - 1] == 'A')\n            result += 1;\n        return result;\n    }\n"], "test_results": ["Test fail", "Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "ANTI_SHUFFLE", "buggy_code": "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            result += new String(chars);\n        }\n        return result;\n    }\n", "patches": ["    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \" + new String(chars);\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += new String(chars) + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \" + new String(chars);\n        }\n        return result.substring(1);\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \";\n            result += new String(chars);\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += ' ' + new String(chars);\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \"+new String(chars);\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += str + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result = result + new String(chars) + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \" + new String(chars);\n        }\n        return result.replaceFirst(\" \", \"\");\n    }\n", "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n// buggy code\n//             result += new String(chars);\n//         }\n//         return result;\n           result += \" \";\n            result += new String(chars);\n        }\n        return result.substring(1);\n    }\n"], "test_results": ["Semantical match", "Semantical match", "Disagree", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Test fail", "Test fail", "Semantical match"]}
{"bug_id": "PAIRS_SUM_TO_ZERO", "buggy_code": "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n            for (int j = 0; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "patches": ["    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i + 1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i+1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i+1; j < l.size(); j += 1) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = 1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i; j < l.size(); j += 1) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = 0; j < l.size(); j += 1) {\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = 0; j < i; j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n           for (int j = i +1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n", "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n// buggy code\n//             for (int j = 0; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n"], "test_results": ["Line match", "Line match", "Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Line match", "Compile fail"]}
{"bug_id": "MAX_FILL", "buggy_code": "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n            for(int j = 0; j < grid[j].length; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "patches": ["    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < grid[0].length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < grid.length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < grid.length; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j <= i; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int k = 0; k < grid[i].length; k++) {\n                row_capacity += grid[i][k];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for (int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < i; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n", "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n// buggy code\n//             for(int j = 0; j < grid[j].length; j++) {\n//                 row_capacity += grid[j][i];\n           for(int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j]; \n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Test fail", "Test fail", "Compile fail", "Line match"]}
{"bug_id": "IS_SIMPLE_POWER", "buggy_code": "    public static boolean is_simple_power(int x, int n) {\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "patches": ["    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 1) {\n            return true;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 0) {\n            return false;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n <= 0) {\n            return false;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 0) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 1) return true;\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n < 0) {\n            return false;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 0) return false;\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 0) return x == 1;\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n", "    public static boolean is_simple_power(int x, int n) {\n// buggy code\n// \n       if (n == 0 || x == 0) {\n            return false;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "MAXIMUM_K", "buggy_code": "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= arr.size() - k && i >= 0; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= arr.size() - k + 1; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - k; i >= 0; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - k; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= Math.max(0, arr.size() - k); i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i > arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= arr.size() - k && i > 0; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= arr.size() - k - 1; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n       for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n// buggy code\n//         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "LARGEST_DIVISOR", "buggy_code": "    public static int largest_divisor(int n) {\n        for (int i = n; i >= 0; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "patches": ["    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i >= 1; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i > 0; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i > 1; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i >= 2; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i > 0; i--){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n / 2; i >= 1; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n - 1; i >= 0; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n; i >= 1; i--){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n / 2; i >= 0; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n", "    public static int largest_divisor(int n) {\n// buggy code\n//         for (int i = n; i >= 0; i -= 1){\n       for (int i = n / 2; i >= 2; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Semantical match", "Disagree", "Test fail", "Disagree", "Compile fail"]}
{"bug_id": "STRING_SEQUENCE", "buggy_code": "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n        return result;\n    }\n", "patches": ["    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result.trim();\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result + \"\\n\";\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       result = result.trim();\n        return result;\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       System.out.println(result);\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result + \" \";\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result + \"\";\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result + '\\n';\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       System.out.println(result);\n        return \"\";\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n       return result.substring(0, result.length());\n    }\n", "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n// buggy code\n//         return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Compile fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "MEDIAN", "buggy_code": "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n            return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        }\n    }\n", "patches": ["    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2.0;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (double) (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.0;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2 - 1)] + list[(int) (list.length / 2)]) / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1])/2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n           return list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1] / 2;\n        }\n    }\n", "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n// buggy code\n//             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        }\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "AST match", "Test fail", "Compile fail", "Test fail", "Compile fail"]}
{"bug_id": "SORT_ARRAY_BINARY", "buggy_code": "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n               if(o1 == o2) return 1;\n               if(o1 < o2) return 0;\n               if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "patches": ["         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 0;\n         if(o1 < o2) return -1;\n         if(o1 > o2) return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n           if(o1 == o2) return 0;\n            if(o1 < o2) return -1;\n            if(o1 > o2) return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n           } else {\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 1;\n         if(o1 < o2) return 0;\n         if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 0;\n         if(o1 < o2) return 1;\n         if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 0;\n         if(o1 < o2) return -1;\n         return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 0;\n         if(o1 < o2) return -1;\n         else return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n        if(o1 == o2) return 0;\n         else if(o1 < o2) return -1;\n         else return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n", "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n// buggy code\n//                if(o1 == o2) return 1;\n//                if(o1 < o2) return 0;\n//                if(o1 > o2) return -1;\n           if(o1 == o2) return 0;\n            if(o1 < o2) return 1;\n            if(o1 > o2) return -1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Semantical match", "Compile fail", "Semantical match", "Compile fail"]}
{"bug_id": "STRLEN", "buggy_code": "    public static int strlen(String string){\n        return string.length() - 1;\n    }\n", "patches": ["    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length();\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length() - 2;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length() - 1;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length() + 1;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length() ;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string == null ? 0 : string.length();\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length(); \n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length()-1;\n    }\n", "    public static int strlen(String string){\n// buggy code\n//         return string.length() - 1;\n       return string.length() - 1 + 1;\n    }\n"], "test_results": ["Line match", "Compile fail", "Test fail", "Compile fail", "Test fail", "Compile fail", "Plausible", "Line match", "Test fail", "Plausible"]}
{"bug_id": "FILTER_BY_PREFIX", "buggy_code": "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n            if (string.startsWith(prefix, 1)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.startsWith(prefix)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.startsWith(prefix, 0)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string != null && string.startsWith(prefix, 1)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.startsWith(prefix) && !string.equals(prefix)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.toLowerCase().startsWith(prefix, 1)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.toLowerCase().startsWith(prefix.toLowerCase())){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.length() >= prefix.length() && string.startsWith(prefix)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n// buggy code\n//             if (string.startsWith(prefix, 1)){\n           if (string.length() > prefix.length() && string.startsWith(prefix)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Compile fail", "Line match", "Compile fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Plausible", "Test fail"]}
{"bug_id": "WORDS_IN_SENTENCE", "buggy_code": "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "patches": ["    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() <= 2) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() < 3) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           word = word.toLowerCase();\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() == 1) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() == 0) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           flag = 0;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.equals(\"\")) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() < 2) continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n// buggy code\n// \n           if (word.length() <= 2)\n                continue;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Compile fail", "Disagree", "Test fail", "Test fail", "Test fail", "Disagree", "Test fail"]}
{"bug_id": "PLUCK", "buggy_code": "    public static int[] pluck(int[] arr) {\n        int min_even = 0;\n        int index = 0;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "patches": ["    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = Integer.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int index = -1;\n        int min_even = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int index = -1;\n        int min_even = 0;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = -1;\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = 1000;\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = arr[0];\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = 100;\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int min_even = Integer.MAX_VALUE;\n        int index = 0;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n       int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n", "    public static int[] pluck(int[] arr) {\n// buggy code\n//         int min_even = 0;\n//         int index = 0;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n"], "test_results": ["Line match", "Compile fail", "Test fail", "Test fail", "Plausible", "Test fail", "Plausible", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "PARSE_NESTED_PARENS", "buggy_code": "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "patches": ["    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               } else if (c == ')'){\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               } else if (c == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               }\n                if (c == ')'){\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               }\n                else if (c == ')'){\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               } else if (c == ')'){\n                    depth -= 1;\n                    max_depth = Math.max(depth, max_depth);\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               } else if (c == ')') {\n                    depth -= 1;\n                    max_depth = Math.max(depth, max_depth);\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               } else {\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               }else if (c == ')'){\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n// buggy code\n// \n               }\n                else if (c == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n"], "test_results": ["Test fail", "Disagree", "Compile fail", "Compile fail", "Disagree", "Plausible", "Plausible", "Test fail", "Disagree", "Disagree"]}
{"bug_id": "TOTAL_MATCH", "buggy_code": "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n        for (String st : lst1)\n            l2 = st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "patches": ["    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2)\n            l2 += st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2)\n            l2 = st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst1)\n            l2 += st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st2 : lst2)\n            l2 += st2.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2)\n            l2 = l2 + st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       \n        for (String st : lst2)\n            l2 += st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2)\n            l1 = st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2) \n            l2 += st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n", "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n// buggy code\n//         for (String st : lst1)\n//             l2 = st.length();\n       for (String st : lst2)\n            l2+=st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n"], "test_results": ["Line match", "Test fail", "Compile fail", "Compile fail", "Test fail", "Plausible", "AST match", "Test fail", "Line match", "Line match"]}
{"bug_id": "COUNT_UP_TO", "buggy_code": "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n            boolean is_prime = false;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "patches": ["    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0){\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < Math.sqrt(i); j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i && is_prime; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j <= Math.sqrt(i); j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j * j <= i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break; \n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false; \n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false; break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n", "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n// buggy code\n//             boolean is_prime = false;\n//             for (int j = 2; j < i; j += 1){\n//                 if (i % j == 0) {\n//                     is_prime = false;\n           boolean is_prime = true;\n            for (int j = 2; j < i; j += 1) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Test fail", "Plausible", "Plausible", "Plausible", "Line match", "Line match", "Compile fail", "Test fail"]}
{"bug_id": "ROUNDED_AVG", "buggy_code": "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n            avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "patches": ["    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) Math.floor(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) avg;\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) Math.round(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) (Math.ceil(avg));\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int)Math.floor(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = Math.toIntExact(Math.ceil(avg));\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) Math.ceil(avg) - 1;\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) Math.ceil(avg) + 1;\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n", "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n// buggy code\n//             avg_rounded = (int) Math.ceil(avg);\n           avg_rounded = (int) Math.ceil(avg - 0.5);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Line match", "Compile fail", "Test fail", "Test fail", "Plausible"]}
{"bug_id": "EVEN_ODD_COUNT", "buggy_code": "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n        for (char c : (num + \"\").toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "patches": ["    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (int c : (num + \"\").toCharArray()) {\n            if (c % 2 == 0) even_count += 1;\n            if (c % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (char c : (\"\" + num).toCharArray()) {\n            if ((int)c % 2 == 0) even_count++;\n            if ((int)c % 2 == 1) odd_count++;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (char c : String.valueOf(num).toCharArray()) {\n            if ((int)c % 2 == 0) even_count++;\n            if ((int)c % 2 == 1) odd_count++;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (char c : Integer.toString(num).toCharArray()) {\n            if ((int)c % 2 == 0) even_count++;\n            if ((int)c % 2 == 1) odd_count++;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (int i = 0; i < num; i++) {\n            if (i % 2 == 0) even_count += 1;\n            if (i % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) even_count += 1;\n            if (i % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (char c : Integer.toString(num).toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            else odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       for (char c : String.valueOf(num).toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            else odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       String num_str = num + \"\";\n        for (char c : num_str.toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            else odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n", "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n// buggy code\n//         for (char c : (num + \"\").toCharArray()) {\n//             if ((int)c % 2 == 0) even_count += 1;\n//             if ((int)c % 2 == 1) odd_count += 1;\n       String num_str = num + \"\";\n        for (char c : num_str.toCharArray()) {\n            if ((int)c % 2 == 0) even_count += 1;\n            else odd_count += 1; \n        }\n        return new int[] {even_count, odd_count};\n    }\n"], "test_results": ["Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "MAKE_PALINDROME", "buggy_code": "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n        result += str.substring(0, beginning_of_suffix);\n        return result;\n    }\n", "patches": ["    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result += str.substring(beginning_of_suffix);\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = str.substring(0, beginning_of_suffix) + result;\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = result + str.substring(0, beginning_of_suffix);\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result += str.substring(0, beginning_of_suffix + 1);\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = str + str.substring(0, beginning_of_suffix);\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result += str.substring(beginning_of_suffix, str.length());\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = result.substring(0, beginning_of_suffix) + result;\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = str.substring(0, beginning_of_suffix) + str;\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = str.substring(0, beginning_of_suffix);\n        return result;\n    }\n", "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n// buggy code\n//         result += str.substring(0, beginning_of_suffix);\n       result = result.substring(beginning_of_suffix);\n        return result;\n    }\n"], "test_results": ["Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "SKJKASDKD", "buggy_code": "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n            result += (int) c;\n        }\n        return result;\n    }\n", "patches": ["    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += (int) (c - '0');\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += (int) c - 48;\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += (int) Character.getNumericValue(c);\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result = result * 10 + (int) c;\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += c - '0';\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += ((int) c) - 48;\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += Character.getNumericValue(c);\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result *= 10;\n            result += (int) c;\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += Integer.parseInt(\"\" + c);\n        }\n        return result;\n    }\n", "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n// buggy code\n//             result += (int) c;\n           result += ((int) c - 48);\n        }\n        return result;\n    }\n"], "test_results": ["Plausible", "Plausible", "Plausible", "Test fail", "Line match", "Plausible", "Plausible", "Test fail", "Plausible", "Compile fail"]}
{"bug_id": "MAX_ELEMENT", "buggy_code": "    public static int max_element(List<Integer> l) {\n        int m = 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "patches": ["    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = Integer.MIN_VALUE;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = l.get(0);\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = -1;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = 1;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       Integer m = 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = Integer.MAX_VALUE;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = 0;\n        if (l.isEmpty()) return 0;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n", "    public static int max_element(List<Integer> l) {\n// buggy code\n//         int m = 0;\n       int m = 0;\n        if (l.isEmpty()) return m;\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n"], "test_results": ["Plausible", "Line match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail", "Test fail"]}
{"bug_id": "COUNT_DISTINCT_CHARACTERS", "buggy_code": "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n                distinct.add(c);\n        }\n        return distinct.size();\n    }\n", "patches": ["    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(Character.toLowerCase(c));\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(Character.toUpperCase(c));\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add((char) Character.toLowerCase(c));\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(new Character(Character.toLowerCase(c)));\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(c);\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n           {\n                distinct.add(c);\n            }\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add( Character.toLowerCase(c) );\n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(Character.toLowerCase(c)); \n        }\n        return distinct.size();\n    }\n", "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n// buggy code\n//                 distinct.add(c);\n               distinct.add(c);\n            else\n                distinct.remove(c);\n        }\n        return distinct.size();\n    }\n"], "test_results": ["Line match", "Compile fail", "Compile fail", "Plausible", "Plausible", "Test fail", "Test fail", "Line match", "Line match", "Test fail"]}
{"bug_id": "FIBFIB", "buggy_code": "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "patches": ["    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n == 2)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n == 2)\n            return 0;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n == 2)\n            return 2;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n <= 3)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n < 0)\n            return -1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n < 0)\n            return 0;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if(n == 2)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       if (n < 3)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n", "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n// buggy code\n// \n       System.out.println(n);\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n"], "test_results": ["Test fail", "Compile fail", "Compile fail", "Test fail", "Plausible", "Test fail", "Test fail", "Line match", "Plausible", "Test fail"]}
{"bug_id": "SOLUTION", "buggy_code": "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 1 && (lst.get(i) % 2) == 1) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 0 && (lst.get(i) % 2) == 1) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 0 && (lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if(i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 1 && (lst.get(i) % 2) != 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) != 0 && (lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 1 && ((lst.get(i) % 2) == 0)) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((i % 2) == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n           if((lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n", "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n// buggy code\n//             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Compile fail", "Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "WILL_IT_FLY", "buggy_code": "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i++;\n            j--;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i += 1; j -= 1;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i += 1; \n            j -= 1;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           ++i;\n            --j;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i+=1;\n            j-=1;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i++; j--;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i += 1;\n        }\n        return true;\n    }\n", "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n// buggy code\n// \n           i += 1;\n            j -= 1; \n        }\n        return true;\n    }\n"], "test_results": ["Line match", "Test fail", "Plausible", "AST match", "Line match", "Plausible", "Compile fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "ORDER_BY_POINTS", "buggy_code": "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "patches": ["    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit *= 10;\n                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit += (((n + \"\").toCharArray()[j] - '0') * neg);\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit += neg * ((n + \"\").toCharArray()[j] - '0');\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit *= 10;\n                digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            digit = 0;\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit += ((n + \"\").toCharArray()[j] - '0');\n            }\n            digits.add(neg * digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            digit = 0;\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit += ((n + \"\").toCharArray()[j] - '0') * neg * Math.pow(10, j);\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit += ((n + \"\").toCharArray()[j] - '0') * Math.pow(10, j) * neg;\n            }\n            digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n", "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy code\n//                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n//             }\n//             digits.add(digit);\n               digit = digit * 10 + ((n + \"\").toCharArray()[j] - '0') * neg;\n            }\n            digits.add(digit);\n            System.out.println(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "FACTORIAL", "buggy_code": "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n                for(int j = 1; j <= i; i++) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "patches": ["    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 1; j <= i; j++) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 1; j <= i; j++) x += j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 2; j <= i; j++) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = i; j > 0; j--) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 2; j <= i; j++) x += j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = i; j >= 1; j--) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 1; j <= i; j++) x -= j;\n                x *= -1;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = 1; j <= i; j++) x -= j;\n                x = -x;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n", "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n// buggy code\n//                 for(int j = 1; j <= i; i++) x -= j;\n               for(int j = i; j > 0; j--) x += j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Plausible", "Plausible"]}
{"bug_id": "GET_ROW", "buggy_code": "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n            for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(i) == x){\n                    result.add(new GET_ROW().new Tuple(i, i));\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = 0; j < lst.get(0).size(); j += 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(0).size() - 1; j >= 0; j -= 1) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(j, i));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = 0; j < lst.get(i).size(); j += 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = 0; j < lst.get(0).size(); j += 1) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(i) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n", "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n// buggy code\n//             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n//                 if (lst.get(i).get(i) == x){\n//                     result.add(new GET_ROW().new Tuple(i, i));\n           for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "SPECIAL_FACTORIAL", "buggy_code": "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n        for(long i = n; i >= 1; i--) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "patches": ["    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i >= 1; i--) {\n            fact_i *= i;\n            special_fact += fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i > 1; i--) {\n            fact_i *= i;\n            special_fact += fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i > 0; i--) {\n            fact_i *= i;\n            special_fact += fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact += fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = 1; i <= n; i++) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i > 1; i--) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i > 1; i--) {\n            fact_i *= i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = 2; i <= n; i++) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i > 0; i--) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n", "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n// buggy code\n//         for(long i = n; i >= 1; i--) {\n//             fact_i *= i * fact_i;\n//             special_fact += i * fact_i;\n       for(long i = n; i >= 1; i--) {\n            fact_i *= i;\n            special_fact += i * fact_i;\n        }\n        return special_fact;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "DO_ALGEBRA", "buggy_code": "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        String expression = \"\";\n        for (int i = 0; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "patches": ["    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + \"\";\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i - 1] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = Double.toString(operand[0]);\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i - 1] + Double.toString(operand[i]);\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + \"\";\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + operator[0];\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       StringBuilder expression = new StringBuilder();\n        for (int i = 0; i < operand.length; i += 1) {\n            expression.append(operator[i]).append(operand[i]);\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + \"\";\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i-1] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       StringBuffer expression = new StringBuffer();\n        for (int i = 0; i < operand.length; i += 1) {\n            expression.append(operator[i]).append(operand[i]);\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + \"\";\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i] + \"\";\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = String.valueOf(operand[0]);\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i - 1] + operand[i];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n", "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy code\n//         String expression = \"\";\n//         for (int i = 0; i < operand.length; i += 1) {\n//             expression += operator[i] + operand[i];\n       String expression = operand[0] + operator[0];\n        for (int i = 1; i < operand.length; i += 1) {\n            expression += operator[i] + operand[i];\n        }\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n"], "test_results": ["Semantical match", "Compile fail", "Test fail", "Test fail", "Compile fail", "Semantical match", "Compile fail", "Test fail", "Semantical match", "Compile fail"]}
{"bug_id": "MIN_SUBARRAY_SUM", "buggy_code": "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n            s += num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "patches": ["    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s = s + num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s -= num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num - max_sum;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num - 1;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num > 0 ? num : 0;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num >= 0 ? num : 0;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num < 0 ? 0 : num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += (long)num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num > 0 ? num : -num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n", "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n// buggy code\n//             s += num;\n           s += num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n"], "test_results": ["Compile fail", "Semantical match", "Test fail", "Compile fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Compile fail", "Test fail"]}
{"bug_id": "COUNT_NUMS", "buggy_code": "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n            if(neg) num *= 1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "patches": ["    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num *= -1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num = -num;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num = Math.abs(num);\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           num = Math.abs(num);\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num = -1 * num;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num = num * -1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) num = 0 - num;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           num *= 1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n", "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n// buggy code\n//             if(neg) num *= 1;\n           if(neg) {\n                num = -num;\n            }\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n"], "test_results": ["Line match", "Test fail", "Compile fail", "Plausible", "Compile fail", "Plausible", "Plausible", "Compile fail", "Test fail", "Plausible"]}
{"bug_id": "PRIME_LENGTH", "buggy_code": "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n            if (l - i == 0)\n                return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i == 1)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i <= 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i <= 1)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i < 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i == 2)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if ((l - i) == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (l - i == i)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (string.charAt(i) == string.charAt(l - i))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n           if (string.charAt(i) == string.charAt(0))\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n// buggy code\n//             if (l - i == 0)\n                return false;\n        }\n        return true;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "SORT_NUMBERS", "buggy_code": "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array);\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "patches": ["    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, String.CASE_INSENSITIVE_ORDER);\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return value_map.get(o1) - value_map.get(o2);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, Collections.reverseOrder());\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return value_map.get(s1) - value_map.get(s2);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return value_map.get(o1).compareTo(value_map.get(o2));\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return value_map.get(s1).compareTo(value_map.get(s2));\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return value_map.get(a).compareTo(value_map.get(b));\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return value_map.get(a) - value_map.get(b);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n", "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy code\n//         Collections.sort(number_array);\n       Collections.sort(number_array, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return value_map.get(o1) - value_map.get(o2);\n            }});\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n"], "test_results": ["Test fail", "Semantical match", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Semantical match"]}
{"bug_id": "GREATEST_COMMON_DIVISOR", "buggy_code": "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            a = b;\n            b = a % b;\n        }\n        return a;\n    }\n", "patches": ["    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           int temp = a;\n            a = b;\n            b = temp % b;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           b = a % b;\n            a = b;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           int temp = a % b;\n            a = b;\n            b = temp;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           a = a % b;\n            b = b % a;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           a %= b;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           int tmp = a;\n            a = b;\n            b = tmp % b;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           int remainder = a % b;\n            a = b;\n            b = remainder;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           a = a % b;\n        }\n        return a;\n    }\n", "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n// buggy code\n//             a = b;\n//             b = a % b;\n           a %= b;\n            b %= a;\n        }\n        return a;\n    }\n"], "test_results": ["Semantical match", "Compile fail", "Semantical match", "Test fail", "Compile fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Test fail"]}
{"bug_id": "REMOVE_DUPLICATES", "buggy_code": "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "patches": ["    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (!count.containsKey(n))\n                count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (count.get(n) == null)\n                count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (!count.containsKey(n))\n                count.put(n, 1);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if(!count.containsKey(n))\n                count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (!count.containsKey(n)) count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (count.get(n) == null)\n                count.put(n, 1);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (count.containsKey(n))\n                continue;\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (! count.containsKey(n))\n                count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n", "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n// buggy code\n// \n           if (!count.containsKey(n))\n            \tcount.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n"], "test_results": ["Line match", "Test fail", "Plausible", "Test fail", "Line match", "AST match", "Test fail", "Test fail", "Line match", "Line match"]}
{"bug_id": "ISCUBE", "buggy_code": "    public static boolean iscude(int a) {\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "patches": ["    public static boolean iscude(int a) {\n// buggy code\n// \n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a < 0) {\n            return false;\n        }\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a < 0) return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a <= 0) {\n            return false;\n        }\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a < 0)\n            return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a <= 0) return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a <= 0)\n            return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if(a < 0) return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if(a < 0)\n            return false;\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n", "    public static boolean iscude(int a) {\n// buggy code\n// \n       if (a == 0) {\n            return true;\n        }\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "MAKE_A_PILE", "buggy_code": "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(n - 2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n", "patches": ["\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(2 * i + 1);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - i);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - 2 * i - 1);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(i + 1);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - 1 - 2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - i - 1);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(i);\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - (2 * i + 1));\n\t\t}\n\t\treturn pile;\n\t}\n", "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n// buggy code\n// \t\t\tpile.add(n - 2 * i);\n\t\t\tpile.add(n - (2 * i));\n\t\t}\n\t\treturn pile;\n\t}\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "COMMON", "buggy_code": "    public static int[] common(int[] l1, int[] l2) {\n        ArrayList<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "patches": ["    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>(l1.length + l2.length);\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>(l1.length);\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       List<Integer> common = new ArrayList<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>();\n        common.clear();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer> ();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>(l1.length+l2.length);\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       HashSet<Integer> common = new HashSet<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>();\n        common.add(0);\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n", "    public static int[] common(int[] l1, int[] l2) {\n// buggy code\n//         ArrayList<Integer> common = new ArrayList<Integer>();\n       ArrayList<Integer> common = new ArrayList<Integer>();\n        common.add(1);\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Compile fail"]}
{"bug_id": "MULTIPLY", "buggy_code": "    public static int multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }\n", "patches": ["    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return a * b;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a % 10) * (b % 10) % 10;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a % 100) * (b % 100);\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a % 10) * (b / 10);\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return ((a % 10) * (b % 10)) % 10;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return ((a % 10) * (b % 10)) / 10;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a % 10) * (b % 11);\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a * b) % 10;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n       return (a % 10) * (b % 10) + 10;\n    }\n", "    public static int multiply(int a, int b) {\n// buggy code\n//         return (a % 10) * (b % 10);\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "TRI", "buggy_code": "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = -3;\n        for(int i = 2; i < n - 1; i--) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "patches": ["    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -2;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -2;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 2) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = 0;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -1;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = 1;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -2;\n        for(int i = 2; i < n; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 2) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -1;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 1) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -2;\n        for(int i = 2; i < n; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = 2;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n", "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n// buggy code\n//         sequence[1] = -3;\n//         for(int i = 2; i < n - 1; i--) {\n//             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n//             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n       sequence[1] = -2;\n        for(int i = 2; i < n - 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 - 1;\n            else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 1) / 2;\n        }\n        return sequence;\n\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "INTERSPERSE", "buggy_code": "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size(); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "patches": ["    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size()-1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < (numbers.size() - 1); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i <= numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size(); i += 2) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 1; i < numbers.size(); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size() -1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n       for (int i = 0; i < numbers.size() - 1; ++i) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n", "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n// buggy code\n//         for (int i = 0; i < numbers.size(); i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n"], "test_results": ["Compile fail", "Line match", "AST match", "Test fail", "Test fail", "Test fail", "Plausible", "Line match", "Plausible", "Compile fail"]}
{"bug_id": "SIMPLIFY", "buggy_code": "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (numerator / denom == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n", "patches": ["    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator % denom == 0)\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator == denom)\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == numerator / denom)\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == (long) (numerator / denom))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == (double) (numerator / denom))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == (int)(numerator / denom))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == (int) (denom / numerator))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n       if (numerator / denom == ((int) (numerator / denom)))\n            return true;\n        return false;\n    }\n", "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n// buggy code\n//         if (numerator / denom == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n"], "test_results": ["Semantical match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "SELECT_WORDS", "buggy_code": "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a','e','i','o','u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'A', 'E', 'I', 'O', 'U'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u', '-'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y', 'h'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u', '@'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = {'a', 'e', 'i', 'o', 'u', ' '};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n           char[] vowels = \"aeiou\".toCharArray();\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n", "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n// buggy code\n//             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "COMPARE", "buggy_code": "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n", "patches": ["    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorDiv(game[i], guess[i] + 1);\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorDiv(game[i], guess[i]) + 1;\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = game[i] / guess[i];\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorDiv(guess[i], game[i]);\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorDiv(game[i], guess[i]) - 1;\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = (int) Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorMod(game[i], guess[i]);\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = game[i] - guess[i];\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n           result[i] = Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n", "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n// buggy code\n//             result[i] = Math.floorDiv(game[i], guess[i]);\n        }\n\n        return result;\n    }\n"], "test_results": ["Compile fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail"]}
{"bug_id": "EXCHANGE", "buggy_code": "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst2) {\n            if((i % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "patches": ["    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) == 0) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) == 0) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i = 0; i < lst2.size(); i++) {\n            if((lst2.get(i) % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) != 0) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i = 0; i < lst1.size(); i++) {\n            if((lst1.get(i) % 2) == 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) != 1) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n", "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n// buggy code\n//         for(int i : lst2) {\n//             if((i % 2) == 1) even++;\n       for(int i : lst1) {\n            if((i % 2) != 0) even++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "SUM_SQUARES", "buggy_code": "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 4 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "patches": ["    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 2 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 4 == 0 || i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else if (i % 4 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else if (i % 2 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 4 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else if (i % 3 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if ((i % 4 == 0) || (i % 3 == 0))\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 4 == 0) {\n                result += lst[i] * lst[i];\n            } else if (i % 3 == 0) {\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 3 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 2 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n", "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n// buggy code\n//             if (i % 4 == 0)\n//                 result += lst[i] * lst[i];\n//             else if (i % 3 == 0)\n           if (i % 3 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 4 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "SOLVE", "buggy_code": "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Integer.parseInt((N + \"\").substring(i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "patches": ["    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, (N + \"\").length()));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, (i + 1)));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, i+1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").charAt(i) + \"\");\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n           sum += Integer.parseInt((N + \"\").substring(i, N + \"\".length()));\n        }\n        return Integer.toBinaryString(sum);\n    }\n", "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy code\n//             sum += Integer.parseInt((N + \"\").substring(i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Plausible", "AST match", "Line match", "Plausible", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "ENCODE", "buggy_code": "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "patches": ["    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           } else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           } else {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           } else if (Character.isLowerCase(c)){\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           }\n            else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           } else if(Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           } else if (Character.isUpperCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           }\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           }\n            if (Character.isLowerCase(c) || Character.isDigit(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n// buggy code\n//             }\n//             if (Character.isLowerCase(c)) {\n           }\n            if (Character.isLowerCase(c) && c != 'a') {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"], "test_results": ["AST match", "Plausible", "AST match", "Line match", "AST match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "IS_MULTIPLY_PRIME", "buggy_code": "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                for (int k = j; k < a; j += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "patches": ["    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k <= a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = i; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k <= a; j += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j + 1; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k < j + i; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k < i; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = i; k < j; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n               for (int k = j; k < a; k += 1){\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n", "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n// buggy code\n//                 for (int k = j; k < a; j += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n"], "test_results": ["Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "FIZZ_BUZZ", "buggy_code": "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < i + \"\".length(); j += 1){\n                    if (i + \"\".substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i + \"\"; j += 1){\n                    if (i + \"\"[j] == '7')\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i + 1 + \"\".length(); j += 1){\n                    if (i + 1 + \"\".substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i + \"\".length(); j += 1){\n                    if (i + \"\".substring(j, j + 1).equals(\"7\"))\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i.toString().length(); j += 1){\n                    if (i.toString().substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < (\"\" + i).length(); j += 1){\n                    if ((\"\" + i).substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i + \"\"; j += 1){\n                    if (i + \"\" + i.substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i.toString().length(); j += 1){\n                    if (i.toString().substring(j, j + 1).equals(\"7\"))\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < String.valueOf(i).length(); j += 1){\n                    if (String.valueOf(i).substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < i + \"\"; j += 1){\n                    if (i + \"\" + j == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n", "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n// buggy code\n//                 for (int j = 0; j < i + \"\".length(); j += 1){\n//                     if (i + \"\".substring(j, j + 1) == \"7\")\n               for (int j = 0; j < (i + \"\").length(); j += 1){\n                    if (i + \"\".substring(j, j + 1) == \"7\")\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n"], "test_results": ["Compile fail", "Test fail", "Compile fail", "Compile fail", "Test fail", "Compile fail", "Compile fail", "Test fail", "Compile fail", "Test fail"]}
{"bug_id": "FILTER_BY_SUBSTRING", "buggy_code": "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            result.add(string);\n        }\n        return result;\n    }\n", "patches": ["    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring))\n                result.add(string);\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if(string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring)) result.add(string);\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if(string.contains(substring))\n                result.add(string);\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.indexOf(substring) != -1){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring)){\n                result.add(string);\n            } \n        }\n        return result;\n    }\n", "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n// buggy code\n//             result.add(string);\n           if (string.contains(substring)) {\n                result.add(string);\n            } \n        }\n        return result;\n    }\n"], "test_results": ["Compile fail", "Line match", "Compile fail", "Compile fail", "AST match", "Compile fail", "Plausible", "Test fail", "Line match", "Line match"]}
{"bug_id": "CHANGE_BASE", "buggy_code": "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = result + x % base;\n            x = x - x / base;\n        }\n        return result;\n    }\n", "patches": ["    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = x % base + result;\n            x = x - x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = x % base + result;\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = result + (x % base);\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = Integer.toString(x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = result + x % base;\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = (x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = Integer.toString(x % base) + result;\n            x = x - x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = String.valueOf(x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           result = String.valueOf(x % base) + result;\n            x = x - x / base;\n        }\n        return result;\n    }\n", "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n// buggy code\n//             result = result + x % base;\n//             x = x - x / base;\n           x = x - x % base;\n            result = result + x % base;\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Semantical match", "Test fail", "Semantical match", "Test fail", "Semantical match", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "REVERSE_DELETE", "buggy_code": "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(c.indexOf(s.charAt(i)) != -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "patches": ["    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf(s.charAt(i)) == -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(!c.contains(String.valueOf(s.charAt(i)))) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf((int)s.charAt(i)) == -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf((int)s.charAt(i)) != -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf(s.charAt(i)) < 0) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(!c.contains(\"\" + s.charAt(i))) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.contains(String.valueOf(s.charAt(i)))) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf(String.valueOf(s.charAt(i))) == -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf(Character.toString(s.charAt(i))) == -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n", "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n// buggy code\n//             if(c.indexOf(s.charAt(i)) != -1) {\n           if(c.indexOf(String.valueOf(s.charAt(i))) != -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n"], "test_results": ["Line match", "Plausible", "Plausible", "Test fail", "Plausible", "Plausible", "Test fail", "Plausible", "Plausible", "Test fail"]}
{"bug_id": "CAR_RACE_COLLISION", "buggy_code": "    public static int car_race_collision(int n) {\n        return n;\n    }\n", "patches": ["    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return n - 1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return n-1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return 0;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return n + 1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return n+1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return 1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return (int) Math.pow(2, n);\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return (int)Math.pow(2, n);\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return (int) Math.pow(2, n) - 1;\n    }\n", "    public static int car_race_collision(int n) {\n// buggy code\n//         return n;\n       return (int)Math.pow(2,n);\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "NUMERICAL_LETTER_GRADE", "buggy_code": "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "patches": ["    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.0)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.3)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.0)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.0)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.0)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.7)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.7)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.7)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa >= 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa >= 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa >= 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n", "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n// buggy code\n//             else if (gpa > 1.3)\n//                 letter_grade[i] = \"C-\";\n//             else if (gpa > 1.0)\n//                 letter_grade[i] = \"D+\";\n//             else if (gpa > 1.7)\n//                 letter_grade[i] = \"C\";\n           else if (gpa > 1.0)\n                letter_grade[i] = \"C\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 0.3)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail", "Test fail", "Test fail"]}
{"bug_id": "ODD_COUNT", "buggy_code": "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 == 0) {\n                    n--;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 != 0) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 0) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               n += digit % 2;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if((digit % 2) == 0) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 0) {\n                    n += 1;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 0 && digit != 0) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 0)\n                    n++;\n                else {\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n", "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n// buggy code\n//                 if(digit % 2 == 0) {\n//                     n--;\n               if(digit % 2 == 0) {\n                    n++;\n                } else {\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n"], "test_results": ["Line match", "Plausible", "Test fail", "Compile fail", "Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "HEX_KEY", "buggy_code": "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n", "patches": ["    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '5' || c == '6' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '5' || c == '7' || c == '8')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '5' || c == '7' || c == '1')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '1' || c == '2' || c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '3' || c == '5' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c >= '2' && c <= '7')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '5')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '3' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n", "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n// buggy code\n//             if (c == '2' || c == '3' || c == '5' || c == '7')\n           if (c == '2' || c == '3' || c == '7')\n                result += 1;\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "CORRECT_BRACKETING", "buggy_code": "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth >= 0)\n                return true;\n        }\n        return false;\n    }\n", "patches": ["    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth < 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth < 0)\n                return false;\n        }\n        return (depth == 0);\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth < 0)\n                break;\n        }\n        return depth == 0;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth > 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth <= 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n           if (depth == 0)\n                return true;\n        }\n        return false;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n       }\n        return depth == 0;\n    }\n", "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n// buggy code\n//             if (depth >= 0)\n//                 return true;\n//         }\n//         return false;\n    }\n"], "test_results": ["Test fail", "Line match", "AST match", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "TRIANGLE_AREA_2", "buggy_code": "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.pow(s, 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "patches": ["    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s * (s-a) * (s-b) * (s-c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = s * (s - a) * (s - b) * (s - c);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = (s * (s - a) * (s - b) * (s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.pow((s * (s - a) * (s - b) * (s - c)), 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s*(s - a)*(s - b)*(s - c));\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n", "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n// buggy code\n//         double result = Math.pow(s, 0.5);\n       double result = Math.sqrt(s * (s - a) * (s - b) * (s - c)); \n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n"], "test_results": ["Plausible", "Plausible", "Compile fail", "Plausible", "Test fail", "Test fail", "Test fail", "AST match", "Plausible", "Plausible"]}
{"bug_id": "GET_ODD_COLLATZ", "buggy_code": "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n >= 1) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "patches": ["    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n > 1) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n > 1) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n > 1) {\n            if((n % 2) == 1) n = n / 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n >= 2) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n != 1) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n >= 2) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n != 1) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n >= 2) {\n            if((n % 2) == 1) n = n / 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n       while(n >= 1 && !result.contains(n)) {\n            if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n", "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n// buggy code\n//         while(n >= 1) {\n//             if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Plausible", "Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "FIB4", "buggy_code": "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n        }\n        return result.get(result.size() - 1);\n    }\n", "patches": ["    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.remove(0);\n            result.remove(0);\n            result.remove(0);\n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.add(0);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.set(0, result.get(1));\n            result.set(1, result.get(2));\n            result.set(2, result.get(3));\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.remove(0); \n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.remove(0);\n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.remove(0);\n            result.remove(0);\n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.get(0) = result.get(1);\n            result.get(1) = result.get(2);\n            result.get(2) = result.get(3);\n        }\n        return result.get(result.size() - 1);\n    }\n", "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n// buggy code\n// \n           result.set(0, result.get(2));\n            result.set(1, result.get(3));\n        }\n        return result.get(result.size() - 1);\n    }\n"], "test_results": ["Test fail", "Line match", "Test fail", "Test fail", "Test fail", "Line match", "Test fail", "Test fail", "Compile fail", "Compile fail"]}
{"bug_id": "TRIANGLE_AREA", "buggy_code": "    public static double triangle_area(double a, double h) {\n        return a * h;\n    }\n", "patches": ["    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return 0.5 * a * h;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return a * h / 2;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return (a * h) / 2;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return a * h / 2.0;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return (a * h) / 2.0;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return a / 2 * h;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return (a * h)/2;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return .5 * a * h;\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n       return a * (h / 2);\n    }\n", "    public static double triangle_area(double a, double h) {\n// buggy code\n//         return a * h;\n    }\n"], "test_results": ["Plausible", "Plausible", "Plausible", "AST match", "AST match", "Plausible", "Plausible", "Plausible", "Compile fail", "Compile fail"]}
{"bug_id": "CHECK_IF_LAST_CHAR_IS_A_LETTER", "buggy_code": "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n", "patches": ["    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length > 0) last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length > 0) last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length == 0) return false;\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length == 0) return true;\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length == 0) return false;\n        last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length > 0) {\n            last = parts[parts.length - 1];\n            if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n            if(txt.length() == 1) last = \" \";\n            int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n            return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n        } else return true;\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n       if(parts.length == 0) last = \" \";\n        else last = parts[parts.length - 1];\n        if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 1) last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n", "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n// buggy code\n//         last = parts[parts.length - 1];\n//         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n//         if(txt.length() == 1) last = \" \";\n//         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n//         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "IS_PRIME", "buggy_code": "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 0; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "patches": ["    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 1; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k <= Math.sqrt(n); k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k * k <= n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k <= n/2; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 2; k <= n / 2; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 0; k < n - 1; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n       for (int k = 0; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n", "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n// buggy code\n//         for (int k = 0; k < n; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n"], "test_results": ["Semantical match", "Test fail", "Test fail", "Semantical match", "Semantical match", "Semantical match", "Semantical match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "REMOVE_VOWELS", "buggy_code": "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "patches": ["    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (\"aeiou\".indexOf(c) != -1)\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == ' ')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (\"aeiou\".indexOf(c) >= 0)\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == '-')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (\"aeiouAEIOU\".indexOf(c) != -1)\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n", "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n// buggy code\n//             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == 'h')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Semantical match", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "GENERATE_INTEGERS", "buggy_code": "    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "patches": ["    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(1, a);\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(a, 2);\n        int upper = Math.min(b, 8);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, b);\n        int upper = Math.min(8, a);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, a);\n        int upper = Math.min(10, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, a - 1);\n        int upper = Math.min(8, b + 1);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, a + 1);\n        int upper = Math.min(8, b - 1);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, a - 1);\n        int upper = Math.min(8, b - 1);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, Math.min(a, 8));\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n       int lower = Math.max(2, Math.min(8, a));\n        int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n", "    public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy code\n//         int lower = Math.max(2, a);\n//         int upper = Math.min(8, b);\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Compile fail"]}
{"bug_id": "PROD_SIGNS", "buggy_code": "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] > 0) prod *= 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "patches": ["    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] > 0) prod *= arr[i];\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] > 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] > 0) prod *= 1;\n            else prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] > 0) prod *= Math.abs(arr[i]);\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else prod *= arr[i];\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] > 0) prod = prod * 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else prod *= Math.abs(arr[i]);\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n", "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n// buggy code\n//             else if(arr[i] > 0) prod *= 1;\n           else if(arr[i] < 0) prod *= -1;\n            else prod *= 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n"], "test_results": ["Line match", "Test fail", "Test fail", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Plausible"]}
{"bug_id": "PARSE_MUSIC", "buggy_code": "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       music_string = music_string.trim();\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       if (music_string.equals(\"\")){\n            return result;\n        }\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       music_string = music_string.toLowerCase();\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       if (music_string.isEmpty()) {\n            return result;\n        }\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       if (music_string.equals(\"\")) {\n            return result;\n        }\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       if (music_string.length() == 0) return result;\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       music_string = music_string.replaceAll(\"\\\\|\", \"\");\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       music_string = music_string.replace(\"|\", \"\");\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n", "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n// buggy code\n// \n       music_string = music_string.replaceAll(\"\\\\|\", \"|\");\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Plausible", "Test fail", "Disagree", "Plausible", "Plausible", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "SOLVE_STRING", "buggy_code": "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            else sb.append(Character.toLowerCase(c));\n            flg = 1;\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "patches": ["    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            } else sb.append(Character.toLowerCase(c));\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           flg = 1;\n            if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            else sb.append(Character.toLowerCase(c));\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n            else sb.append(Character.toUpperCase(c));\n            flg = 1 - flg;\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            }\n            else sb.append(Character.toLowerCase(c));\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isLowerCase(c)) {\n                flg = 1;\n                sb.append(Character.toUpperCase(c));\n            } else sb.append(Character.toLowerCase(c));\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n                flg = 1;\n            } else sb.append(c);\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n            else sb.append(Character.toUpperCase(c));\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n            else if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n            flg = 1 - flg;\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n", "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n// buggy code\n//             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n//             else sb.append(Character.toLowerCase(c));\n//             flg = 1;\n           if (flg == 0) {\n                if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n                else sb.append(Character.toLowerCase(c));\n                flg = 1;\n            }\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n"], "test_results": ["Plausible", "Test fail", "Test fail", "Plausible", "Plausible", "Plausible", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "STRANGE_SORT_LIST", "buggy_code": "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n        }\n        return result;\n    }\n", "patches": ["    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(Collections.min(lst));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           switched = !switched;\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           switched = !switched;\n            lst.remove(Collections.min(lst));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(Collections.min(lst));\n            switched = !switched;\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(result.get(result.size() - 1));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(Collections.max(lst));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(result.get(result.size()-1));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           lst.remove(lst.indexOf(Collections.min(lst)));\n        }\n        return result;\n    }\n", "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n// buggy code\n// \n           switched = !switched;\n            lst.remove(Collections.max(lst));\n        }\n        return result;\n    }\n"], "test_results": ["Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
{"bug_id": "PRIME_FIB", "buggy_code": "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len));\n            if (is_prime(fib.get(len - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "patches": ["    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len - 1) + fib.get(len - 1));\n            if (is_prime(fib.get(len)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len - 1) + fib.get(len - 1));\n            if (is_prime(fib.get(fib.size() - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len) + fib.get(len - 1));\n            if (is_prime(fib.get(len)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           if (is_prime(fib.get(len - 1)))\n                fib.add(fib.get(len - 1) + fib.get(len));\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len - 1) + fib.get(len - 1));\n            if (is_prime(fib.get(len - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len) + fib.get(len - 1));\n            if (is_prime(fib.get(fib.size() - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len - 1) + fib.get(len - 1));\n            if (is_prime(fib.get(len - 1) + fib.get(len)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           if (is_prime(fib.get(len - 1)))\n                fib.add(fib.get(len - 1) + fib.get(len));\n            else\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n", "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n// buggy code\n//             fib.add(fib.get(len - 1) + fib.get(len));\n//             if (is_prime(fib.get(len - 1)))\n           fib.add(fib.get(len - 1) + fib.get(len - 1));\n            if (is_prime(fib.get(len - 1)))\n                n -= 1;\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n"], "test_results": ["Compile fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail", "Test fail"]}
