{"identifier": "Math-28", "patch": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // check if the entry is strictly equal to the current min ratio\n                // do not use a ulp/epsilon check\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // there's a degeneracy as indicated by a tie in the minimum ratio test\n            // 1. check if there's an artificial variable that can be forced out of the basis\n            for (int i = 0; i < tableau.getNumObjectiveFunctions(); i++) {\n                final double entry = tableau.getEntry(minRatioPositions.get(0), i);\n                if (Precision.compareTo(entry, 1d, maxUlps) == 0) {\n                    return minRatioPositions.get(0);\n                } else if (Precision.compareTo(entry, -1d, maxUlps) == 0) {\n                    return minRatioPositions.get(1);\n                }\n            }\n            // 2. check if there's a non-artificial variable that can be forced out of the basis\n            for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n                final double entry = tableau.getEntry(minRatioPositions.get(0), i);\n                if (Precision.compareTo(entry, 1d, maxUlps) == 0) {\n                    return minRatioPositions.get(0);\n                } else if (Precision.compareTo(entry, -1d, maxUlps) == 0) {\n                    return minRatioPositions.get(1);\n                }\n            }\n        }\n        return minRatioPositions.get(0);\n    }\n", "result": 0}