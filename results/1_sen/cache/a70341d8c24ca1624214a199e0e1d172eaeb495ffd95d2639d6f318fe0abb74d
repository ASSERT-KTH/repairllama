{"identifier": "Math-60", "patch": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n// buggy code\n//        try {\n//        return 0.5 * (1.0 + Erf.erf((dev) /\n//                    (standardDeviation * FastMath.sqrt(2.0))));\n//        } catch (MaxIterationsExceededException ex) {\n//            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n//                return 0;\n//            } else if (x > (mean + 20 * standardDeviation)) {\n//                return 1;\n//            } else {\n//                throw ex;\n//            }\n//        }\n        if (x < (mean - 20 * standardDeviation)) {\n            return 0;\n        } else if (x > (mean + 20 * standardDeviation)) {\n            return 1;\n        } else {\n            return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        }\n\n    }\n", "result": 0}