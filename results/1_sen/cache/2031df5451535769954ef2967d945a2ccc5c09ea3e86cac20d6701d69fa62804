{"identifier": "JacksonDatabind-76", "patch": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n// buggy code\n//                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n//                    t = p.nextToken();\n//                    Object bean;\n//                    try {\n//                        bean = creator.build(ctxt, buffer);\n//                    } catch (Exception e) {\n//                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n//                        continue;\n//                    }\n//                    while (t == JsonToken.FIELD_NAME) {\n//                        p.nextToken();\n//                        tokens.copyCurrentStructure(p);\n//                        t = p.nextToken();\n//                    }\n//                    tokens.writeEndObject();\n//                    if (bean.getClass() != _beanType.getRawClass()) {\n//                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n//                        return null;\n//                    }\n//                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n//                }\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    continue;\n                }\n\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n        // We hit END_OBJECT, so:\n        Object bean;\n        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n", "result": 0}