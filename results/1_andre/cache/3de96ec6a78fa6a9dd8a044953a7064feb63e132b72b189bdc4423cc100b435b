{"identifier": "Math-86", "patch": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n// buggy code\n//            if (lTData[i][i] < absolutePositivityThreshold) {\n//                throw new NotPositiveDefiniteMatrixException();\n//            }\n//            // check off-diagonal elements (and reset them to 0)\n//            for (int j = i + 1; j < order; ++j) {\n//                final double[] lJ = lTData[j];\n//                final double lIJ = lI[j];\n//                final double lJI = lJ[i];\n//                final double maxDelta =\n//                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n//                if (Math.abs(lIJ - lJI) > maxDelta) {\n//                    throw new NotSymmetricMatrixException();\n//                }\n//                lJ[i] = 0;\n//           }\n//        }\n//        // transform the matrix\n//        for (int i = 0; i < order; ++i) {\n//            final double[] ltI = lTData[i];\n//            // check diagonal element\n            if (lI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            // check off-diagonal elements (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double lIJ = lI[j];\n                final double lJI = lTData[j][i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lTData[j][i] = 0;\n            }\n        }\n        // transform the matrix\n        for (int i = 0; i < order; ++i) {\n            final double[] ltI = lTData[i];\n            // check diagonal element\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i];\n            for (int q = order - 1; q > i; --q) {\n                ltI[q] *= inverse;\n                final double[] ltQ = lTData[q];\n                for (int p = q; p < order; ++p) {\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }\n", "result": 0}