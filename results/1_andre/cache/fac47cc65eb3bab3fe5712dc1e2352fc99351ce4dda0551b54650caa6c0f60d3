{"identifier": "Math-88", "patch": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n// buggy code\n//        for (int i = 0; i < coefficients.length; i++) {\n//            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n//                // if multiple variables can take a given value \n//                // then we choose the first and set the rest equal to 0\n//                coefficients[i] =\n//                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n//                    (restrictToNonNegative ? 0 : mostNegative);\n//            if (basicRow != null) {\n//                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n//                    if (tableau.getEntry(basicRow, j) == 1) {\n//                         coefficients[i] = 0;\n//                    }\n//                }\n//            }\n//        }\n        for (int i = coefficients.length - 1; i >= 0; i--) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                // if multiple variables can take a given value \n                // then we choose the first and set the rest equal to 0\n                coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions() + i + 1; j < coefficients.length; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n", "result": 0}