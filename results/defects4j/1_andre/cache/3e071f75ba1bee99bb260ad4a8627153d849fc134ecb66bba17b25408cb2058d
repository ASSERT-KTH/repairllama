{"identifier": "JacksonDatabind-54", "patch": "    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        if (contentTypeSer != null) {\n            if (serializationType == null) {\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            if (ct == null) {\n                throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property '\"\n                        +propDef.getName()+\"' (of type \"+_beanDesc.getType()+\"); serialization type \"+serializationType+\" has no content\");\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { \n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        switch (inclusion) {\n        case NON_DEFAULT:\n            if (_defaultInclusion.getValueInclusion() == JsonInclude.Include.NON_DEFAULT) {\n                valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } else {\n                valueToSuppress = getDefaultValue(actualType);\n            }\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: \n            suppressNulls = true;\n// buggy code\n//            if (declaredType.isReferenceType()) {\n//                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n//            }\n//            break;\n//        case NON_EMPTY:\n//            suppressNulls = true;\n//            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n//            break;\n//        case NON_NULL:\n//            suppressNulls = true;\n//        case ALWAYS: \n//        default:\n//            if (declaredType.isContainerType()\n//                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n//                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n//            }\n//            break;\n        case NON_EMPTY:\n            suppressNulls = true;\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n        case ALWAYS: \n        default:\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }\n", "result": 0}