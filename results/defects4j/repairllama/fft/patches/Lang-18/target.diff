--- 
+++ 
@@ -1,122 +1,122 @@
     protected List<Rule> parsePattern() {
         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
         List<Rule> rules = new ArrayList<Rule>();
 
         String[] ERAs = symbols.getEras();
         String[] months = symbols.getMonths();
         String[] shortMonths = symbols.getShortMonths();
         String[] weekdays = symbols.getWeekdays();
         String[] shortWeekdays = symbols.getShortWeekdays();
         String[] AmPmStrings = symbols.getAmPmStrings();
 
         int length = mPattern.length();
         int[] indexRef = new int[1];
 
         for (int i = 0; i < length; i++) {
             indexRef[0] = i;
             String token = parseToken(mPattern, indexRef);
             i = indexRef[0];
 
             int tokenLen = token.length();
             if (tokenLen == 0) {
                 break;
             }
 
             Rule rule;
             char c = token.charAt(0);
 
             switch (c) {
             case 'G': // era designator (text)
                 rule = new TextField(Calendar.ERA, ERAs);
                 break;
             case 'y': // year (number)
-                if (tokenLen >= 4) {
-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);
+                if (tokenLen == 2) {
+                    rule = TwoDigitYearField.INSTANCE;
                 } else {
-                    rule = TwoDigitYearField.INSTANCE;
+                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
                 }
                 break;
             case 'M': // month in year (text and number)
                 if (tokenLen >= 4) {
                     rule = new TextField(Calendar.MONTH, months);
                 } else if (tokenLen == 3) {
                     rule = new TextField(Calendar.MONTH, shortMonths);
                 } else if (tokenLen == 2) {
                     rule = TwoDigitMonthField.INSTANCE;
                 } else {
                     rule = UnpaddedMonthField.INSTANCE;
                 }
                 break;
             case 'd': // day in month (number)
                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
                 break;
             case 'h': // hour in am/pm (number, 1..12)
                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
                 break;
             case 'H': // hour in day (number, 0..23)
                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
                 break;
             case 'm': // minute in hour (number)
                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);
                 break;
             case 's': // second in minute (number)
                 rule = selectNumberRule(Calendar.SECOND, tokenLen);
                 break;
             case 'S': // millisecond (number)
                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
                 break;
             case 'E': // day in week (text)
                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
                 break;
             case 'D': // day in year (number)
                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
                 break;
             case 'F': // day of week in month (number)
                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
                 break;
             case 'w': // week in year (number)
                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
                 break;
             case 'W': // week in month (number)
                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
                 break;
             case 'a': // am/pm marker (text)
                 rule = new TextField(Calendar.AM_PM, AmPmStrings);
                 break;
             case 'k': // hour in day (1..24)
                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
                 break;
             case 'K': // hour in am/pm (0..11)
                 rule = selectNumberRule(Calendar.HOUR, tokenLen);
                 break;
             case 'z': // time zone (text)
                 if (tokenLen >= 4) {
                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
                 } else {
                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
                 }
                 break;
             case 'Z': // time zone (value)
                 if (tokenLen == 1) {
                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
                 } else {
                     rule = TimeZoneNumberRule.INSTANCE_COLON;
                 }
                 break;
             case '\'': // literal text
                 String sub = token.substring(1);
                 if (sub.length() == 1) {
                     rule = new CharacterLiteral(sub.charAt(0));
                 } else {
                     rule = new StringLiteral(sub);
                 }
                 break;
             default:
                 throw new IllegalArgumentException("Illegal pattern component: " + token);
             }
 
             rules.add(rule);
         }
 
         return rules;
     }
