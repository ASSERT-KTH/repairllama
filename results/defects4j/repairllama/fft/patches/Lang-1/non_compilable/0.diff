--- 
+++ 
@@ -1,165 +1,144 @@
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
-        // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
                 pfxLen += pfx.length();
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
-            }
-            if (hexDigits > 8) { // too many for an int
+        if (pfxLen > 0) { 
+// buggy code
+//            final int hexDigits = str.length() - pfxLen;
+//            if (hexDigits > 16) { 
+//                return createBigInteger(str);
+//            }
+//            if (hexDigits > 8) { 
+               final int hexDigits = str.length() - pfxLen;
+                if (hexDigits > 8) { 
+                    return createBigInteger(str);
+                }
+
                 return createLong(str);
             }
             return createInteger(str);
         }
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
-
-        int numDecimals = 0; // Check required precision (LANG-693)
-        if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; 
+        int numDecimals = 0; 
+        if (decPos > -1) { 
+            if (expPos > -1) { 
+                if (expPos < decPos || expPos > str.length()) { 
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+            numDecimals = dec.length(); 
         } else {
             if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+                if (expPos > str.length()) { 
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
-                            // Too big for a long
+                        } catch (final NumberFormatException nfe) { 
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         final Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException nfe) { 
                     }
-                    //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         final Double d = NumberUtils.createDouble(numeric);
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                             return d;
                         }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException nfe) { 
                     }
                     try {
                         return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                    } catch (final NumberFormatException e) { 
                     }
-                    //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
-
             }
         }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+        if (dec == null && exp == null) { 
             try {
                 return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+            } catch (final NumberFormatException nfe) { 
             }
             try {
                 return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+            } catch (final NumberFormatException nfe) { 
             }
             return createBigInteger(str);
         }
-
-        //Must be a Float, Double, BigDecimal
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
+            if(numDecimals <= 7){
                 final Float f = createFloat(str);
                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                     return f;
                 }
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        } catch (final NumberFormatException nfe) { 
         }
         try {
-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
+            if(numDecimals <= 16){
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                     return d;
                 }
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        } catch (final NumberFormatException nfe) { 
         }
-
         return createBigDecimal(str);
     }
