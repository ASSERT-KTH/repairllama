{"identifier": "JacksonDatabind-83", "patch": "    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        String text = p.getValueAsString();\n        if (text != null) { \n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                return _deserializeFromEmptyString();\n            }\n            Exception cause = null;\n            try {\n// buggy code\n//                if (_deserialize(text, ctxt) != null) {\n//                return _deserialize(text, ctxt);\n//                }\n           } catch (Exception e) {\n                cause = e;\n            }\n            try {\n                return _deserialize(text, ctxt);\n\n            } catch (IllegalArgumentException iae) {\n                cause = iae;\n            } catch (MalformedURLException me) {\n                cause = me;\n            }\n            String msg = \"not a valid textual representation\";\n            if (cause != null) {\n                String m2 = cause.getMessage();\n                if (m2 != null) {\n                    msg = msg + \", problem: \"+m2;\n                }\n            }\n            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n            if (cause != null) {\n                e.initCause(cause);\n            }\n            throw e;\n        }\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }\n", "result": 1}